//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BattleAchieveWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("BattleAchieve");
		L.RegFunction("Load", Load);
		L.RegFunction("PushResultToLua", PushResultToLua);
		L.RegFunction("Init", Init);
		L.RegFunction("RegisterMessage", RegisterMessage);
		L.RegFunction("RemoveMessage", RemoveMessage);
		L.RegFunction("IsFirstComplete", IsFirstComplete);
		L.RegFunction("AddBattleTaskNumber", AddBattleTaskNumber);
		L.RegFunction("SetBattleTask", SetBattleTask);
		L.RegFunction("AddDailyTask", AddDailyTask);
		L.RegFunction("SetDailyTask", SetDailyTask);
		L.RegFunction("AddBattleAchieveNumber", AddBattleAchieveNumber);
		L.RegFunction("AchieveToString", AchieveToString);
		L.RegFunction("SetBattleAchieve", SetBattleAchieve);
		L.RegFunction("IsComplete", IsComplete);
		L.RegFunction("OnlyBattleSkillRelationForMan", OnlyBattleSkillRelationForMan);
		L.RegFunction("OnlyBattleSkillRelationForSkill", OnlyBattleSkillRelationForSkill);
		L.RegFunction("OnlyBattleKillRelation", OnlyBattleKillRelation);
		L.RegFunction("KillArmyInLevelLimit", KillArmyInLevelLimit);
		L.RegFunction("OnlyBattleFinish", OnlyBattleFinish);
		L.RegFunction("BattleChangeSkill", BattleChangeSkill);
		L.RegFunction("BattleExpChange", BattleExpChange);
		L.RegFunction("BattleBuffer", BattleBuffer);
		L.RegFunction("AttackXueRen", AttackXueRen);
		L.RegFunction("BattleRoleLevelCheck", BattleRoleLevelCheck);
		L.RegFunction("CompleteCup", CompleteCup);
		L.RegFunction("GetFinalRank", GetFinalRank);
		L.RegFunction("BattleFinish", BattleFinish);
		L.RegFunction("CMSG_BATTLE_ACHIEVE", CMSG_BATTLE_ACHIEVE);
		L.RegFunction("CMSG_BATTLE_TASK", CMSG_BATTLE_TASK);
		L.RegFunction("CMSG_BATTLE_DAILY", CMSG_BATTLE_DAILY);
		L.RegFunction("SMSG_BATTLE_ACHIEVE", SMSG_BATTLE_ACHIEVE);
		L.RegFunction("SMSG_BATTLE_TASK", SMSG_BATTLE_TASK);
		L.RegFunction("SMSG_BATTLE_DAILY", SMSG_BATTLE_DAILY);
		L.RegVar("completeAchieve", get_completeAchieve, set_completeAchieve);
		L.RegVar("battleAchieveList", get_battleAchieveList, set_battleAchieveList);
		L.RegVar("taskAchieveList", get_taskAchieveList, set_taskAchieveList);
		L.RegVar("dailyAchieveList", get_dailyAchieveList, set_dailyAchieveList);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject<System.Collections.ArrayList>(L, 1);
			BattleAchieve.Load(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushResultToLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.ArrayList o = BattleAchieve.PushResultToLua();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.RegisterMessage();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.RemoveMessage();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFirstComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			bool o = BattleAchieve.IsFirstComplete(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBattleTaskNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleAchieve.AddBattleTaskNumber(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBattleTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleAchieve.SetBattleTask(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDailyTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleAchieve.AddDailyTask(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDailyTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleAchieve.SetDailyTask(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBattleAchieveNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleAchieve.AddBattleAchieveNumber(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AchieveToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BattleDB.t_achievement arg0 = (BattleDB.t_achievement)ToLua.CheckObject<BattleDB.t_achievement>(L, 1);
			string o = BattleAchieve.AchieveToString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBattleAchieve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleAchieve.SetBattleAchieve(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = BattleAchieve.IsComplete(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnlyBattleSkillRelationForMan(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			System.Collections.Generic.Dictionary<string,int> arg1 = (System.Collections.Generic.Dictionary<string,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,int>));
			BattleAchieve.OnlyBattleSkillRelationForMan(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnlyBattleSkillRelationForSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			BattleAchieve.OnlyBattleSkillRelationForSkill(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnlyBattleKillRelation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleAnimalPlayer arg0 = (BattleAnimalPlayer)ToLua.CheckObject<BattleAnimalPlayer>(L, 1);
			BattleAnimalPlayer arg1 = (BattleAnimalPlayer)ToLua.CheckObject<BattleAnimalPlayer>(L, 2);
			BattleAchieve.OnlyBattleKillRelation(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int KillArmyInLevelLimit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleAnimalPlayer arg0 = (BattleAnimalPlayer)ToLua.CheckObject<BattleAnimalPlayer>(L, 1);
			BattleAnimalPlayer arg1 = (BattleAnimalPlayer)ToLua.CheckObject<BattleAnimalPlayer>(L, 2);
			BattleAchieve.KillArmyInLevelLimit(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnlyBattleFinish(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.OnlyBattleFinish();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleChangeSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.BattleChangeSkill();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleExpChange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.BattleExpChange();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			BattleAchieve.BattleBuffer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AttackXueRen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.AttackXueRen();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleRoleLevelCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BattleAnimalPlayer arg0 = (BattleAnimalPlayer)ToLua.CheckObject<BattleAnimalPlayer>(L, 1);
			BattleAchieve.BattleRoleLevelCheck(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompleteCup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.CompleteCup();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFinalRank(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = BattleAchieve.GetFinalRank(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleFinish(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.BattleFinish();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CMSG_BATTLE_ACHIEVE(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.CMSG_BATTLE_ACHIEVE();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CMSG_BATTLE_TASK(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.CMSG_BATTLE_TASK();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CMSG_BATTLE_DAILY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			BattleAchieve.CMSG_BATTLE_DAILY();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SMSG_BATTLE_ACHIEVE(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			s_net_message arg0 = (s_net_message)ToLua.CheckObject<s_net_message>(L, 1);
			BattleAchieve.SMSG_BATTLE_ACHIEVE(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SMSG_BATTLE_TASK(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			s_net_message arg0 = (s_net_message)ToLua.CheckObject<s_net_message>(L, 1);
			BattleAchieve.SMSG_BATTLE_TASK(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SMSG_BATTLE_DAILY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			s_net_message arg0 = (s_net_message)ToLua.CheckObject<s_net_message>(L, 1);
			BattleAchieve.SMSG_BATTLE_DAILY(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_completeAchieve(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, BattleAchieve.completeAchieve);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_battleAchieveList(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, BattleAchieve.battleAchieveList);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_taskAchieveList(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, BattleAchieve.taskAchieveList);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dailyAchieveList(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, BattleAchieve.dailyAchieveList);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_completeAchieve(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<int> arg0 = (System.Collections.Generic.List<int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<int>));
			BattleAchieve.completeAchieve = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_battleAchieveList(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			BattleAchieve.battleAchieveList = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_taskAchieveList(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			BattleAchieve.taskAchieveList = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dailyAchieveList(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<int,int> arg0 = (System.Collections.Generic.Dictionary<int,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,int>));
			BattleAchieve.dailyAchieveList = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

