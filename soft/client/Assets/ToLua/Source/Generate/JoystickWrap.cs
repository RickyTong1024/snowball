//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class JoystickWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Joystick), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("setMode", setMode);
		L.RegFunction("setForBid", setForBid);
		L.RegFunction("IsHolding", IsHolding);
		L.RegFunction("IsStart", IsStart);
		L.RegFunction("IsCancel", IsCancel);
		L.RegFunction("Mode", Mode);
		L.RegFunction("Axis2Angle", Axis2Angle);
		L.RegFunction("GetPos", GetPos);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setMode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setForBid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.setForBid(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsHolding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			bool o = obj.IsHolding();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			bool o = obj.IsStart();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			bool o = obj.IsCancel();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Mode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			int o = obj.Mode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Axis2Angle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
				float o = obj.Axis2Angle();
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				float o = obj.Axis2Angle(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Joystick.Axis2Angle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Joystick obj = (Joystick)ToLua.CheckObject<Joystick>(L, 1);
			UnityEngine.Vector2 o = obj.GetPos();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

