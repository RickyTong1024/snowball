//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MapManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MapManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("fini", fini);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("IsLoading", IsLoading);
		L.RegFunction("LoadProgress", LoadProgress);
		L.RegFunction("SetScene", SetScene);
		L.RegFunction("SaveCam", SaveCam);
		L.RegFunction("LoadCam", LoadCam);
		L.RegFunction("SetInitCam", SetInitCam);
		L.RegFunction("SetCurCam", SetCurCam);
		L.RegFunction("SetVCam", SetVCam);
		L.RegFunction("SetTargetCam", SetTargetCam);
		L.RegFunction("WorldToScreenPoint", WorldToScreenPoint);
		L.RegFunction("UnloadScene", UnloadScene);
		L.RegFunction("shake_cam", shake_cam);
		L.RegFunction("in_view", in_view);
		L.RegFunction("load_nmi", load_nmi);
		L.RegFunction("clear_nmi", clear_nmi);
		L.RegFunction("can_move", can_move);
		L.RegFunction("can_move1", can_move1);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int fini(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			obj.fini();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
			obj.LoadScene(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			bool o = obj.IsLoading();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadProgress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float o = obj.LoadProgress();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
			obj.SetScene(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveCam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			obj.SaveCam();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadCam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			obj.LoadCam();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInitCam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
			int arg6 = (int)LuaDLL.luaL_checknumber(L, 8);
			obj.SetInitCam(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurCam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetCurCam(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVCam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetVCam(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTargetCam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetTargetCam(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldToScreenPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 o = obj.WorldToScreenPoint(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			obj.UnloadScene();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int shake_cam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.shake_cam(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int in_view(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.in_view(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int load_nmi(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.load_nmi(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int clear_nmi(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			obj.clear_nmi();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int can_move(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.can_move(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int can_move1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MapManager obj = (MapManager)ToLua.CheckObject<MapManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.can_move1(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

