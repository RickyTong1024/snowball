//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NGUITextWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("NGUIText");
		L.RegFunction("Update", Update);
		L.RegFunction("Prepare", Prepare);
		L.RegFunction("GetSymbol", GetSymbol);
		L.RegFunction("GetGlyphWidth", GetGlyphWidth);
		L.RegFunction("GetGlyph", GetGlyph);
		L.RegFunction("ParseAlpha", ParseAlpha);
		L.RegFunction("ParseColor", ParseColor);
		L.RegFunction("ParseColor24", ParseColor24);
		L.RegFunction("ParseColor32", ParseColor32);
		L.RegFunction("EncodeColor", EncodeColor);
		L.RegFunction("EncodeAlpha", EncodeAlpha);
		L.RegFunction("EncodeColor24", EncodeColor24);
		L.RegFunction("EncodeColor32", EncodeColor32);
		L.RegFunction("ParseSymbol", ParseSymbol);
		L.RegFunction("IsHex", IsHex);
		L.RegFunction("StripSymbols", StripSymbols);
		L.RegFunction("Align", Align);
		L.RegFunction("GetExactCharacterIndex", GetExactCharacterIndex);
		L.RegFunction("GetApproximateCharacterIndex", GetApproximateCharacterIndex);
		L.RegFunction("EndLine", EndLine);
		L.RegFunction("CalculatePrintedSize", CalculatePrintedSize);
		L.RegFunction("CalculatePrintedWidth", CalculatePrintedWidth);
		L.RegFunction("CalculateOffsetToFit", CalculateOffsetToFit);
		L.RegFunction("GetEndOfLineThatFits", GetEndOfLineThatFits);
		L.RegFunction("WrapText", WrapText);
		L.RegFunction("Print", Print);
		L.RegFunction("PrintApproximateCharacterPositions", PrintApproximateCharacterPositions);
		L.RegFunction("PrintExactCharacterPositions", PrintExactCharacterPositions);
		L.RegFunction("PrintCaretAndSelection", PrintCaretAndSelection);
		L.RegFunction("ReplaceLink", ReplaceLink);
		L.RegFunction("InsertHyperlink", InsertHyperlink);
		L.RegFunction("ReplaceLinks", ReplaceLinks);
		L.RegVar("bitmapFont", get_bitmapFont, set_bitmapFont);
		L.RegVar("dynamicFont", get_dynamicFont, set_dynamicFont);
		L.RegVar("glyph", get_glyph, set_glyph);
		L.RegVar("fontSize", get_fontSize, set_fontSize);
		L.RegVar("fontScale", get_fontScale, set_fontScale);
		L.RegVar("pixelDensity", get_pixelDensity, set_pixelDensity);
		L.RegVar("fontStyle", get_fontStyle, set_fontStyle);
		L.RegVar("alignment", get_alignment, set_alignment);
		L.RegVar("tint", get_tint, set_tint);
		L.RegVar("rectWidth", get_rectWidth, set_rectWidth);
		L.RegVar("rectHeight", get_rectHeight, set_rectHeight);
		L.RegVar("regionWidth", get_regionWidth, set_regionWidth);
		L.RegVar("regionHeight", get_regionHeight, set_regionHeight);
		L.RegVar("maxLines", get_maxLines, set_maxLines);
		L.RegVar("gradient", get_gradient, set_gradient);
		L.RegVar("gradientBottom", get_gradientBottom, set_gradientBottom);
		L.RegVar("gradientTop", get_gradientTop, set_gradientTop);
		L.RegVar("encoding", get_encoding, set_encoding);
		L.RegVar("spacingX", get_spacingX, set_spacingX);
		L.RegVar("spacingY", get_spacingY, set_spacingY);
		L.RegVar("premultiply", get_premultiply, set_premultiply);
		L.RegVar("symbolStyle", get_symbolStyle, set_symbolStyle);
		L.RegVar("finalSize", get_finalSize, set_finalSize);
		L.RegVar("finalSpacingX", get_finalSpacingX, set_finalSpacingX);
		L.RegVar("finalLineHeight", get_finalLineHeight, set_finalLineHeight);
		L.RegVar("baseline", get_baseline, set_baseline);
		L.RegVar("useSymbols", get_useSymbols, set_useSymbols);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NGUIText.Update();
				return 0;
			}
			else if (count == 1)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				NGUIText.Update(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.Update");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Prepare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NGUIText.Prepare(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSymbol(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			BMSymbol o = NGUIText.GetSymbol(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGlyphWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float o = NGUIText.GetGlyphWidth(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGlyph(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.GlyphInfo o = NGUIText.GetGlyph(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			float o = NGUIText.ParseAlpha(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Color o = NGUIText.ParseColor(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color o = NGUIText.ParseColor(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.ParseColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseColor24(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Color o = NGUIText.ParseColor24(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Color o = NGUIText.ParseColor24(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.ParseColor24");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseColor32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Color o = NGUIText.ParseColor32(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
				string o = NGUIText.EncodeColor(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				string o = NGUIText.EncodeColor(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.EncodeColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			string o = NGUIText.EncodeAlpha(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeColor24(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
			string o = NGUIText.EncodeColor24(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncodeColor32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 1);
			string o = NGUIText.EncodeColor32(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseSymbol(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool o = NGUIText.ParseSymbol(arg0, ref arg1);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else if (count == 10)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				BetterList<UnityEngine.Color> arg2 = (BetterList<UnityEngine.Color>)ToLua.CheckObject<BetterList<UnityEngine.Color>>(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool arg5 = LuaDLL.luaL_checkboolean(L, 6);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 7);
				bool arg7 = LuaDLL.luaL_checkboolean(L, 8);
				bool arg8 = LuaDLL.luaL_checkboolean(L, 9);
				bool arg9 = LuaDLL.luaL_checkboolean(L, 10);
				bool o = NGUIText.ParseSymbol(arg0, ref arg1, arg2, arg3, ref arg4, ref arg5, ref arg6, ref arg7, ref arg8, ref arg9);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				LuaDLL.lua_pushinteger(L, arg4);
				LuaDLL.lua_pushboolean(L, arg5);
				LuaDLL.lua_pushboolean(L, arg6);
				LuaDLL.lua_pushboolean(L, arg7);
				LuaDLL.lua_pushboolean(L, arg8);
				LuaDLL.lua_pushboolean(L, arg9);
				return 8;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.ParseSymbol");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsHex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 1);
			bool o = NGUIText.IsHex(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StripSymbols(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = NGUIText.StripSymbols(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Align(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				BetterList<UnityEngine.Vector3> arg0 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				NGUIText.Align(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				BetterList<UnityEngine.Vector3> arg0 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				NGUIText.Align(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.Align");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetExactCharacterIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BetterList<UnityEngine.Vector3> arg0 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 1);
			BetterList<int> arg1 = (BetterList<int>)ToLua.CheckObject<BetterList<int>>(L, 2);
			UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
			int o = NGUIText.GetExactCharacterIndex(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetApproximateCharacterIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BetterList<UnityEngine.Vector3> arg0 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 1);
			BetterList<int> arg1 = (BetterList<int>)ToLua.CheckObject<BetterList<int>>(L, 2);
			UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
			int o = NGUIText.GetApproximateCharacterIndex(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Text.StringBuilder arg0 = (System.Text.StringBuilder)ToLua.CheckObject(L, 1, typeof(System.Text.StringBuilder));
			NGUIText.EndLine(ref arg0);
			ToLua.PushSealed(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculatePrintedSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Vector2 o = NGUIText.CalculatePrintedSize(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculatePrintedWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Font arg0 = (UnityEngine.Font)ToLua.CheckObject(L, 1, typeof(UnityEngine.Font));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			float o = NGUIText.CalculatePrintedWidth(arg0, arg1, arg2);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateOffsetToFit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = NGUIText.CalculateOffsetToFit(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEndOfLineThatFits(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = NGUIText.GetEndOfLineThatFits(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WrapText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = null;
				bool o = NGUIText.WrapText(arg0, out arg1);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushstring(L, arg1);
				return 2;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = null;
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool o = NGUIText.WrapText(arg0, out arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushstring(L, arg1);
				return 2;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = null;
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				bool o = NGUIText.WrapText(arg0, out arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushstring(L, arg1);
				return 2;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = null;
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				bool o = NGUIText.WrapText(arg0, out arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushstring(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NGUIText.WrapText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Print(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			BetterList<UnityEngine.Vector3> arg1 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 2);
			BetterList<UnityEngine.Vector2> arg2 = (BetterList<UnityEngine.Vector2>)ToLua.CheckObject<BetterList<UnityEngine.Vector2>>(L, 3);
			BetterList<UnityEngine.Color> arg3 = (BetterList<UnityEngine.Color>)ToLua.CheckObject<BetterList<UnityEngine.Color>>(L, 4);
			NGUIText.Print(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintApproximateCharacterPositions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			BetterList<UnityEngine.Vector3> arg1 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 2);
			BetterList<int> arg2 = (BetterList<int>)ToLua.CheckObject<BetterList<int>>(L, 3);
			NGUIText.PrintApproximateCharacterPositions(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintExactCharacterPositions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			BetterList<UnityEngine.Vector3> arg1 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 2);
			BetterList<int> arg2 = (BetterList<int>)ToLua.CheckObject<BetterList<int>>(L, 3);
			NGUIText.PrintExactCharacterPositions(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintCaretAndSelection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			BetterList<UnityEngine.Vector3> arg3 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 4);
			BetterList<UnityEngine.Vector3> arg4 = (BetterList<UnityEngine.Vector3>)ToLua.CheckObject<BetterList<UnityEngine.Vector3>>(L, 5);
			NGUIText.PrintCaretAndSelection(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceLink(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			bool o = NGUIText.ReplaceLink(ref arg0, ref arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushstring(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertHyperlink(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			string arg3 = ToLua.CheckString(L, 4);
			bool o = NGUIText.InsertHyperlink(ref arg0, ref arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushstring(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReplaceLinks(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NGUIText.ReplaceLinks(ref arg0);
			LuaDLL.lua_pushstring(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bitmapFont(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.bitmapFont);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dynamicFont(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, NGUIText.dynamicFont);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_glyph(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NGUIText.glyph);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fontSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.fontSize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fontScale(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.fontScale);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pixelDensity(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.pixelDensity);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fontStyle(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.fontStyle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alignment(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.alignment);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tint(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.tint);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rectWidth(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.rectWidth);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rectHeight(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.rectHeight);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_regionWidth(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.regionWidth);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_regionHeight(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.regionHeight);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxLines(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.maxLines);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gradient(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NGUIText.gradient);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gradientBottom(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.gradientBottom);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gradientTop(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.gradientTop);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_encoding(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NGUIText.encoding);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spacingX(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.spacingX);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spacingY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.spacingY);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_premultiply(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NGUIText.premultiply);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_symbolStyle(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NGUIText.symbolStyle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_finalSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NGUIText.finalSize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_finalSpacingX(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.finalSpacingX);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_finalLineHeight(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.finalLineHeight);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_baseline(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, NGUIText.baseline);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useSymbols(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NGUIText.useSymbols);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bitmapFont(IntPtr L)
	{
		try
		{
			UIFont arg0 = (UIFont)ToLua.CheckObject<UIFont>(L, 2);
			NGUIText.bitmapFont = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dynamicFont(IntPtr L)
	{
		try
		{
			UnityEngine.Font arg0 = (UnityEngine.Font)ToLua.CheckObject(L, 2, typeof(UnityEngine.Font));
			NGUIText.dynamicFont = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_glyph(IntPtr L)
	{
		try
		{
			NGUIText.GlyphInfo arg0 = (NGUIText.GlyphInfo)ToLua.CheckObject<NGUIText.GlyphInfo>(L, 2);
			NGUIText.glyph = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fontSize(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.fontSize = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fontScale(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.fontScale = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pixelDensity(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.pixelDensity = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fontStyle(IntPtr L)
	{
		try
		{
			UnityEngine.FontStyle arg0 = (UnityEngine.FontStyle)ToLua.CheckObject(L, 2, typeof(UnityEngine.FontStyle));
			NGUIText.fontStyle = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alignment(IntPtr L)
	{
		try
		{
			NGUIText.Alignment arg0 = (NGUIText.Alignment)ToLua.CheckObject(L, 2, typeof(NGUIText.Alignment));
			NGUIText.alignment = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tint(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			NGUIText.tint = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rectWidth(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.rectWidth = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rectHeight(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.rectHeight = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_regionWidth(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.regionWidth = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_regionHeight(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.regionHeight = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxLines(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.maxLines = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gradient(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NGUIText.gradient = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gradientBottom(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			NGUIText.gradientBottom = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gradientTop(IntPtr L)
	{
		try
		{
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			NGUIText.gradientTop = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_encoding(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NGUIText.encoding = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spacingX(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.spacingX = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spacingY(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.spacingY = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_premultiply(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NGUIText.premultiply = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_symbolStyle(IntPtr L)
	{
		try
		{
			NGUIText.SymbolStyle arg0 = (NGUIText.SymbolStyle)ToLua.CheckObject(L, 2, typeof(NGUIText.SymbolStyle));
			NGUIText.symbolStyle = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_finalSize(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.finalSize = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_finalSpacingX(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.finalSpacingX = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_finalLineHeight(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.finalLineHeight = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_baseline(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NGUIText.baseline = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useSymbols(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			NGUIText.useSymbols = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

