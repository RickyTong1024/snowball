//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NavUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NavUtil), typeof(System.Object));
		L.RegFunction("Clear", Clear);
		L.RegFunction("LoadNav", LoadNav);
		L.RegFunction("InitNavTriInfoFromNavMesh", InitNavTriInfoFromNavMesh);
		L.RegFunction("GetPathFromNavMesh", GetPathFromNavMesh);
		L.RegFunction("CrossProduct", CrossProduct);
		L.RegFunction("IsEqualZero", IsEqualZero);
		L.RegFunction("CheckCross", CheckCross);
		L.RegFunction("GetNavTriangleBaseInfo", GetNavTriangleBaseInfo);
		L.RegFunction("GetHashMinValue", GetHashMinValue);
		L.RegFunction("BuildPath", BuildPath);
		L.RegFunction("GetTargetWayPoints", GetTargetWayPoints);
		L.RegFunction("GetFurthestWayPoint", GetFurthestWayPoint);
		L.RegFunction("GetClosestTriangle", GetClosestTriangle);
		L.RegFunction("Sqrt", Sqrt);
		L.RegFunction("WorldToScreenPoint", WorldToScreenPoint);
		L.RegFunction("worldpos_to_nguipos", worldpos_to_nguipos);
		L.RegFunction("worldpos_to_localpos", worldpos_to_localpos);
		L.RegFunction("PlaySound", PlaySound);
		L.RegFunction("AdjustScrollview", AdjustScrollview);
		L.RegFunction("IsScrollviewEnd", IsScrollviewEnd);
		L.RegFunction("New", _CreateNavUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("navList", get_navList, set_navList);
		L.RegVar("meshPolys", get_meshPolys, set_meshPolys);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNavUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NavUtil obj = new NavUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NavUtil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NavUtil.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadNav(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			navMeshInfo arg0 = (navMeshInfo)ToLua.CheckObject<navMeshInfo>(L, 1);
			System.Collections.Generic.List<NavPolygon> o = NavUtil.LoadNav(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitNavTriInfoFromNavMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			navMeshInfo arg0 = (navMeshInfo)ToLua.CheckObject<navMeshInfo>(L, 1);
			NavUtil.InitNavTriInfoFromNavMesh(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPathFromNavMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			System.Collections.Generic.List<int> o = NavUtil.GetPathFromNavMesh(arg0, arg1, arg2, arg3);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossProduct(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Vector2i arg0 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 1);
				Vector2i arg1 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 2);
				long o = NavUtil.CrossProduct(arg0, arg1);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Vector2i arg0 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 1);
				Vector2i arg1 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 2);
				Vector2i arg2 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 3);
				long o = NavUtil.CrossProduct(arg0, arg1, arg2);
				LuaDLL.tolua_pushint64(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NavUtil.CrossProduct");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsEqualZero(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<Vector2i>(L, 1))
			{
				Vector2i arg0 = (Vector2i)ToLua.ToObject(L, 1);
				bool o = NavUtil.IsEqualZero(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				bool o = NavUtil.IsEqualZero(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NavUtil.IsEqualZero");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCross(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Vector2i arg0 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 1);
			Vector2i arg1 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 2);
			Vector2i arg2 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 3);
			Vector2i arg3 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 4);
			bool o = NavUtil.CheckCross(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNavTriangleBaseInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.List<NavPolygon> arg0 = (System.Collections.Generic.List<NavPolygon>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<NavPolygon>));
			navMeshInfo arg1 = (navMeshInfo)ToLua.CheckObject<navMeshInfo>(L, 2);
			System.Collections.Generic.List<NavTriangle> o = NavUtil.GetNavTriangleBaseInfo(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashMinValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Collections.Generic.Dictionary<int,NavTriangle> arg0 = (System.Collections.Generic.Dictionary<int,NavTriangle>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.Dictionary<int,NavTriangle>));
			NavTriangle o = NavUtil.GetHashMinValue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuildPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NavTriangle arg0 = (NavTriangle)ToLua.CheckObject<NavTriangle>(L, 1);
			NavTriangle arg1 = (NavTriangle)ToLua.CheckObject<NavTriangle>(L, 2);
			System.Collections.Generic.List<NavTriangle> o = NavUtil.BuildPath(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTargetWayPoints(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Collections.Generic.List<NavTriangle> arg0 = (System.Collections.Generic.List<NavTriangle>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<NavTriangle>));
			Vector2i arg1 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 2);
			Vector2i arg2 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 3);
			System.Collections.Generic.List<Vector2i> o = NavUtil.GetTargetWayPoints(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFurthestWayPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			WayPoint arg0 = (WayPoint)ToLua.CheckObject<WayPoint>(L, 1);
			System.Collections.Generic.List<NavTriangle> arg1 = (System.Collections.Generic.List<NavTriangle>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<NavTriangle>));
			Vector2i arg2 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 3);
			WayPoint o = NavUtil.GetFurthestWayPoint(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClosestTriangle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Collections.Generic.List<NavTriangle> arg0 = (System.Collections.Generic.List<NavTriangle>)ToLua.CheckObject(L, 1, typeof(System.Collections.Generic.List<NavTriangle>));
			Vector2i arg1 = (Vector2i)ToLua.CheckObject<Vector2i>(L, 2);
			NavTriangle o = NavUtil.GetClosestTriangle(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sqrt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 1);
			long o = NavUtil.Sqrt(arg0);
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldToScreenPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 o = NavUtil.WorldToScreenPoint(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int worldpos_to_nguipos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.Vector3 o = NavUtil.worldpos_to_nguipos(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int worldpos_to_localpos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.Vector3 o = NavUtil.worldpos_to_localpos(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AudioSource arg0 = (UnityEngine.AudioSource)ToLua.CheckObject(L, 1, typeof(UnityEngine.AudioSource));
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.AudioSource o = NavUtil.PlaySound(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdjustScrollview(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			NavUtil.AdjustScrollview(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsScrollviewEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			bool o = NavUtil.IsScrollviewEnd(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_navList(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, NavUtil.navList);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_meshPolys(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, NavUtil.meshPolys);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_navList(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<NavTriangle> arg0 = (System.Collections.Generic.List<NavTriangle>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<NavTriangle>));
			NavUtil.navList = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_meshPolys(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<System.Collections.Generic.List<NavPolygon>> arg0 = (System.Collections.Generic.List<System.Collections.Generic.List<NavPolygon>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<System.Collections.Generic.List<NavPolygon>>));
			NavUtil.meshPolys = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

