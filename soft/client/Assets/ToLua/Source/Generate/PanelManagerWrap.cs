//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PanelManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PanelManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("CreateGUI", CreateGUI);
		L.RegFunction("CloseGUI", CloseGUI);
		L.RegFunction("RemoveAllChild", RemoveAllChild);
		L.RegFunction("get_wh", get_wh);
		L.RegFunction("get_w", get_w);
		L.RegFunction("get_h", get_h);
		L.RegFunction("get_whscale", get_whscale);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGUI(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = obj.CreateGUI(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				UnityEngine.GameObject o = obj.CreateGUI(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PanelManager.CreateGUI");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseGUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.CloseGUI(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllChild(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.RemoveAllChild(arg0);
				return 0;
			}
			else if (count == 3)
			{
				PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				string arg1 = ToLua.CheckString(L, 3);
				obj.RemoveAllChild(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PanelManager.RemoveAllChild");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_wh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
			float o = obj.get_wh();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_w(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
			float o = obj.get_w();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_h(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
			float o = obj.get_h();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_whscale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PanelManager obj = (PanelManager)ToLua.CheckObject<PanelManager>(L, 1);
			float o = obj.get_whscale();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

