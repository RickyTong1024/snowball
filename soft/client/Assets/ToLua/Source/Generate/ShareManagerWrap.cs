//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShareManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ShareManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Share", Share);
		L.RegFunction("ShareByCapture", ShareByCapture);
		L.RegFunction("ShareZcode", ShareZcode);
		L.RegFunction("fini", fini);
		L.RegFunction("GetShareID", GetShareID);
		L.RegFunction("GetPackName", GetPackName);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ShareFunc", get_ShareFunc, set_ShareFunc);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Share(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			ShareManager obj = (ShareManager)ToLua.CheckObject<ShareManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			string arg3 = ToLua.CheckString(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			obj.Share(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShareByCapture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			ShareManager obj = (ShareManager)ToLua.CheckObject<ShareManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.ShareByCapture(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShareZcode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			ShareManager obj = (ShareManager)ToLua.CheckObject<ShareManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Texture2D o = obj.ShareZcode(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int fini(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ShareManager obj = (ShareManager)ToLua.CheckObject<ShareManager>(L, 1);
			obj.fini();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetShareID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ShareManager obj = (ShareManager)ToLua.CheckObject<ShareManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetShareID(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPackName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ShareManager obj = (ShareManager)ToLua.CheckObject<ShareManager>(L, 1);
			string o = obj.GetPackName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShareFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShareManager obj = (ShareManager)o;
			LuaInterface.LuaFunction ret = obj.ShareFunc;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShareFunc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShareFunc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShareManager obj = (ShareManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.ShareFunc = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShareFunc on a nil value");
		}
	}
}

