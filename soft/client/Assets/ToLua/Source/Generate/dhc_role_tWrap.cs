//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class dhc_role_tWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(dhc.role_t), typeof(System.Object));
		L.RegFunction("New", _Createdhc_role_t);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("guid", get_guid, set_guid);
		L.RegVar("player_guid", get_player_guid, set_player_guid);
		L.RegVar("template_id", get_template_id, set_template_id);
		L.RegVar("level", get_level, set_level);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createdhc_role_t(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				dhc.role_t obj = new dhc.role_t();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: dhc.role_t.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			ulong ret = obj.guid;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_player_guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			ulong ret = obj.player_guid;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index player_guid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_template_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			int ret = obj.template_id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index template_id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			int ret = obj.level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index level on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.guid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index guid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_player_guid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.player_guid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index player_guid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_template_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.template_id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index template_id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			dhc.role_t obj = (dhc.role_t)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.level = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index level on a nil value");
		}
	}
}

