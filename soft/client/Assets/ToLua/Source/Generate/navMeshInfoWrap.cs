//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class navMeshInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(navMeshInfo), typeof(System.Object));
		L.RegFunction("load_nav", load_nav);
		L.RegFunction("clear", clear);
		L.RegFunction("can_move", can_move);
		L.RegFunction("New", _CreatenavMeshInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BLOCK_SIZE", get_BLOCK_SIZE, set_BLOCK_SIZE);
		L.RegVar("BLOCK_NUM", get_BLOCK_NUM, set_BLOCK_NUM);
		L.RegVar("BLOCK_NUM2", get_BLOCK_NUM2, set_BLOCK_NUM2);
		L.RegVar("vecs", get_vecs, set_vecs);
		L.RegVar("nodes", get_nodes, set_nodes);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatenavMeshInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				navMeshInfo obj = new navMeshInfo();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: navMeshInfo.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int load_nav(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			navMeshInfo obj = (navMeshInfo)ToLua.CheckObject<navMeshInfo>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.load_nav(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			navMeshInfo obj = (navMeshInfo)ToLua.CheckObject<navMeshInfo>(L, 1);
			obj.clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int can_move(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			navMeshInfo obj = (navMeshInfo)ToLua.CheckObject<navMeshInfo>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.can_move(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BLOCK_SIZE(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			long ret = obj.BLOCK_SIZE;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BLOCK_SIZE on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BLOCK_NUM(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			int ret = obj.BLOCK_NUM;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BLOCK_NUM on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BLOCK_NUM2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			int ret = obj.BLOCK_NUM2;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BLOCK_NUM2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vecs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			System.Collections.Generic.List<navVec2> ret = obj.vecs;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vecs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			System.Collections.Generic.List<navNode> ret = obj.nodes;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BLOCK_SIZE(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.BLOCK_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BLOCK_SIZE on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BLOCK_NUM(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BLOCK_NUM = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BLOCK_NUM on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BLOCK_NUM2(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BLOCK_NUM2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BLOCK_NUM2 on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vecs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			System.Collections.Generic.List<navVec2> arg0 = (System.Collections.Generic.List<navVec2>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<navVec2>));
			obj.vecs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vecs on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			navMeshInfo obj = (navMeshInfo)o;
			System.Collections.Generic.List<navNode> arg0 = (System.Collections.Generic.List<navNode>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<navNode>));
			obj.nodes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodes on a nil value");
		}
	}
}

