//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class unitWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(unit), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("get_accept_pos", get_accept_pos);
		L.RegFunction("set_init", set_init);
		L.RegFunction("get_round", get_round);
		L.RegFunction("is_vis", is_vis);
		L.RegFunction("CheckScreenVis", CheckScreenVis);
		L.RegFunction("load_xml", load_xml);
		L.RegFunction("set_main", set_main);
		L.RegFunction("set_alpha", set_alpha);
		L.RegFunction("white", white);
		L.RegFunction("get_bone", get_bone);
		L.RegFunction("change_static_part", change_static_part);
		L.RegFunction("change_skin_part", change_skin_part);
		L.RegFunction("change_part", change_part);
		L.RegFunction("create_effect", create_effect);
		L.RegFunction("play_sound", play_sound);
		L.RegFunction("play_monster_sound", play_monster_sound);
		L.RegFunction("has_atcion", has_atcion);
		L.RegFunction("pause_action", pause_action);
		L.RegFunction("continue_action", continue_action);
		L.RegFunction("action", action);
		L.RegFunction("action1", action1);
		L.RegFunction("Attach", Attach);
		L.RegFunction("Attach1", Attach1);
		L.RegFunction("can_tiox", can_tiox);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_accept_pos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			UnityEngine.Vector3 o = obj.get_accept_pos();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.set_init(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_round(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			int o = obj.get_round();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int is_vis(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			bool o = obj.is_vis();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckScreenVis(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			bool o = obj.CheckScreenVis();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int load_xml(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			obj.load_xml();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_main(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.set_main(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.set_alpha(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int white(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			obj.white();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Transform o = obj.get_bone(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int change_static_part(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.change_static_part(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int change_skin_part(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.change_skin_part(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int change_part(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.change_part(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int create_effect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.create_effect(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int play_sound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.play_sound(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int play_monster_sound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.play_monster_sound(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int has_atcion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.has_atcion(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pause_action(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			obj.pause_action();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int continue_action(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			obj.continue_action();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int action(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float o = obj.action(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float o = obj.action(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float o = obj.action(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: unit.action");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int action1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float o = obj.action1(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float o = obj.action1(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: unit.action1");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Attach(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				UnityEngine.GameObject o = obj.Attach(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 5)
			{
				unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Nullable<float> arg3 = ToLua.CheckNullable<float>(L, 5);
				UnityEngine.GameObject o = obj.Attach(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: unit.Attach");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Attach1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.GameObject o = obj.Attach1(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int can_tiox(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			unit obj = (unit)ToLua.CheckObject<unit>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.can_tiox(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

