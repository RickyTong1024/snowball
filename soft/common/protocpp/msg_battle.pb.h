// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_battle.proto

#ifndef PROTOBUF_INCLUDED_msg_5fbattle_2eproto
#define PROTOBUF_INCLUDED_msg_5fbattle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "battle_his.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle_2eproto 

namespace protobuf_msg_5fbattle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_5fbattle_2eproto
namespace protocol {
namespace game {
class cmsg_offline_battle;
class cmsg_offline_battleDefaultTypeInternal;
extern cmsg_offline_battleDefaultTypeInternal _cmsg_offline_battle_default_instance_;
class cmsg_offline_battle_end;
class cmsg_offline_battle_endDefaultTypeInternal;
extern cmsg_offline_battle_endDefaultTypeInternal _cmsg_offline_battle_end_default_instance_;
class msg_battle_player_info;
class msg_battle_player_infoDefaultTypeInternal;
extern msg_battle_player_infoDefaultTypeInternal _msg_battle_player_info_default_instance_;
class push_r_rm_created;
class push_r_rm_createdDefaultTypeInternal;
extern push_r_rm_createdDefaultTypeInternal _push_r_rm_created_default_instance_;
class push_rc_hall_battle_end;
class push_rc_hall_battle_endDefaultTypeInternal;
extern push_rc_hall_battle_endDefaultTypeInternal _push_rc_hall_battle_end_default_instance_;
class push_rc_rm_set_player_room;
class push_rc_rm_set_player_roomDefaultTypeInternal;
extern push_rc_rm_set_player_roomDefaultTypeInternal _push_rc_rm_set_player_room_default_instance_;
class push_rm_rc_battle_end;
class push_rm_rc_battle_endDefaultTypeInternal;
extern push_rm_rc_battle_endDefaultTypeInternal _push_rm_rc_battle_end_default_instance_;
class rep_rc_rm_create_room;
class rep_rc_rm_create_roomDefaultTypeInternal;
extern rep_rc_rm_create_roomDefaultTypeInternal _rep_rc_rm_create_room_default_instance_;
class req_rc_rm_create_room;
class req_rc_rm_create_roomDefaultTypeInternal;
extern req_rc_rm_create_roomDefaultTypeInternal _req_rc_rm_create_room_default_instance_;
class smsg_battle_end;
class smsg_battle_endDefaultTypeInternal;
extern smsg_battle_endDefaultTypeInternal _smsg_battle_end_default_instance_;
class smsg_offline_battle_end;
class smsg_offline_battle_endDefaultTypeInternal;
extern smsg_offline_battle_endDefaultTypeInternal _smsg_offline_battle_end_default_instance_;
}  // namespace game
}  // namespace protocol
namespace google {
namespace protobuf {
template<> ::protocol::game::cmsg_offline_battle* Arena::CreateMaybeMessage<::protocol::game::cmsg_offline_battle>(Arena*);
template<> ::protocol::game::cmsg_offline_battle_end* Arena::CreateMaybeMessage<::protocol::game::cmsg_offline_battle_end>(Arena*);
template<> ::protocol::game::msg_battle_player_info* Arena::CreateMaybeMessage<::protocol::game::msg_battle_player_info>(Arena*);
template<> ::protocol::game::push_r_rm_created* Arena::CreateMaybeMessage<::protocol::game::push_r_rm_created>(Arena*);
template<> ::protocol::game::push_rc_hall_battle_end* Arena::CreateMaybeMessage<::protocol::game::push_rc_hall_battle_end>(Arena*);
template<> ::protocol::game::push_rc_rm_set_player_room* Arena::CreateMaybeMessage<::protocol::game::push_rc_rm_set_player_room>(Arena*);
template<> ::protocol::game::push_rm_rc_battle_end* Arena::CreateMaybeMessage<::protocol::game::push_rm_rc_battle_end>(Arena*);
template<> ::protocol::game::rep_rc_rm_create_room* Arena::CreateMaybeMessage<::protocol::game::rep_rc_rm_create_room>(Arena*);
template<> ::protocol::game::req_rc_rm_create_room* Arena::CreateMaybeMessage<::protocol::game::req_rc_rm_create_room>(Arena*);
template<> ::protocol::game::smsg_battle_end* Arena::CreateMaybeMessage<::protocol::game::smsg_battle_end>(Arena*);
template<> ::protocol::game::smsg_offline_battle_end* Arena::CreateMaybeMessage<::protocol::game::smsg_offline_battle_end>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protocol {
namespace game {

// ===================================================================

class msg_battle_player_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.msg_battle_player_info) */ {
 public:
  msg_battle_player_info();
  virtual ~msg_battle_player_info();

  msg_battle_player_info(const msg_battle_player_info& from);

  inline msg_battle_player_info& operator=(const msg_battle_player_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_battle_player_info(msg_battle_player_info&& from) noexcept
    : msg_battle_player_info() {
    *this = ::std::move(from);
  }

  inline msg_battle_player_info& operator=(msg_battle_player_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_battle_player_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_battle_player_info* internal_default_instance() {
    return reinterpret_cast<const msg_battle_player_info*>(
               &_msg_battle_player_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(msg_battle_player_info* other);
  friend void swap(msg_battle_player_info& a, msg_battle_player_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_battle_player_info* New() const final {
    return CreateMaybeMessage<msg_battle_player_info>(NULL);
  }

  msg_battle_player_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_battle_player_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_battle_player_info& from);
  void MergeFrom(const msg_battle_player_info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_battle_player_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fashion = 9;
  int fashion_size() const;
  void clear_fashion();
  static const int kFashionFieldNumber = 9;
  ::google::protobuf::int32 fashion(int index) const;
  void set_fashion(int index, ::google::protobuf::int32 value);
  void add_fashion(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fashion() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fashion();

  // repeated int32 attr_type = 14;
  int attr_type_size() const;
  void clear_attr_type();
  static const int kAttrTypeFieldNumber = 14;
  ::google::protobuf::int32 attr_type(int index) const;
  void set_attr_type(int index, ::google::protobuf::int32 value);
  void add_attr_type(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attr_type() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attr_type();

  // repeated int32 attr_param1 = 15;
  int attr_param1_size() const;
  void clear_attr_param1();
  static const int kAttrParam1FieldNumber = 15;
  ::google::protobuf::int32 attr_param1(int index) const;
  void set_attr_param1(int index, ::google::protobuf::int32 value);
  void add_attr_param1(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attr_param1() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attr_param1();

  // repeated int32 attr_param2 = 16;
  int attr_param2_size() const;
  void clear_attr_param2();
  static const int kAttrParam2FieldNumber = 16;
  ::google::protobuf::int32 attr_param2(int index) const;
  void set_attr_param2(int index, ::google::protobuf::int32 value);
  void add_attr_param2(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attr_param2() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attr_param2();

  // repeated int32 attr_param3 = 17;
  int attr_param3_size() const;
  void clear_attr_param3();
  static const int kAttrParam3FieldNumber = 17;
  ::google::protobuf::int32 attr_param3(int index) const;
  void set_attr_param3(int index, ::google::protobuf::int32 value);
  void add_attr_param3(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attr_param3() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attr_param3();

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // required int32 role_id = 3;
  bool has_role_id() const;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  ::google::protobuf::int32 role_id() const;
  void set_role_id(::google::protobuf::int32 value);

  // required int32 role_level = 4;
  bool has_role_level() const;
  void clear_role_level();
  static const int kRoleLevelFieldNumber = 4;
  ::google::protobuf::int32 role_level() const;
  void set_role_level(::google::protobuf::int32 value);

  // required int32 sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // required int32 avatar = 6;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  ::google::protobuf::int32 avatar() const;
  void set_avatar(::google::protobuf::int32 value);

  // required int32 toukuang = 8;
  bool has_toukuang() const;
  void clear_toukuang();
  static const int kToukuangFieldNumber = 8;
  ::google::protobuf::int32 toukuang() const;
  void set_toukuang(::google::protobuf::int32 value);

  // required int32 region_id = 10;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 10;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // required int32 cup = 11;
  bool has_cup() const;
  void clear_cup();
  static const int kCupFieldNumber = 11;
  ::google::protobuf::int32 cup() const;
  void set_cup(::google::protobuf::int32 value);

  // optional int32 camp = 18;
  bool has_camp() const;
  void clear_camp();
  static const int kCampFieldNumber = 18;
  ::google::protobuf::int32 camp() const;
  void set_camp(::google::protobuf::int32 value);

  // required int32 name_color = 19;
  bool has_name_color() const;
  void clear_name_color();
  static const int kNameColorFieldNumber = 19;
  ::google::protobuf::int32 name_color() const;
  void set_name_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.msg_battle_player_info)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_name();
  void clear_has_name();
  void set_has_role_id();
  void clear_has_role_id();
  void set_has_role_level();
  void clear_has_role_level();
  void set_has_sex();
  void clear_has_sex();
  void set_has_avatar();
  void clear_has_avatar();
  void set_has_toukuang();
  void clear_has_toukuang();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_cup();
  void clear_has_cup();
  void set_has_camp();
  void clear_has_camp();
  void set_has_name_color();
  void clear_has_name_color();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fashion_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attr_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attr_param1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attr_param2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attr_param3_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 avatar_;
  ::google::protobuf::int32 toukuang_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 cup_;
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 name_color_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_rc_rm_create_room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.req_rc_rm_create_room) */ {
 public:
  req_rc_rm_create_room();
  virtual ~req_rc_rm_create_room();

  req_rc_rm_create_room(const req_rc_rm_create_room& from);

  inline req_rc_rm_create_room& operator=(const req_rc_rm_create_room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_rc_rm_create_room(req_rc_rm_create_room&& from) noexcept
    : req_rc_rm_create_room() {
    *this = ::std::move(from);
  }

  inline req_rc_rm_create_room& operator=(req_rc_rm_create_room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const req_rc_rm_create_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req_rc_rm_create_room* internal_default_instance() {
    return reinterpret_cast<const req_rc_rm_create_room*>(
               &_req_rc_rm_create_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(req_rc_rm_create_room* other);
  friend void swap(req_rc_rm_create_room& a, req_rc_rm_create_room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_rc_rm_create_room* New() const final {
    return CreateMaybeMessage<req_rc_rm_create_room>(NULL);
  }

  req_rc_rm_create_room* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<req_rc_rm_create_room>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const req_rc_rm_create_room& from);
  void MergeFrom(const req_rc_rm_create_room& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(req_rc_rm_create_room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 battle_guid = 1;
  bool has_battle_guid() const;
  void clear_battle_guid();
  static const int kBattleGuidFieldNumber = 1;
  ::google::protobuf::uint64 battle_guid() const;
  void set_battle_guid(::google::protobuf::uint64 value);

  // required int32 battle_type = 2;
  bool has_battle_type() const;
  void clear_battle_type();
  static const int kBattleTypeFieldNumber = 2;
  ::google::protobuf::int32 battle_type() const;
  void set_battle_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.req_rc_rm_create_room)
 private:
  void set_has_battle_guid();
  void clear_has_battle_guid();
  void set_has_battle_type();
  void clear_has_battle_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 battle_guid_;
  ::google::protobuf::int32 battle_type_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rep_rc_rm_create_room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.rep_rc_rm_create_room) */ {
 public:
  rep_rc_rm_create_room();
  virtual ~rep_rc_rm_create_room();

  rep_rc_rm_create_room(const rep_rc_rm_create_room& from);

  inline rep_rc_rm_create_room& operator=(const rep_rc_rm_create_room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rep_rc_rm_create_room(rep_rc_rm_create_room&& from) noexcept
    : rep_rc_rm_create_room() {
    *this = ::std::move(from);
  }

  inline rep_rc_rm_create_room& operator=(rep_rc_rm_create_room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rep_rc_rm_create_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rep_rc_rm_create_room* internal_default_instance() {
    return reinterpret_cast<const rep_rc_rm_create_room*>(
               &_rep_rc_rm_create_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(rep_rc_rm_create_room* other);
  friend void swap(rep_rc_rm_create_room& a, rep_rc_rm_create_room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rep_rc_rm_create_room* New() const final {
    return CreateMaybeMessage<rep_rc_rm_create_room>(NULL);
  }

  rep_rc_rm_create_room* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rep_rc_rm_create_room>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rep_rc_rm_create_room& from);
  void MergeFrom(const rep_rc_rm_create_room& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rep_rc_rm_create_room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string udp_ip = 1;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 1;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 3;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 3;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required int32 udp_port = 2;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 4;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 4;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.rep_rc_rm_create_room)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_rc_rm_set_player_room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_rc_rm_set_player_room) */ {
 public:
  push_rc_rm_set_player_room();
  virtual ~push_rc_rm_set_player_room();

  push_rc_rm_set_player_room(const push_rc_rm_set_player_room& from);

  inline push_rc_rm_set_player_room& operator=(const push_rc_rm_set_player_room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_rc_rm_set_player_room(push_rc_rm_set_player_room&& from) noexcept
    : push_rc_rm_set_player_room() {
    *this = ::std::move(from);
  }

  inline push_rc_rm_set_player_room& operator=(push_rc_rm_set_player_room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_rc_rm_set_player_room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_rc_rm_set_player_room* internal_default_instance() {
    return reinterpret_cast<const push_rc_rm_set_player_room*>(
               &_push_rc_rm_set_player_room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(push_rc_rm_set_player_room* other);
  friend void swap(push_rc_rm_set_player_room& a, push_rc_rm_set_player_room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_rc_rm_set_player_room* New() const final {
    return CreateMaybeMessage<push_rc_rm_set_player_room>(NULL);
  }

  push_rc_rm_set_player_room* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_rc_rm_set_player_room>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_rc_rm_set_player_room& from);
  void MergeFrom(const push_rc_rm_set_player_room& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_rc_rm_set_player_room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required .protocol.game.msg_battle_player_info player = 4;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 4;
  private:
  const ::protocol::game::msg_battle_player_info& _internal_player() const;
  public:
  const ::protocol::game::msg_battle_player_info& player() const;
  ::protocol::game::msg_battle_player_info* release_player();
  ::protocol::game::msg_battle_player_info* mutable_player();
  void set_allocated_player(::protocol::game::msg_battle_player_info* player);

  // required uint64 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // required uint64 battle_guid = 2;
  bool has_battle_guid() const;
  void clear_battle_guid();
  static const int kBattleGuidFieldNumber = 2;
  ::google::protobuf::uint64 battle_guid() const;
  void set_battle_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_rc_rm_set_player_room)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_battle_guid();
  void clear_has_battle_guid();
  void set_has_code();
  void clear_has_code();
  void set_has_player();
  void clear_has_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::protocol::game::msg_battle_player_info* player_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 battle_guid_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_rm_rc_battle_end : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_rm_rc_battle_end) */ {
 public:
  push_rm_rc_battle_end();
  virtual ~push_rm_rc_battle_end();

  push_rm_rc_battle_end(const push_rm_rc_battle_end& from);

  inline push_rm_rc_battle_end& operator=(const push_rm_rc_battle_end& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_rm_rc_battle_end(push_rm_rc_battle_end&& from) noexcept
    : push_rm_rc_battle_end() {
    *this = ::std::move(from);
  }

  inline push_rm_rc_battle_end& operator=(push_rm_rc_battle_end&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_rm_rc_battle_end& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_rm_rc_battle_end* internal_default_instance() {
    return reinterpret_cast<const push_rm_rc_battle_end*>(
               &_push_rm_rc_battle_end_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(push_rm_rc_battle_end* other);
  friend void swap(push_rm_rc_battle_end& a, push_rm_rc_battle_end& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_rm_rc_battle_end* New() const final {
    return CreateMaybeMessage<push_rm_rc_battle_end>(NULL);
  }

  push_rm_rc_battle_end* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_rm_rc_battle_end>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_rm_rc_battle_end& from);
  void MergeFrom(const push_rm_rc_battle_end& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_rm_rc_battle_end* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // required uint64 battle_guid = 1;
  bool has_battle_guid() const;
  void clear_battle_guid();
  static const int kBattleGuidFieldNumber = 1;
  ::google::protobuf::uint64 battle_guid() const;
  void set_battle_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_rm_rc_battle_end)
 private:
  void set_has_battle_guid();
  void clear_has_battle_guid();
  void set_has_result();
  void clear_has_result();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::uint64 battle_guid_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_r_rm_created : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_r_rm_created) */ {
 public:
  push_r_rm_created();
  virtual ~push_r_rm_created();

  push_r_rm_created(const push_r_rm_created& from);

  inline push_r_rm_created& operator=(const push_r_rm_created& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_r_rm_created(push_r_rm_created&& from) noexcept
    : push_r_rm_created() {
    *this = ::std::move(from);
  }

  inline push_r_rm_created& operator=(push_r_rm_created&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_r_rm_created& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_r_rm_created* internal_default_instance() {
    return reinterpret_cast<const push_r_rm_created*>(
               &_push_r_rm_created_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(push_r_rm_created* other);
  friend void swap(push_r_rm_created& a, push_r_rm_created& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_r_rm_created* New() const final {
    return CreateMaybeMessage<push_r_rm_created>(NULL);
  }

  push_r_rm_created* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_r_rm_created>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_r_rm_created& from);
  void MergeFrom(const push_r_rm_created& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_r_rm_created* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 battle_guid = 1;
  bool has_battle_guid() const;
  void clear_battle_guid();
  static const int kBattleGuidFieldNumber = 1;
  ::google::protobuf::uint64 battle_guid() const;
  void set_battle_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_r_rm_created)
 private:
  void set_has_battle_guid();
  void clear_has_battle_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 battle_guid_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_rc_hall_battle_end : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_rc_hall_battle_end) */ {
 public:
  push_rc_hall_battle_end();
  virtual ~push_rc_hall_battle_end();

  push_rc_hall_battle_end(const push_rc_hall_battle_end& from);

  inline push_rc_hall_battle_end& operator=(const push_rc_hall_battle_end& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_rc_hall_battle_end(push_rc_hall_battle_end&& from) noexcept
    : push_rc_hall_battle_end() {
    *this = ::std::move(from);
  }

  inline push_rc_hall_battle_end& operator=(push_rc_hall_battle_end&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_rc_hall_battle_end& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_rc_hall_battle_end* internal_default_instance() {
    return reinterpret_cast<const push_rc_hall_battle_end*>(
               &_push_rc_hall_battle_end_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(push_rc_hall_battle_end* other);
  friend void swap(push_rc_hall_battle_end& a, push_rc_hall_battle_end& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_rc_hall_battle_end* New() const final {
    return CreateMaybeMessage<push_rc_hall_battle_end>(NULL);
  }

  push_rc_hall_battle_end* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_rc_hall_battle_end>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_rc_hall_battle_end& from);
  void MergeFrom(const push_rc_hall_battle_end& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_rc_hall_battle_end* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guids = 2;
  int guids_size() const;
  void clear_guids();
  static const int kGuidsFieldNumber = 2;
  ::google::protobuf::uint64 guids(int index) const;
  void set_guids(int index, ::google::protobuf::uint64 value);
  void add_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // required bytes result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_rc_hall_battle_end)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_result();
  void clear_has_result();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_battle_end : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_battle_end) */ {
 public:
  smsg_battle_end();
  virtual ~smsg_battle_end();

  smsg_battle_end(const smsg_battle_end& from);

  inline smsg_battle_end& operator=(const smsg_battle_end& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_battle_end(smsg_battle_end&& from) noexcept
    : smsg_battle_end() {
    *this = ::std::move(from);
  }

  inline smsg_battle_end& operator=(smsg_battle_end&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_battle_end& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_battle_end* internal_default_instance() {
    return reinterpret_cast<const smsg_battle_end*>(
               &_smsg_battle_end_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(smsg_battle_end* other);
  friend void swap(smsg_battle_end& a, smsg_battle_end& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_battle_end* New() const final {
    return CreateMaybeMessage<smsg_battle_end>(NULL);
  }

  smsg_battle_end* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_battle_end>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_battle_end& from);
  void MergeFrom(const smsg_battle_end& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_battle_end* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dhc.battle_his_t battle_his = 2;
  bool has_battle_his() const;
  void clear_battle_his();
  static const int kBattleHisFieldNumber = 2;
  private:
  const ::dhc::battle_his_t& _internal_battle_his() const;
  public:
  const ::dhc::battle_his_t& battle_his() const;
  ::dhc::battle_his_t* release_battle_his();
  ::dhc::battle_his_t* mutable_battle_his();
  void set_allocated_battle_his(::dhc::battle_his_t* battle_his);

  // required int32 box_id = 1;
  bool has_box_id() const;
  void clear_box_id();
  static const int kBoxIdFieldNumber = 1;
  ::google::protobuf::int32 box_id() const;
  void set_box_id(::google::protobuf::int32 value);

  // required int32 gold = 3;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 3;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // required int32 exp = 4;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 4;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required int32 cup = 5;
  bool has_cup() const;
  void clear_cup();
  static const int kCupFieldNumber = 5;
  ::google::protobuf::int32 cup() const;
  void set_cup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_battle_end)
 private:
  void set_has_box_id();
  void clear_has_box_id();
  void set_has_battle_his();
  void clear_has_battle_his();
  void set_has_gold();
  void clear_has_gold();
  void set_has_exp();
  void clear_has_exp();
  void set_has_cup();
  void clear_has_cup();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::dhc::battle_his_t* battle_his_;
  ::google::protobuf::int32 box_id_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 cup_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cmsg_offline_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.cmsg_offline_battle) */ {
 public:
  cmsg_offline_battle();
  virtual ~cmsg_offline_battle();

  cmsg_offline_battle(const cmsg_offline_battle& from);

  inline cmsg_offline_battle& operator=(const cmsg_offline_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmsg_offline_battle(cmsg_offline_battle&& from) noexcept
    : cmsg_offline_battle() {
    *this = ::std::move(from);
  }

  inline cmsg_offline_battle& operator=(cmsg_offline_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_offline_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmsg_offline_battle* internal_default_instance() {
    return reinterpret_cast<const cmsg_offline_battle*>(
               &_cmsg_offline_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(cmsg_offline_battle* other);
  friend void swap(cmsg_offline_battle& a, cmsg_offline_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmsg_offline_battle* New() const final {
    return CreateMaybeMessage<cmsg_offline_battle>(NULL);
  }

  cmsg_offline_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cmsg_offline_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cmsg_offline_battle& from);
  void MergeFrom(const cmsg_offline_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmsg_offline_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fight = 1;
  bool has_fight() const;
  void clear_fight();
  static const int kFightFieldNumber = 1;
  ::google::protobuf::int32 fight() const;
  void set_fight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.cmsg_offline_battle)
 private:
  void set_has_fight();
  void clear_has_fight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 fight_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cmsg_offline_battle_end : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.cmsg_offline_battle_end) */ {
 public:
  cmsg_offline_battle_end();
  virtual ~cmsg_offline_battle_end();

  cmsg_offline_battle_end(const cmsg_offline_battle_end& from);

  inline cmsg_offline_battle_end& operator=(const cmsg_offline_battle_end& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmsg_offline_battle_end(cmsg_offline_battle_end&& from) noexcept
    : cmsg_offline_battle_end() {
    *this = ::std::move(from);
  }

  inline cmsg_offline_battle_end& operator=(cmsg_offline_battle_end&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_offline_battle_end& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmsg_offline_battle_end* internal_default_instance() {
    return reinterpret_cast<const cmsg_offline_battle_end*>(
               &_cmsg_offline_battle_end_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(cmsg_offline_battle_end* other);
  friend void swap(cmsg_offline_battle_end& a, cmsg_offline_battle_end& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmsg_offline_battle_end* New() const final {
    return CreateMaybeMessage<cmsg_offline_battle_end>(NULL);
  }

  cmsg_offline_battle_end* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cmsg_offline_battle_end>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cmsg_offline_battle_end& from);
  void MergeFrom(const cmsg_offline_battle_end& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmsg_offline_battle_end* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rank = 1;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.cmsg_offline_battle_end)
 private:
  void set_has_rank();
  void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 rank_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_offline_battle_end : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_offline_battle_end) */ {
 public:
  smsg_offline_battle_end();
  virtual ~smsg_offline_battle_end();

  smsg_offline_battle_end(const smsg_offline_battle_end& from);

  inline smsg_offline_battle_end& operator=(const smsg_offline_battle_end& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_offline_battle_end(smsg_offline_battle_end&& from) noexcept
    : smsg_offline_battle_end() {
    *this = ::std::move(from);
  }

  inline smsg_offline_battle_end& operator=(smsg_offline_battle_end&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_offline_battle_end& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_offline_battle_end* internal_default_instance() {
    return reinterpret_cast<const smsg_offline_battle_end*>(
               &_smsg_offline_battle_end_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(smsg_offline_battle_end* other);
  friend void swap(smsg_offline_battle_end& a, smsg_offline_battle_end& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_offline_battle_end* New() const final {
    return CreateMaybeMessage<smsg_offline_battle_end>(NULL);
  }

  smsg_offline_battle_end* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_offline_battle_end>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_offline_battle_end& from);
  void MergeFrom(const smsg_offline_battle_end& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_offline_battle_end* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 box_id = 1;
  bool has_box_id() const;
  void clear_box_id();
  static const int kBoxIdFieldNumber = 1;
  ::google::protobuf::int32 box_id() const;
  void set_box_id(::google::protobuf::int32 value);

  // required int32 gold = 2;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 2;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // required int32 exp = 3;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 3;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required int32 cup = 4;
  bool has_cup() const;
  void clear_cup();
  static const int kCupFieldNumber = 4;
  ::google::protobuf::int32 cup() const;
  void set_cup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_offline_battle_end)
 private:
  void set_has_box_id();
  void clear_has_box_id();
  void set_has_gold();
  void clear_has_gold();
  void set_has_exp();
  void clear_has_exp();
  void set_has_cup();
  void clear_has_cup();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 box_id_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 cup_;
  friend struct ::protobuf_msg_5fbattle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// msg_battle_player_info

// required uint64 guid = 1;
inline bool msg_battle_player_info::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_battle_player_info::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_battle_player_info::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_battle_player_info::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 msg_battle_player_info::guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.guid)
  return guid_;
}
inline void msg_battle_player_info::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.guid)
}

// required string name = 2;
inline bool msg_battle_player_info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_battle_player_info::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_battle_player_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_battle_player_info::clear_name() {
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& msg_battle_player_info::name() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.name)
  return name_.GetNoArena();
}
inline void msg_battle_player_info::set_name(const ::std::string& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.name)
}
#if LANG_CXX11
inline void msg_battle_player_info::set_name(::std::string&& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.msg_battle_player_info.name)
}
#endif
inline void msg_battle_player_info::set_name(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.msg_battle_player_info.name)
}
inline void msg_battle_player_info::set_name(const char* value, size_t size) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.msg_battle_player_info.name)
}
inline ::std::string* msg_battle_player_info::mutable_name() {
  set_changed();
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.game.msg_battle_player_info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg_battle_player_info::release_name() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.msg_battle_player_info.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg_battle_player_info::set_allocated_name(::std::string* name) {
  set_changed();
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.msg_battle_player_info.name)
}

// required int32 role_id = 3;
inline bool msg_battle_player_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_battle_player_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_battle_player_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_battle_player_info::clear_role_id() {
  set_changed();
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 msg_battle_player_info::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.role_id)
  return role_id_;
}
inline void msg_battle_player_info::set_role_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_role_id();
  role_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.role_id)
}

// required int32 role_level = 4;
inline bool msg_battle_player_info::has_role_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_battle_player_info::set_has_role_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_battle_player_info::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_battle_player_info::clear_role_level() {
  set_changed();
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 msg_battle_player_info::role_level() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.role_level)
  return role_level_;
}
inline void msg_battle_player_info::set_role_level(::google::protobuf::int32 value) {
  set_changed();
  set_has_role_level();
  role_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.role_level)
}

// required int32 sex = 5;
inline bool msg_battle_player_info::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_battle_player_info::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_battle_player_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_battle_player_info::clear_sex() {
  set_changed();
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 msg_battle_player_info::sex() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.sex)
  return sex_;
}
inline void msg_battle_player_info::set_sex(::google::protobuf::int32 value) {
  set_changed();
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.sex)
}

// required int32 avatar = 6;
inline bool msg_battle_player_info::has_avatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_battle_player_info::set_has_avatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_battle_player_info::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_battle_player_info::clear_avatar() {
  set_changed();
  avatar_ = 0;
  clear_has_avatar();
}
inline ::google::protobuf::int32 msg_battle_player_info::avatar() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.avatar)
  return avatar_;
}
inline void msg_battle_player_info::set_avatar(::google::protobuf::int32 value) {
  set_changed();
  set_has_avatar();
  avatar_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.avatar)
}

// required int32 toukuang = 8;
inline bool msg_battle_player_info::has_toukuang() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_battle_player_info::set_has_toukuang() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_battle_player_info::clear_has_toukuang() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_battle_player_info::clear_toukuang() {
  set_changed();
  toukuang_ = 0;
  clear_has_toukuang();
}
inline ::google::protobuf::int32 msg_battle_player_info::toukuang() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.toukuang)
  return toukuang_;
}
inline void msg_battle_player_info::set_toukuang(::google::protobuf::int32 value) {
  set_changed();
  set_has_toukuang();
  toukuang_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.toukuang)
}

// repeated int32 fashion = 9;
inline int msg_battle_player_info::fashion_size() const {
  return fashion_.size();
}
inline void msg_battle_player_info::clear_fashion() {
  set_changed();
  fashion_.Clear();
}
inline ::google::protobuf::int32 msg_battle_player_info::fashion(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.fashion)
  return fashion_.Get(index);
}
inline void msg_battle_player_info::set_fashion(int index, ::google::protobuf::int32 value) {
  set_changed();
  fashion_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.fashion)
}
inline void msg_battle_player_info::add_fashion(::google::protobuf::int32 value) {
  set_changed();
  fashion_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.msg_battle_player_info.fashion)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_battle_player_info::fashion() const {
  // @@protoc_insertion_point(field_list:protocol.game.msg_battle_player_info.fashion)
  return fashion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_battle_player_info::mutable_fashion() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.msg_battle_player_info.fashion)
  return &fashion_;
}

// required int32 region_id = 10;
inline bool msg_battle_player_info::has_region_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_battle_player_info::set_has_region_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_battle_player_info::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_battle_player_info::clear_region_id() {
  set_changed();
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 msg_battle_player_info::region_id() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.region_id)
  return region_id_;
}
inline void msg_battle_player_info::set_region_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.region_id)
}

// required int32 cup = 11;
inline bool msg_battle_player_info::has_cup() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_battle_player_info::set_has_cup() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_battle_player_info::clear_has_cup() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_battle_player_info::clear_cup() {
  set_changed();
  cup_ = 0;
  clear_has_cup();
}
inline ::google::protobuf::int32 msg_battle_player_info::cup() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.cup)
  return cup_;
}
inline void msg_battle_player_info::set_cup(::google::protobuf::int32 value) {
  set_changed();
  set_has_cup();
  cup_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.cup)
}

// repeated int32 attr_type = 14;
inline int msg_battle_player_info::attr_type_size() const {
  return attr_type_.size();
}
inline void msg_battle_player_info::clear_attr_type() {
  set_changed();
  attr_type_.Clear();
}
inline ::google::protobuf::int32 msg_battle_player_info::attr_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.attr_type)
  return attr_type_.Get(index);
}
inline void msg_battle_player_info::set_attr_type(int index, ::google::protobuf::int32 value) {
  set_changed();
  attr_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.attr_type)
}
inline void msg_battle_player_info::add_attr_type(::google::protobuf::int32 value) {
  set_changed();
  attr_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.msg_battle_player_info.attr_type)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_battle_player_info::attr_type() const {
  // @@protoc_insertion_point(field_list:protocol.game.msg_battle_player_info.attr_type)
  return attr_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_battle_player_info::mutable_attr_type() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.msg_battle_player_info.attr_type)
  return &attr_type_;
}

// repeated int32 attr_param1 = 15;
inline int msg_battle_player_info::attr_param1_size() const {
  return attr_param1_.size();
}
inline void msg_battle_player_info::clear_attr_param1() {
  set_changed();
  attr_param1_.Clear();
}
inline ::google::protobuf::int32 msg_battle_player_info::attr_param1(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.attr_param1)
  return attr_param1_.Get(index);
}
inline void msg_battle_player_info::set_attr_param1(int index, ::google::protobuf::int32 value) {
  set_changed();
  attr_param1_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.attr_param1)
}
inline void msg_battle_player_info::add_attr_param1(::google::protobuf::int32 value) {
  set_changed();
  attr_param1_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.msg_battle_player_info.attr_param1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_battle_player_info::attr_param1() const {
  // @@protoc_insertion_point(field_list:protocol.game.msg_battle_player_info.attr_param1)
  return attr_param1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_battle_player_info::mutable_attr_param1() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.msg_battle_player_info.attr_param1)
  return &attr_param1_;
}

// repeated int32 attr_param2 = 16;
inline int msg_battle_player_info::attr_param2_size() const {
  return attr_param2_.size();
}
inline void msg_battle_player_info::clear_attr_param2() {
  set_changed();
  attr_param2_.Clear();
}
inline ::google::protobuf::int32 msg_battle_player_info::attr_param2(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.attr_param2)
  return attr_param2_.Get(index);
}
inline void msg_battle_player_info::set_attr_param2(int index, ::google::protobuf::int32 value) {
  set_changed();
  attr_param2_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.attr_param2)
}
inline void msg_battle_player_info::add_attr_param2(::google::protobuf::int32 value) {
  set_changed();
  attr_param2_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.msg_battle_player_info.attr_param2)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_battle_player_info::attr_param2() const {
  // @@protoc_insertion_point(field_list:protocol.game.msg_battle_player_info.attr_param2)
  return attr_param2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_battle_player_info::mutable_attr_param2() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.msg_battle_player_info.attr_param2)
  return &attr_param2_;
}

// repeated int32 attr_param3 = 17;
inline int msg_battle_player_info::attr_param3_size() const {
  return attr_param3_.size();
}
inline void msg_battle_player_info::clear_attr_param3() {
  set_changed();
  attr_param3_.Clear();
}
inline ::google::protobuf::int32 msg_battle_player_info::attr_param3(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.attr_param3)
  return attr_param3_.Get(index);
}
inline void msg_battle_player_info::set_attr_param3(int index, ::google::protobuf::int32 value) {
  set_changed();
  attr_param3_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.attr_param3)
}
inline void msg_battle_player_info::add_attr_param3(::google::protobuf::int32 value) {
  set_changed();
  attr_param3_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.msg_battle_player_info.attr_param3)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_battle_player_info::attr_param3() const {
  // @@protoc_insertion_point(field_list:protocol.game.msg_battle_player_info.attr_param3)
  return attr_param3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_battle_player_info::mutable_attr_param3() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.msg_battle_player_info.attr_param3)
  return &attr_param3_;
}

// optional int32 camp = 18;
inline bool msg_battle_player_info::has_camp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_battle_player_info::set_has_camp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_battle_player_info::clear_has_camp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_battle_player_info::clear_camp() {
  set_changed();
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 msg_battle_player_info::camp() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.camp)
  return camp_;
}
inline void msg_battle_player_info::set_camp(::google::protobuf::int32 value) {
  set_changed();
  set_has_camp();
  camp_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.camp)
}

// required int32 name_color = 19;
inline bool msg_battle_player_info::has_name_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_battle_player_info::set_has_name_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_battle_player_info::clear_has_name_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_battle_player_info::clear_name_color() {
  set_changed();
  name_color_ = 0;
  clear_has_name_color();
}
inline ::google::protobuf::int32 msg_battle_player_info::name_color() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_battle_player_info.name_color)
  return name_color_;
}
inline void msg_battle_player_info::set_name_color(::google::protobuf::int32 value) {
  set_changed();
  set_has_name_color();
  name_color_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_battle_player_info.name_color)
}

// -------------------------------------------------------------------

// req_rc_rm_create_room

// required uint64 battle_guid = 1;
inline bool req_rc_rm_create_room::has_battle_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req_rc_rm_create_room::set_has_battle_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void req_rc_rm_create_room::clear_has_battle_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void req_rc_rm_create_room::clear_battle_guid() {
  set_changed();
  battle_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_guid();
}
inline ::google::protobuf::uint64 req_rc_rm_create_room::battle_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.req_rc_rm_create_room.battle_guid)
  return battle_guid_;
}
inline void req_rc_rm_create_room::set_battle_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_battle_guid();
  battle_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.req_rc_rm_create_room.battle_guid)
}

// required int32 battle_type = 2;
inline bool req_rc_rm_create_room::has_battle_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void req_rc_rm_create_room::set_has_battle_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void req_rc_rm_create_room::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void req_rc_rm_create_room::clear_battle_type() {
  set_changed();
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::google::protobuf::int32 req_rc_rm_create_room::battle_type() const {
  // @@protoc_insertion_point(field_get:protocol.game.req_rc_rm_create_room.battle_type)
  return battle_type_;
}
inline void req_rc_rm_create_room::set_battle_type(::google::protobuf::int32 value) {
  set_changed();
  set_has_battle_type();
  battle_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.req_rc_rm_create_room.battle_type)
}

// -------------------------------------------------------------------

// rep_rc_rm_create_room

// required string udp_ip = 1;
inline bool rep_rc_rm_create_room::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rep_rc_rm_create_room::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rep_rc_rm_create_room::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rep_rc_rm_create_room::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& rep_rc_rm_create_room::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_rc_rm_create_room.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void rep_rc_rm_create_room::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_rc_rm_create_room.udp_ip)
}
#if LANG_CXX11
inline void rep_rc_rm_create_room::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_rc_rm_create_room.udp_ip)
}
#endif
inline void rep_rc_rm_create_room::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_rc_rm_create_room.udp_ip)
}
inline void rep_rc_rm_create_room::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_rc_rm_create_room.udp_ip)
}
inline ::std::string* rep_rc_rm_create_room::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_rc_rm_create_room.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_rc_rm_create_room::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_rc_rm_create_room.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_rc_rm_create_room::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_rc_rm_create_room.udp_ip)
}

// required int32 udp_port = 2;
inline bool rep_rc_rm_create_room::has_udp_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rep_rc_rm_create_room::set_has_udp_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rep_rc_rm_create_room::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rep_rc_rm_create_room::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 rep_rc_rm_create_room::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_rc_rm_create_room.udp_port)
  return udp_port_;
}
inline void rep_rc_rm_create_room::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_rc_rm_create_room.udp_port)
}

// required string tcp_ip = 3;
inline bool rep_rc_rm_create_room::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rep_rc_rm_create_room::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rep_rc_rm_create_room::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rep_rc_rm_create_room::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& rep_rc_rm_create_room::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_rc_rm_create_room.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void rep_rc_rm_create_room::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_rc_rm_create_room.tcp_ip)
}
#if LANG_CXX11
inline void rep_rc_rm_create_room::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_rc_rm_create_room.tcp_ip)
}
#endif
inline void rep_rc_rm_create_room::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_rc_rm_create_room.tcp_ip)
}
inline void rep_rc_rm_create_room::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_rc_rm_create_room.tcp_ip)
}
inline ::std::string* rep_rc_rm_create_room::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_rc_rm_create_room.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_rc_rm_create_room::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_rc_rm_create_room.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_rc_rm_create_room::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_rc_rm_create_room.tcp_ip)
}

// required int32 tcp_port = 4;
inline bool rep_rc_rm_create_room::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rep_rc_rm_create_room::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rep_rc_rm_create_room::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rep_rc_rm_create_room::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 rep_rc_rm_create_room::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_rc_rm_create_room.tcp_port)
  return tcp_port_;
}
inline void rep_rc_rm_create_room::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_rc_rm_create_room.tcp_port)
}

// -------------------------------------------------------------------

// push_rc_rm_set_player_room

// required uint64 guid = 1;
inline bool push_rc_rm_set_player_room::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void push_rc_rm_set_player_room::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void push_rc_rm_set_player_room::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void push_rc_rm_set_player_room::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 push_rc_rm_set_player_room::guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_rm_set_player_room.guid)
  return guid_;
}
inline void push_rc_rm_set_player_room::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_rc_rm_set_player_room.guid)
}

// required uint64 battle_guid = 2;
inline bool push_rc_rm_set_player_room::has_battle_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void push_rc_rm_set_player_room::set_has_battle_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void push_rc_rm_set_player_room::clear_has_battle_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void push_rc_rm_set_player_room::clear_battle_guid() {
  set_changed();
  battle_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_guid();
}
inline ::google::protobuf::uint64 push_rc_rm_set_player_room::battle_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_rm_set_player_room.battle_guid)
  return battle_guid_;
}
inline void push_rc_rm_set_player_room::set_battle_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_battle_guid();
  battle_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_rc_rm_set_player_room.battle_guid)
}

// required string code = 3;
inline bool push_rc_rm_set_player_room::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_rc_rm_set_player_room::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_rc_rm_set_player_room::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_rc_rm_set_player_room::clear_code() {
  set_changed();
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& push_rc_rm_set_player_room::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_rm_set_player_room.code)
  return code_.GetNoArena();
}
inline void push_rc_rm_set_player_room::set_code(const ::std::string& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_rc_rm_set_player_room.code)
}
#if LANG_CXX11
inline void push_rc_rm_set_player_room::set_code(::std::string&& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_rc_rm_set_player_room.code)
}
#endif
inline void push_rc_rm_set_player_room::set_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_rc_rm_set_player_room.code)
}
inline void push_rc_rm_set_player_room::set_code(const char* value, size_t size) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_rc_rm_set_player_room.code)
}
inline ::std::string* push_rc_rm_set_player_room::mutable_code() {
  set_changed();
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_rc_rm_set_player_room.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_rc_rm_set_player_room::release_code() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_rc_rm_set_player_room.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_rc_rm_set_player_room::set_allocated_code(::std::string* code) {
  set_changed();
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_rc_rm_set_player_room.code)
}

// required .protocol.game.msg_battle_player_info player = 4;
inline bool push_rc_rm_set_player_room::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_rc_rm_set_player_room::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_rc_rm_set_player_room::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_rc_rm_set_player_room::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
inline const ::protocol::game::msg_battle_player_info& push_rc_rm_set_player_room::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_battle_player_info& push_rc_rm_set_player_room::player() const {
  const ::protocol::game::msg_battle_player_info* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_rm_set_player_room.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_battle_player_info*>(
      &::protocol::game::_msg_battle_player_info_default_instance_);
}
inline ::protocol::game::msg_battle_player_info* push_rc_rm_set_player_room::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.push_rc_rm_set_player_room.player)
  clear_has_player();
  ::protocol::game::msg_battle_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_battle_player_info* push_rc_rm_set_player_room::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_battle_player_info>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_rc_rm_set_player_room.player)
  return player_;
}
inline void push_rc_rm_set_player_room::set_allocated_player(::protocol::game::msg_battle_player_info* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_;
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_rc_rm_set_player_room.player)
}

// -------------------------------------------------------------------

// push_rm_rc_battle_end

// required uint64 battle_guid = 1;
inline bool push_rm_rc_battle_end::has_battle_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_rm_rc_battle_end::set_has_battle_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_rm_rc_battle_end::clear_has_battle_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_rm_rc_battle_end::clear_battle_guid() {
  set_changed();
  battle_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_guid();
}
inline ::google::protobuf::uint64 push_rm_rc_battle_end::battle_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rm_rc_battle_end.battle_guid)
  return battle_guid_;
}
inline void push_rm_rc_battle_end::set_battle_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_battle_guid();
  battle_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_rm_rc_battle_end.battle_guid)
}

// required bytes result = 2;
inline bool push_rm_rc_battle_end::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_rm_rc_battle_end::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_rm_rc_battle_end::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_rm_rc_battle_end::clear_result() {
  set_changed();
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result();
}
inline const ::std::string& push_rm_rc_battle_end::result() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rm_rc_battle_end.result)
  return result_.GetNoArena();
}
inline void push_rm_rc_battle_end::set_result(const ::std::string& value) {
  set_changed();
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_rm_rc_battle_end.result)
}
#if LANG_CXX11
inline void push_rm_rc_battle_end::set_result(::std::string&& value) {
  set_changed();
  set_has_result();
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_rm_rc_battle_end.result)
}
#endif
inline void push_rm_rc_battle_end::set_result(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_rm_rc_battle_end.result)
}
inline void push_rm_rc_battle_end::set_result(const void* value, size_t size) {
  set_changed();
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_rm_rc_battle_end.result)
}
inline ::std::string* push_rm_rc_battle_end::mutable_result() {
  set_changed();
  set_has_result();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_rm_rc_battle_end.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_rm_rc_battle_end::release_result() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_rm_rc_battle_end.result)
  if (!has_result()) {
    return NULL;
  }
  clear_has_result();
  return result_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_rm_rc_battle_end::set_allocated_result(::std::string* result) {
  set_changed();
  if (result != NULL) {
    set_has_result();
  } else {
    clear_has_result();
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_rm_rc_battle_end.result)
}

// -------------------------------------------------------------------

// push_r_rm_created

// required uint64 battle_guid = 1;
inline bool push_r_rm_created::has_battle_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_r_rm_created::set_has_battle_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_r_rm_created::clear_has_battle_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_r_rm_created::clear_battle_guid() {
  set_changed();
  battle_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_guid();
}
inline ::google::protobuf::uint64 push_r_rm_created::battle_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_r_rm_created.battle_guid)
  return battle_guid_;
}
inline void push_r_rm_created::set_battle_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_battle_guid();
  battle_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_r_rm_created.battle_guid)
}

// -------------------------------------------------------------------

// push_rc_hall_battle_end

// required int32 type = 1;
inline bool push_rc_hall_battle_end::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_rc_hall_battle_end::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_rc_hall_battle_end::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_rc_hall_battle_end::clear_type() {
  set_changed();
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 push_rc_hall_battle_end::type() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_hall_battle_end.type)
  return type_;
}
inline void push_rc_hall_battle_end::set_type(::google::protobuf::int32 value) {
  set_changed();
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_rc_hall_battle_end.type)
}

// repeated uint64 guids = 2;
inline int push_rc_hall_battle_end::guids_size() const {
  return guids_.size();
}
inline void push_rc_hall_battle_end::clear_guids() {
  set_changed();
  guids_.Clear();
}
inline ::google::protobuf::uint64 push_rc_hall_battle_end::guids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_hall_battle_end.guids)
  return guids_.Get(index);
}
inline void push_rc_hall_battle_end::set_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.push_rc_hall_battle_end.guids)
}
inline void push_rc_hall_battle_end::add_guids(::google::protobuf::uint64 value) {
  set_changed();
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_rc_hall_battle_end.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
push_rc_hall_battle_end::guids() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_rc_hall_battle_end.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
push_rc_hall_battle_end::mutable_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_rc_hall_battle_end.guids)
  return &guids_;
}

// required bytes result = 3;
inline bool push_rc_hall_battle_end::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_rc_hall_battle_end::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_rc_hall_battle_end::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_rc_hall_battle_end::clear_result() {
  set_changed();
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result();
}
inline const ::std::string& push_rc_hall_battle_end::result() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_rc_hall_battle_end.result)
  return result_.GetNoArena();
}
inline void push_rc_hall_battle_end::set_result(const ::std::string& value) {
  set_changed();
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_rc_hall_battle_end.result)
}
#if LANG_CXX11
inline void push_rc_hall_battle_end::set_result(::std::string&& value) {
  set_changed();
  set_has_result();
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_rc_hall_battle_end.result)
}
#endif
inline void push_rc_hall_battle_end::set_result(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_rc_hall_battle_end.result)
}
inline void push_rc_hall_battle_end::set_result(const void* value, size_t size) {
  set_changed();
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_rc_hall_battle_end.result)
}
inline ::std::string* push_rc_hall_battle_end::mutable_result() {
  set_changed();
  set_has_result();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_rc_hall_battle_end.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_rc_hall_battle_end::release_result() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_rc_hall_battle_end.result)
  if (!has_result()) {
    return NULL;
  }
  clear_has_result();
  return result_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_rc_hall_battle_end::set_allocated_result(::std::string* result) {
  set_changed();
  if (result != NULL) {
    set_has_result();
  } else {
    clear_has_result();
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_rc_hall_battle_end.result)
}

// -------------------------------------------------------------------

// smsg_battle_end

// required int32 box_id = 1;
inline bool smsg_battle_end::has_box_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_battle_end::set_has_box_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_battle_end::clear_has_box_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_battle_end::clear_box_id() {
  set_changed();
  box_id_ = 0;
  clear_has_box_id();
}
inline ::google::protobuf::int32 smsg_battle_end::box_id() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_battle_end.box_id)
  return box_id_;
}
inline void smsg_battle_end::set_box_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_box_id();
  box_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_battle_end.box_id)
}

// optional .dhc.battle_his_t battle_his = 2;
inline bool smsg_battle_end::has_battle_his() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_battle_end::set_has_battle_his() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_battle_end::clear_has_battle_his() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::dhc::battle_his_t& smsg_battle_end::_internal_battle_his() const {
  return *battle_his_;
}
inline const ::dhc::battle_his_t& smsg_battle_end::battle_his() const {
  const ::dhc::battle_his_t* p = battle_his_;
  // @@protoc_insertion_point(field_get:protocol.game.smsg_battle_end.battle_his)
  return p != NULL ? *p : *reinterpret_cast<const ::dhc::battle_his_t*>(
      &::dhc::_battle_his_t_default_instance_);
}
inline ::dhc::battle_his_t* smsg_battle_end::release_battle_his() {
  // @@protoc_insertion_point(field_release:protocol.game.smsg_battle_end.battle_his)
  clear_has_battle_his();
  ::dhc::battle_his_t* temp = battle_his_;
  battle_his_ = NULL;
  return temp;
}
inline ::dhc::battle_his_t* smsg_battle_end::mutable_battle_his() {
  set_has_battle_his();
  if (battle_his_ == NULL) {
    auto* p = CreateMaybeMessage<::dhc::battle_his_t>(GetArenaNoVirtual());
    battle_his_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_battle_end.battle_his)
  return battle_his_;
}
inline void smsg_battle_end::set_allocated_battle_his(::dhc::battle_his_t* battle_his) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(battle_his_);
  }
  if (battle_his) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      battle_his = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, battle_his, submessage_arena);
    }
    set_has_battle_his();
  } else {
    clear_has_battle_his();
  }
  battle_his_ = battle_his;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_battle_end.battle_his)
}

// required int32 gold = 3;
inline bool smsg_battle_end::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void smsg_battle_end::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void smsg_battle_end::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void smsg_battle_end::clear_gold() {
  set_changed();
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 smsg_battle_end::gold() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_battle_end.gold)
  return gold_;
}
inline void smsg_battle_end::set_gold(::google::protobuf::int32 value) {
  set_changed();
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_battle_end.gold)
}

// required int32 exp = 4;
inline bool smsg_battle_end::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void smsg_battle_end::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void smsg_battle_end::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void smsg_battle_end::clear_exp() {
  set_changed();
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 smsg_battle_end::exp() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_battle_end.exp)
  return exp_;
}
inline void smsg_battle_end::set_exp(::google::protobuf::int32 value) {
  set_changed();
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_battle_end.exp)
}

// required int32 cup = 5;
inline bool smsg_battle_end::has_cup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void smsg_battle_end::set_has_cup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void smsg_battle_end::clear_has_cup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void smsg_battle_end::clear_cup() {
  set_changed();
  cup_ = 0;
  clear_has_cup();
}
inline ::google::protobuf::int32 smsg_battle_end::cup() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_battle_end.cup)
  return cup_;
}
inline void smsg_battle_end::set_cup(::google::protobuf::int32 value) {
  set_changed();
  set_has_cup();
  cup_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_battle_end.cup)
}

// -------------------------------------------------------------------

// cmsg_offline_battle

// required int32 fight = 1;
inline bool cmsg_offline_battle::has_fight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmsg_offline_battle::set_has_fight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmsg_offline_battle::clear_has_fight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmsg_offline_battle::clear_fight() {
  set_changed();
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 cmsg_offline_battle::fight() const {
  // @@protoc_insertion_point(field_get:protocol.game.cmsg_offline_battle.fight)
  return fight_;
}
inline void cmsg_offline_battle::set_fight(::google::protobuf::int32 value) {
  set_changed();
  set_has_fight();
  fight_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.cmsg_offline_battle.fight)
}

// -------------------------------------------------------------------

// cmsg_offline_battle_end

// required int32 rank = 1;
inline bool cmsg_offline_battle_end::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmsg_offline_battle_end::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmsg_offline_battle_end::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmsg_offline_battle_end::clear_rank() {
  set_changed();
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 cmsg_offline_battle_end::rank() const {
  // @@protoc_insertion_point(field_get:protocol.game.cmsg_offline_battle_end.rank)
  return rank_;
}
inline void cmsg_offline_battle_end::set_rank(::google::protobuf::int32 value) {
  set_changed();
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.cmsg_offline_battle_end.rank)
}

// -------------------------------------------------------------------

// smsg_offline_battle_end

// required int32 box_id = 1;
inline bool smsg_offline_battle_end::has_box_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_offline_battle_end::set_has_box_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_offline_battle_end::clear_has_box_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_offline_battle_end::clear_box_id() {
  set_changed();
  box_id_ = 0;
  clear_has_box_id();
}
inline ::google::protobuf::int32 smsg_offline_battle_end::box_id() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_offline_battle_end.box_id)
  return box_id_;
}
inline void smsg_offline_battle_end::set_box_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_box_id();
  box_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_offline_battle_end.box_id)
}

// required int32 gold = 2;
inline bool smsg_offline_battle_end::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_offline_battle_end::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_offline_battle_end::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_offline_battle_end::clear_gold() {
  set_changed();
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 smsg_offline_battle_end::gold() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_offline_battle_end.gold)
  return gold_;
}
inline void smsg_offline_battle_end::set_gold(::google::protobuf::int32 value) {
  set_changed();
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_offline_battle_end.gold)
}

// required int32 exp = 3;
inline bool smsg_offline_battle_end::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void smsg_offline_battle_end::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void smsg_offline_battle_end::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void smsg_offline_battle_end::clear_exp() {
  set_changed();
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 smsg_offline_battle_end::exp() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_offline_battle_end.exp)
  return exp_;
}
inline void smsg_offline_battle_end::set_exp(::google::protobuf::int32 value) {
  set_changed();
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_offline_battle_end.exp)
}

// required int32 cup = 4;
inline bool smsg_offline_battle_end::has_cup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void smsg_offline_battle_end::set_has_cup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void smsg_offline_battle_end::clear_has_cup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void smsg_offline_battle_end::clear_cup() {
  set_changed();
  cup_ = 0;
  clear_has_cup();
}
inline ::google::protobuf::int32 smsg_offline_battle_end::cup() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_offline_battle_end.cup)
  return cup_;
}
inline void smsg_offline_battle_end::set_cup(::google::protobuf::int32 value) {
  set_changed();
  set_has_cup();
  cup_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_offline_battle_end.cup)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_5fbattle_2eproto
