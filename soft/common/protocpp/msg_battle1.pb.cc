// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_battle1.proto

#include "msg_battle1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_msg_5fbattle1_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_effect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_item_base;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_op;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_unit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_boss;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_item;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_monster;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle1_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_msg_battle_state;
}  // namespace protobuf_msg_5fbattle1_2eproto
namespace protocol {
namespace game {
class msg_battle_unitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_unit>
      _instance;
} _msg_battle_unit_default_instance_;
class msg_battle_bossDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_boss>
      _instance;
} _msg_battle_boss_default_instance_;
class msg_battle_monsterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_monster>
      _instance;
} _msg_battle_monster_default_instance_;
class msg_battle_playerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_player>
      _instance;
} _msg_battle_player_default_instance_;
class msg_battle_effectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_effect>
      _instance;
} _msg_battle_effect_default_instance_;
class msg_battle_item_baseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_item_base>
      _instance;
} _msg_battle_item_base_default_instance_;
class msg_battle_itemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_item>
      _instance;
} _msg_battle_item_default_instance_;
class msg_battle_opDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_op>
      _instance;
} _msg_battle_op_default_instance_;
class msg_battle_stateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_state>
      _instance;
} _msg_battle_state_default_instance_;
class cmsg_battle_stateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_battle_state>
      _instance;
} _cmsg_battle_state_default_instance_;
class msg_battle_codeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_battle_code>
      _instance;
} _msg_battle_code_default_instance_;
class cmsg_battle_linkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_battle_link>
      _instance;
} _cmsg_battle_link_default_instance_;
class smsg_battle_linkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_battle_link>
      _instance;
} _smsg_battle_link_default_instance_;
}  // namespace game
}  // namespace protocol
namespace protobuf_msg_5fbattle1_2eproto {
static void InitDefaultsmsg_battle_unit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_unit_default_instance_;
    new (ptr) ::protocol::game::msg_battle_unit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_unit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_unit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_battle_unit}, {}};

static void InitDefaultsmsg_battle_boss() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_boss_default_instance_;
    new (ptr) ::protocol::game::msg_battle_boss();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_boss::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_boss =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_battle_boss}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_unit.base,}};

static void InitDefaultsmsg_battle_monster() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_monster_default_instance_;
    new (ptr) ::protocol::game::msg_battle_monster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_monster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_monster =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_battle_monster}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_unit.base,}};

static void InitDefaultsmsg_battle_player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_player_default_instance_;
    new (ptr) ::protocol::game::msg_battle_player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_battle_player}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_unit.base,}};

static void InitDefaultsmsg_battle_effect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_effect_default_instance_;
    new (ptr) ::protocol::game::msg_battle_effect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_effect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_effect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_battle_effect}, {}};

static void InitDefaultsmsg_battle_item_base() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_item_base_default_instance_;
    new (ptr) ::protocol::game::msg_battle_item_base();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_item_base::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_item_base =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_battle_item_base}, {}};

static void InitDefaultsmsg_battle_item() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_item_default_instance_;
    new (ptr) ::protocol::game::msg_battle_item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_battle_item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_battle_item}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item_base.base,}};

static void InitDefaultsmsg_battle_op() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_op_default_instance_;
    new (ptr) ::protocol::game::msg_battle_op();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_op::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_op =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_battle_op}, {}};

static void InitDefaultsmsg_battle_state() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_state_default_instance_;
    new (ptr) ::protocol::game::msg_battle_state();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_state::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_msg_battle_state =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsmsg_battle_state}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_boss.base,
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_monster.base,
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_player.base,
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_effect.base,
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item_base.base,
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item.base,}};

static void InitDefaultscmsg_battle_state() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_battle_state_default_instance_;
    new (ptr) ::protocol::game::cmsg_battle_state();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_battle_state::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_cmsg_battle_state =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultscmsg_battle_state}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_state.base,}};

static void InitDefaultsmsg_battle_code() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_battle_code_default_instance_;
    new (ptr) ::protocol::game::msg_battle_code();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_battle_code::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_code =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_battle_code}, {}};

static void InitDefaultscmsg_battle_link() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_battle_link_default_instance_;
    new (ptr) ::protocol::game::cmsg_battle_link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_battle_link::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_battle_link =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_battle_link}, {}};

static void InitDefaultssmsg_battle_link() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_battle_link_default_instance_;
    new (ptr) ::protocol::game::smsg_battle_link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_battle_link::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_smsg_battle_link =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultssmsg_battle_link}, {
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_state.base,
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_op.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_unit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_boss.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_monster.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_effect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_item_base.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_item.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_op.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_state.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_battle_state.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_battle_code.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_battle_link.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_battle_link.base);
}

::google::protobuf::Metadata file_level_metadata[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, r_py_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, is_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, re_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, save_re_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, save_re_zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, is_jf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, jf_sx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, jf_sy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, jf_xx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, jf_yy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, jf_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, jf_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, bhit_tids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, death_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, rtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, attackr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, buffs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, buffs_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, is_ai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, eyerange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, ai_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, nextpoint_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, nextpoint_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_unit, totalzhen_),
  0,
  1,
  2,
  3,
  4,
  5,
  11,
  6,
  7,
  8,
  9,
  10,
  13,
  14,
  15,
  ~0u,
  ~0u,
  12,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  22,
  23,
  24,
  25,
  ~0u,
  ~0u,
  26,
  27,
  28,
  29,
  30,
  31,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_boss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_boss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_boss, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_boss, attack_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_boss, attackzhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_boss, boss_birth_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_monster, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_monster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_monster, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_monster, birth_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_monster, birth_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_monster, attack_guid_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, role_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, camp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attr_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attr_param1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attr_param2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attr_param3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, cup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, toukuang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, fashion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, name_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, score_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, lattr_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, talent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, talent_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, talent_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, die_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, lsha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, max_lsha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, re_pre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, re_pre_zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, re_pre_zhen1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, xueren_zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, is_xueren_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attack_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attackzhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, birth_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, birth_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_player, attack_guid_),
  2,
  0,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  8,
  ~0u,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,
  ~0u,
  ~0u,
  15,
  16,
  17,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  19,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, re_tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, sx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, sy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, xx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, yy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, re_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, re_ur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, hit_guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, dd_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, pre_zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, camp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_effect, follow_guid_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  12,
  ~0u,
  13,
  14,
  15,
  16,
  17,
  18,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item_base, zhen_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_item, birth_pos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, param_ints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_op, param_strings_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, boss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, monsters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, effects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, bases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_state, init_item_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_state, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_state, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_state, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_state, state_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_code, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_code, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_code, zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_battle_code, code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_link, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_link, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_battle_link, code_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, battle_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, team_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, member_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, zhen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, seed_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, is_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, self_camp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_battle_link, is_new_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  ~0u,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 42, sizeof(::protocol::game::msg_battle_unit)},
  { 79, 88, sizeof(::protocol::game::msg_battle_boss)},
  { 92, 101, sizeof(::protocol::game::msg_battle_monster)},
  { 105, 150, sizeof(::protocol::game::msg_battle_player)},
  { 190, 215, sizeof(::protocol::game::msg_battle_effect)},
  { 235, 246, sizeof(::protocol::game::msg_battle_item_base)},
  { 252, 259, sizeof(::protocol::game::msg_battle_item)},
  { 261, 271, sizeof(::protocol::game::msg_battle_op)},
  { 276, 290, sizeof(::protocol::game::msg_battle_state)},
  { 299, 306, sizeof(::protocol::game::cmsg_battle_state)},
  { 308, 315, sizeof(::protocol::game::msg_battle_code)},
  { 317, 324, sizeof(::protocol::game::cmsg_battle_link)},
  { 326, 343, sizeof(::protocol::game::smsg_battle_link)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_unit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_boss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_monster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_effect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_item_base_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_op_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_state_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_battle_state_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_battle_code_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_battle_link_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_battle_link_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "msg_battle1.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021msg_battle1.proto\022\rprotocol.game\"\357\004\n\017m"
      "sg_battle_unit\022\014\n\004guid\030\001 \002(\004\022\017\n\007role_id\030"
      "\002 \001(\005\022\t\n\001x\030\n \001(\005\022\t\n\001y\030\013 \001(\005\022\t\n\001r\030\014 \001(\005\022\014"
      "\n\004r_py\030\r \001(\005\022\017\n\007is_move\030\016 \001(\010\022\016\n\006re_tid\030"
      "\017 \001(\005\022\020\n\010re_state\030\020 \001(\005\022\r\n\005re_id\030\021 \001(\005\022\020"
      "\n\010re_level\030\022 \001(\005\022\017\n\007re_time\030\023 \001(\005\022\014\n\004re_"
      "x\030\024 \001(\005\022\014\n\004re_y\030\025 \001(\005\022\014\n\004re_r\030\026 \001(\005\022\022\n\ns"
      "ave_re_id\030\027 \003(\005\022\024\n\014save_re_zhen\030\030 \003(\005\022\r\n"
      "\005is_jf\030\031 \001(\010\022\r\n\005jf_sx\030\032 \001(\005\022\r\n\005jf_sy\030\033 \001"
      "(\005\022\r\n\005jf_xx\030\034 \001(\005\022\r\n\005jf_yy\030\035 \001(\005\022\020\n\010jf_s"
      "peed\030\036 \001(\005\022\014\n\004jf_r\030\037 \001(\005\022\021\n\tbhit_tids\030  "
      "\003(\005\022\022\n\ndeath_time\030! \001(\005\022\r\n\005rtime\030\" \001(\005\022\017"
      "\n\007attackr\030# \001(\005\022\n\n\002hp\030$ \001(\005\022\r\n\005buffs\030% \003"
      "(\005\022\022\n\nbuffs_time\030& \003(\005\022\016\n\005is_ai\030\310\001 \001(\005\022\021"
      "\n\010eyeRange\030\311\001 \001(\005\022\021\n\010ai_state\030\312\001 \001(\005\022\024\n\013"
      "nextPoint_x\030\313\001 \001(\005\022\024\n\013nextPoint_y\030\314\001 \001(\005"
      "\022\022\n\ttotalZhen\030\315\001 \001(\005\"\202\001\n\017msg_battle_boss"
      "\022,\n\004unit\030\001 \002(\0132\036.protocol.game.msg_battl"
      "e_unit\022\024\n\014attack_state\030\002 \001(\005\022\022\n\nattackZh"
      "en\030\003 \001(\005\022\027\n\017boss_birth_time\030\004 \001(\005\"y\n\022msg"
      "_battle_monster\022,\n\004unit\030\001 \002(\0132\036.protocol"
      ".game.msg_battle_unit\022\017\n\007birth_x\030\002 \001(\005\022\017"
      "\n\007birth_y\030\003 \001(\005\022\023\n\013attack_guid\030\004 \001(\t\"\376\005\n"
      "\021msg_battle_player\022,\n\004unit\030\001 \002(\0132\036.proto"
      "col.game.msg_battle_unit\022\014\n\004name\030\002 \001(\t\022\013"
      "\n\003sex\030\003 \001(\005\022\022\n\nrole_level\030\004 \001(\005\022\014\n\004camp\030"
      "\005 \001(\005\022\021\n\tattr_type\030\006 \003(\005\022\023\n\013attr_param1\030"
      "\007 \003(\005\022\023\n\013attr_param2\030\010 \003(\005\022\023\n\013attr_param"
      "3\030\t \003(\005\022\016\n\006avatar\030\n \001(\005\022\013\n\003cup\030\014 \001(\005\022\020\n\010"
      "toukuang\030\r \001(\005\022\017\n\007fashion\030\016 \003(\005\022\021\n\tregio"
      "n_id\030\017 \001(\005\022\022\n\nname_color\030\020 \001(\005\022\r\n\005level\030"
      "\036 \001(\005\022\013\n\003exp\030\037 \001(\005\022\r\n\005score\030  \001(\005\022\023\n\013sco"
      "re_level\030! \001(\005\022\023\n\013lattr_value\030\" \003(\005\022\021\n\tt"
      "alent_id\030# \003(\005\022\024\n\014talent_level\030$ \003(\005\022\024\n\014"
      "talent_point\030% \001(\005\022\013\n\003die\030& \001(\005\022\013\n\003sha\030\'"
      " \001(\005\022\014\n\004lsha\030( \001(\005\022\020\n\010max_lsha\030) \001(\005\022\020\n\010"
      "skill_id\0302 \001(\005\022\023\n\013skill_level\0303 \001(\005\022\016\n\006r"
      "e_pre\0304 \001(\005\022\023\n\013re_pre_zhen\0305 \001(\005\022\024\n\014re_p"
      "re_zhen1\0306 \001(\005\022\023\n\013xueren_zhen\0307 \001(\005\022\021\n\ti"
      "s_xueren\0308 \001(\010\022\014\n\004cost\0309 \001(\005\022\024\n\014attack_s"
      "tate\030d \001(\005\022\022\n\nattackZhen\030e \001(\005\022\017\n\007birth_"
      "x\030f \001(\005\022\017\n\007birth_y\030g \001(\005\022\023\n\013attack_guid\030"
      "h \001(\t\"\260\002\n\021msg_battle_effect\022\013\n\003tid\030\001 \002(\005"
      "\022\016\n\006re_tid\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\n\n\002sx\030\004 \001(\005"
      "\022\n\n\002sy\030\005 \001(\005\022\t\n\001x\030\006 \001(\005\022\t\n\001y\030\007 \001(\005\022\n\n\002xx"
      "\030\010 \001(\005\022\n\n\002yy\030\t \001(\005\022\t\n\001r\030\n \001(\005\022\017\n\007re_guid"
      "\030\014 \001(\t\022\r\n\005re_ur\030\r \001(\005\022\021\n\thit_guids\030\016 \003(\t"
      "\022\014\n\004time\030\017 \001(\005\022\017\n\007dd_time\030\020 \001(\005\022\r\n\005state"
      "\030\021 \001(\005\022\013\n\003len\030\022 \001(\005\022\020\n\010pre_zhen\030\023 \001(\005\022\014\n"
      "\004camp\030\024 \001(\005\022\023\n\013follow_guid\030\025 \001(\t\"b\n\024msg_"
      "battle_item_base\022\013\n\003tid\030\001 \002(\005\022\n\n\002id\030\002 \001("
      "\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\r\n\005param\030\005 \001(\005\022\014"
      "\n\004zhen\030\006 \001(\005\"W\n\017msg_battle_item\0221\n\004item\030"
      "\001 \002(\0132#.protocol.game.msg_battle_item_ba"
      "se\022\021\n\tbirth_pos\030\002 \001(\005\"f\n\rmsg_battle_op\022\014"
      "\n\004zhen\030\001 \001(\005\022\016\n\006opcode\030\002 \002(\005\022\014\n\004guid\030\003 \002"
      "(\004\022\022\n\nparam_ints\030\004 \003(\005\022\025\n\rparam_strings\030"
      "\005 \003(\t\"\354\002\n\020msg_battle_state\022\014\n\004zhen\030\001 \002(\005"
      "\022,\n\004boss\030\002 \003(\0132\036.protocol.game.msg_battl"
      "e_boss\0223\n\010monsters\030\003 \003(\0132!.protocol.game"
      ".msg_battle_monster\0221\n\007players\030\004 \003(\0132 .p"
      "rotocol.game.msg_battle_player\0221\n\007effect"
      "s\030\005 \003(\0132 .protocol.game.msg_battle_effec"
      "t\0222\n\005bases\030\006 \003(\0132#.protocol.game.msg_bat"
      "tle_item_base\022-\n\005items\030\007 \003(\0132\036.protocol."
      "game.msg_battle_item\022\013\n\003tid\030\010 \002(\005\022\021\n\tini"
      "t_item\030\t \002(\010\"Q\n\021cmsg_battle_state\022\014\n\004gui"
      "d\030\001 \002(\004\022.\n\005state\030\002 \002(\0132\037.protocol.game.m"
      "sg_battle_state\"-\n\017msg_battle_code\022\014\n\004zh"
      "en\030\001 \002(\005\022\014\n\004code\030\002 \002(\005\".\n\020cmsg_battle_li"
      "nk\022\014\n\004guid\030\001 \002(\004\022\014\n\004code\030\002 \002(\t\"\231\002\n\020smsg_"
      "battle_link\022\023\n\013battle_guid\030\001 \002(\004\022\014\n\004type"
      "\030\002 \002(\005\022\020\n\010team_num\030\003 \002(\005\022\022\n\nmember_num\030\004"
      " \002(\005\022\014\n\004zhen\030\005 \002(\005\022\014\n\004seed\030\006 \002(\005\022\020\n\010seed"
      "_add\030\007 \002(\005\022\020\n\010is_state\030\010 \001(\005\022.\n\005state\030\t "
      "\001(\0132\037.protocol.game.msg_battle_state\022)\n\003"
      "ops\030\n \003(\0132\034.protocol.game.msg_battle_op\022"
      "\021\n\tself_camp\030\013 \002(\005\022\016\n\006is_new\030\014 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3114);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_battle1.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_5fbattle1_2eproto
namespace protocol {
namespace game {

// ===================================================================

void msg_battle_unit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_unit::kGuidFieldNumber;
const int msg_battle_unit::kRoleIdFieldNumber;
const int msg_battle_unit::kXFieldNumber;
const int msg_battle_unit::kYFieldNumber;
const int msg_battle_unit::kRFieldNumber;
const int msg_battle_unit::kRPyFieldNumber;
const int msg_battle_unit::kIsMoveFieldNumber;
const int msg_battle_unit::kReTidFieldNumber;
const int msg_battle_unit::kReStateFieldNumber;
const int msg_battle_unit::kReIdFieldNumber;
const int msg_battle_unit::kReLevelFieldNumber;
const int msg_battle_unit::kReTimeFieldNumber;
const int msg_battle_unit::kReXFieldNumber;
const int msg_battle_unit::kReYFieldNumber;
const int msg_battle_unit::kReRFieldNumber;
const int msg_battle_unit::kSaveReIdFieldNumber;
const int msg_battle_unit::kSaveReZhenFieldNumber;
const int msg_battle_unit::kIsJfFieldNumber;
const int msg_battle_unit::kJfSxFieldNumber;
const int msg_battle_unit::kJfSyFieldNumber;
const int msg_battle_unit::kJfXxFieldNumber;
const int msg_battle_unit::kJfYyFieldNumber;
const int msg_battle_unit::kJfSpeedFieldNumber;
const int msg_battle_unit::kJfRFieldNumber;
const int msg_battle_unit::kBhitTidsFieldNumber;
const int msg_battle_unit::kDeathTimeFieldNumber;
const int msg_battle_unit::kRtimeFieldNumber;
const int msg_battle_unit::kAttackrFieldNumber;
const int msg_battle_unit::kHpFieldNumber;
const int msg_battle_unit::kBuffsFieldNumber;
const int msg_battle_unit::kBuffsTimeFieldNumber;
const int msg_battle_unit::kIsAiFieldNumber;
const int msg_battle_unit::kEyeRangeFieldNumber;
const int msg_battle_unit::kAiStateFieldNumber;
const int msg_battle_unit::kNextPointXFieldNumber;
const int msg_battle_unit::kNextPointYFieldNumber;
const int msg_battle_unit::kTotalZhenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_unit::msg_battle_unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_unit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_unit)
}
msg_battle_unit::msg_battle_unit(const msg_battle_unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      save_re_id_(from.save_re_id_),
      save_re_zhen_(from.save_re_zhen_),
      bhit_tids_(from.bhit_tids_),
      buffs_(from.buffs_),
      buffs_time_(from.buffs_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalzhen_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(totalzhen_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_unit)
}

void msg_battle_unit::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalzhen_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(totalzhen_));
}

msg_battle_unit::~msg_battle_unit() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_unit)
  SharedDtor();
}

void msg_battle_unit::SharedDtor() {
}

void msg_battle_unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_unit::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_unit& msg_battle_unit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_unit.base);
  return *internal_default_instance();
}


void msg_battle_unit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  save_re_id_.Clear();
  set_changed();
  save_re_zhen_.Clear();
  set_changed();
  bhit_tids_.Clear();
  set_changed();
  buffs_.Clear();
  set_changed();
  buffs_time_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&re_state_) -
        reinterpret_cast<char*>(&guid_)) + sizeof(re_state_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&re_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&re_r_) -
        reinterpret_cast<char*>(&re_id_)) + sizeof(re_r_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&jf_sx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_) -
        reinterpret_cast<char*>(&jf_sx_)) + sizeof(rtime_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&attackr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalzhen_) -
        reinterpret_cast<char*>(&attackr_)) + sizeof(totalzhen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_unit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_role_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 r = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 r_py = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_r_py();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_py_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_move = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_is_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_tid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_re_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_state = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_re_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_re_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_level = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_re_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_time = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_re_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_x = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_re_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_y = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_re_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_r = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_re_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 save_re_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184u, input, this->mutable_save_re_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_save_re_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 save_re_zhen = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192u, input, this->mutable_save_re_zhen())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_save_re_zhen())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_jf = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_is_jf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jf_sx = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_jf_sx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jf_sx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jf_sy = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_jf_sy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jf_sy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jf_xx = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_jf_xx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jf_xx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jf_yy = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_jf_yy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jf_yy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jf_speed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_jf_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jf_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 jf_r = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_jf_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jf_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bhit_tids = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256u, input, this->mutable_bhit_tids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bhit_tids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 death_time = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_death_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rtime = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_rtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attackr = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_attackr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hp = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 buffs = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 296u, input, this->mutable_buffs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 buffs_time = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 304u, input, this->mutable_buffs_time())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffs_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_ai = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {
          set_has_is_ai();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_ai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eyeRange = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 1608 & 0xFF */)) {
          set_has_eyerange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eyerange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ai_state = 202;
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 1616 & 0xFF */)) {
          set_has_ai_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ai_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nextPoint_x = 203;
      case 203: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 1624 & 0xFF */)) {
          set_has_nextpoint_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextpoint_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nextPoint_y = 204;
      case 204: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 1632 & 0xFF */)) {
          set_has_nextpoint_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextpoint_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 totalZhen = 205;
      case 205: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 1640 & 0xFF */)) {
          set_has_totalzhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalzhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_unit)
  return false;
#undef DO_
}

void msg_battle_unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // optional int32 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_id(), output);
  }

  // optional int32 x = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->x(), output);
  }

  // optional int32 y = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->y(), output);
  }

  // optional int32 r = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->r(), output);
  }

  // optional int32 r_py = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->r_py(), output);
  }

  // optional bool is_move = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_move(), output);
  }

  // optional int32 re_tid = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->re_tid(), output);
  }

  // optional int32 re_state = 16;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->re_state(), output);
  }

  // optional int32 re_id = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->re_id(), output);
  }

  // optional int32 re_level = 18;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->re_level(), output);
  }

  // optional int32 re_time = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->re_time(), output);
  }

  // optional int32 re_x = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->re_x(), output);
  }

  // optional int32 re_y = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->re_y(), output);
  }

  // optional int32 re_r = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->re_r(), output);
  }

  // repeated int32 save_re_id = 23;
  for (int i = 0, n = this->save_re_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->save_re_id(i), output);
  }

  // repeated int32 save_re_zhen = 24;
  for (int i = 0, n = this->save_re_zhen_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->save_re_zhen(i), output);
  }

  // optional bool is_jf = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_jf(), output);
  }

  // optional int32 jf_sx = 26;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->jf_sx(), output);
  }

  // optional int32 jf_sy = 27;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->jf_sy(), output);
  }

  // optional int32 jf_xx = 28;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->jf_xx(), output);
  }

  // optional int32 jf_yy = 29;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->jf_yy(), output);
  }

  // optional int32 jf_speed = 30;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->jf_speed(), output);
  }

  // optional int32 jf_r = 31;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->jf_r(), output);
  }

  // repeated int32 bhit_tids = 32;
  for (int i = 0, n = this->bhit_tids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->bhit_tids(i), output);
  }

  // optional int32 death_time = 33;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->death_time(), output);
  }

  // optional int32 rtime = 34;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->rtime(), output);
  }

  // optional int32 attackr = 35;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->attackr(), output);
  }

  // optional int32 hp = 36;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->hp(), output);
  }

  // repeated int32 buffs = 37;
  for (int i = 0, n = this->buffs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      37, this->buffs(i), output);
  }

  // repeated int32 buffs_time = 38;
  for (int i = 0, n = this->buffs_time_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      38, this->buffs_time(i), output);
  }

  // optional int32 is_ai = 200;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(200, this->is_ai(), output);
  }

  // optional int32 eyeRange = 201;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(201, this->eyerange(), output);
  }

  // optional int32 ai_state = 202;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(202, this->ai_state(), output);
  }

  // optional int32 nextPoint_x = 203;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(203, this->nextpoint_x(), output);
  }

  // optional int32 nextPoint_y = 204;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(204, this->nextpoint_y(), output);
  }

  // optional int32 totalZhen = 205;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(205, this->totalzhen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_unit)
}

::google::protobuf::uint8* msg_battle_unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // optional int32 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_id(), target);
  }

  // optional int32 x = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->x(), target);
  }

  // optional int32 y = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->y(), target);
  }

  // optional int32 r = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->r(), target);
  }

  // optional int32 r_py = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->r_py(), target);
  }

  // optional bool is_move = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_move(), target);
  }

  // optional int32 re_tid = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->re_tid(), target);
  }

  // optional int32 re_state = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->re_state(), target);
  }

  // optional int32 re_id = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->re_id(), target);
  }

  // optional int32 re_level = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->re_level(), target);
  }

  // optional int32 re_time = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->re_time(), target);
  }

  // optional int32 re_x = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->re_x(), target);
  }

  // optional int32 re_y = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->re_y(), target);
  }

  // optional int32 re_r = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->re_r(), target);
  }

  // repeated int32 save_re_id = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(23, this->save_re_id_, target);

  // repeated int32 save_re_zhen = 24;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(24, this->save_re_zhen_, target);

  // optional bool is_jf = 25;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_jf(), target);
  }

  // optional int32 jf_sx = 26;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->jf_sx(), target);
  }

  // optional int32 jf_sy = 27;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->jf_sy(), target);
  }

  // optional int32 jf_xx = 28;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->jf_xx(), target);
  }

  // optional int32 jf_yy = 29;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->jf_yy(), target);
  }

  // optional int32 jf_speed = 30;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->jf_speed(), target);
  }

  // optional int32 jf_r = 31;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->jf_r(), target);
  }

  // repeated int32 bhit_tids = 32;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(32, this->bhit_tids_, target);

  // optional int32 death_time = 33;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->death_time(), target);
  }

  // optional int32 rtime = 34;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->rtime(), target);
  }

  // optional int32 attackr = 35;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->attackr(), target);
  }

  // optional int32 hp = 36;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->hp(), target);
  }

  // repeated int32 buffs = 37;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(37, this->buffs_, target);

  // repeated int32 buffs_time = 38;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(38, this->buffs_time_, target);

  // optional int32 is_ai = 200;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(200, this->is_ai(), target);
  }

  // optional int32 eyeRange = 201;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(201, this->eyerange(), target);
  }

  // optional int32 ai_state = 202;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(202, this->ai_state(), target);
  }

  // optional int32 nextPoint_x = 203;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(203, this->nextpoint_x(), target);
  }

  // optional int32 nextPoint_y = 204;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(204, this->nextpoint_y(), target);
  }

  // optional int32 totalZhen = 205;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(205, this->totalzhen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_unit)
  return target;
}

size_t msg_battle_unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_unit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }
  // repeated int32 save_re_id = 23;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->save_re_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->save_re_id_size());
    total_size += data_size;
  }

  // repeated int32 save_re_zhen = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->save_re_zhen_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->save_re_zhen_size());
    total_size += data_size;
  }

  // repeated int32 bhit_tids = 32;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bhit_tids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bhit_tids_size());
    total_size += data_size;
  }

  // repeated int32 buffs = 37;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->buffs_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->buffs_size());
    total_size += data_size;
  }

  // repeated int32 buffs_time = 38;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->buffs_time_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->buffs_time_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional int32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // optional int32 x = 10;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 11;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 r = 12;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 r_py = 13;
    if (has_r_py()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r_py());
    }

    // optional int32 re_tid = 15;
    if (has_re_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_tid());
    }

    // optional int32 re_state = 16;
    if (has_re_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_state());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 re_id = 17;
    if (has_re_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_id());
    }

    // optional int32 re_level = 18;
    if (has_re_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_level());
    }

    // optional int32 re_time = 19;
    if (has_re_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_time());
    }

    // optional bool is_move = 14;
    if (has_is_move()) {
      total_size += 1 + 1;
    }

    // optional bool is_jf = 25;
    if (has_is_jf()) {
      total_size += 2 + 1;
    }

    // optional int32 re_x = 20;
    if (has_re_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_x());
    }

    // optional int32 re_y = 21;
    if (has_re_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_y());
    }

    // optional int32 re_r = 22;
    if (has_re_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_r());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 jf_sx = 26;
    if (has_jf_sx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jf_sx());
    }

    // optional int32 jf_sy = 27;
    if (has_jf_sy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jf_sy());
    }

    // optional int32 jf_xx = 28;
    if (has_jf_xx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jf_xx());
    }

    // optional int32 jf_yy = 29;
    if (has_jf_yy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jf_yy());
    }

    // optional int32 jf_speed = 30;
    if (has_jf_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jf_speed());
    }

    // optional int32 jf_r = 31;
    if (has_jf_r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jf_r());
    }

    // optional int32 death_time = 33;
    if (has_death_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_time());
    }

    // optional int32 rtime = 34;
    if (has_rtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtime());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 attackr = 35;
    if (has_attackr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackr());
    }

    // optional int32 hp = 36;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 is_ai = 200;
    if (has_is_ai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_ai());
    }

    // optional int32 eyeRange = 201;
    if (has_eyerange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eyerange());
    }

    // optional int32 ai_state = 202;
    if (has_ai_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ai_state());
    }

    // optional int32 nextPoint_x = 203;
    if (has_nextpoint_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextpoint_x());
    }

    // optional int32 nextPoint_y = 204;
    if (has_nextpoint_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextpoint_y());
    }

    // optional int32 totalZhen = 205;
    if (has_totalzhen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalzhen());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_unit)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_unit)
    MergeFrom(*source);
  }
}

void msg_battle_unit::MergeFrom(const msg_battle_unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  save_re_id_.MergeFrom(from.save_re_id_);
  save_re_zhen_.MergeFrom(from.save_re_zhen_);
  bhit_tids_.MergeFrom(from.bhit_tids_);
  buffs_.MergeFrom(from.buffs_);
  buffs_time_.MergeFrom(from.buffs_time_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000020u) {
      r_py_ = from.r_py_;
    }
    if (cached_has_bits & 0x00000040u) {
      re_tid_ = from.re_tid_;
    }
    if (cached_has_bits & 0x00000080u) {
      re_state_ = from.re_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      re_id_ = from.re_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      re_level_ = from.re_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      re_time_ = from.re_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_move_ = from.is_move_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_jf_ = from.is_jf_;
    }
    if (cached_has_bits & 0x00002000u) {
      re_x_ = from.re_x_;
    }
    if (cached_has_bits & 0x00004000u) {
      re_y_ = from.re_y_;
    }
    if (cached_has_bits & 0x00008000u) {
      re_r_ = from.re_r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      jf_sx_ = from.jf_sx_;
    }
    if (cached_has_bits & 0x00020000u) {
      jf_sy_ = from.jf_sy_;
    }
    if (cached_has_bits & 0x00040000u) {
      jf_xx_ = from.jf_xx_;
    }
    if (cached_has_bits & 0x00080000u) {
      jf_yy_ = from.jf_yy_;
    }
    if (cached_has_bits & 0x00100000u) {
      jf_speed_ = from.jf_speed_;
    }
    if (cached_has_bits & 0x00200000u) {
      jf_r_ = from.jf_r_;
    }
    if (cached_has_bits & 0x00400000u) {
      death_time_ = from.death_time_;
    }
    if (cached_has_bits & 0x00800000u) {
      rtime_ = from.rtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      attackr_ = from.attackr_;
    }
    if (cached_has_bits & 0x02000000u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_ai_ = from.is_ai_;
    }
    if (cached_has_bits & 0x08000000u) {
      eyerange_ = from.eyerange_;
    }
    if (cached_has_bits & 0x10000000u) {
      ai_state_ = from.ai_state_;
    }
    if (cached_has_bits & 0x20000000u) {
      nextpoint_x_ = from.nextpoint_x_;
    }
    if (cached_has_bits & 0x40000000u) {
      nextpoint_y_ = from.nextpoint_y_;
    }
    if (cached_has_bits & 0x80000000u) {
      totalzhen_ = from.totalzhen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_unit::CopyFrom(const msg_battle_unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_unit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void msg_battle_unit::Swap(msg_battle_unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_unit::InternalSwap(msg_battle_unit* other) {
  using std::swap;
  save_re_id_.InternalSwap(&other->save_re_id_);
  save_re_zhen_.InternalSwap(&other->save_re_zhen_);
  bhit_tids_.InternalSwap(&other->bhit_tids_);
  buffs_.InternalSwap(&other->buffs_);
  buffs_time_.InternalSwap(&other->buffs_time_);
  swap(guid_, other->guid_);
  swap(role_id_, other->role_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(r_, other->r_);
  swap(r_py_, other->r_py_);
  swap(re_tid_, other->re_tid_);
  swap(re_state_, other->re_state_);
  swap(re_id_, other->re_id_);
  swap(re_level_, other->re_level_);
  swap(re_time_, other->re_time_);
  swap(is_move_, other->is_move_);
  swap(is_jf_, other->is_jf_);
  swap(re_x_, other->re_x_);
  swap(re_y_, other->re_y_);
  swap(re_r_, other->re_r_);
  swap(jf_sx_, other->jf_sx_);
  swap(jf_sy_, other->jf_sy_);
  swap(jf_xx_, other->jf_xx_);
  swap(jf_yy_, other->jf_yy_);
  swap(jf_speed_, other->jf_speed_);
  swap(jf_r_, other->jf_r_);
  swap(death_time_, other->death_time_);
  swap(rtime_, other->rtime_);
  swap(attackr_, other->attackr_);
  swap(hp_, other->hp_);
  swap(is_ai_, other->is_ai_);
  swap(eyerange_, other->eyerange_);
  swap(ai_state_, other->ai_state_);
  swap(nextpoint_x_, other->nextpoint_x_);
  swap(nextpoint_y_, other->nextpoint_y_);
  swap(totalzhen_, other->totalzhen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_unit::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_boss::InitAsDefaultInstance() {
  ::protocol::game::_msg_battle_boss_default_instance_._instance.get_mutable()->unit_ = const_cast< ::protocol::game::msg_battle_unit*>(
      ::protocol::game::msg_battle_unit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_boss::kUnitFieldNumber;
const int msg_battle_boss::kAttackStateFieldNumber;
const int msg_battle_boss::kAttackZhenFieldNumber;
const int msg_battle_boss::kBossBirthTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_boss::msg_battle_boss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_boss.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_boss)
}
msg_battle_boss::msg_battle_boss(const msg_battle_boss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unit()) {
    unit_ = new ::protocol::game::msg_battle_unit(*from.unit_);
  } else {
    unit_ = NULL;
  }
  ::memcpy(&attack_state_, &from.attack_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&boss_birth_time_) -
    reinterpret_cast<char*>(&attack_state_)) + sizeof(boss_birth_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_boss)
}

void msg_battle_boss::SharedCtor() {
  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boss_birth_time_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(boss_birth_time_));
}

msg_battle_boss::~msg_battle_boss() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_boss)
  SharedDtor();
}

void msg_battle_boss::SharedDtor() {
  if (this != internal_default_instance()) delete unit_;
}

void msg_battle_boss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_boss::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_boss& msg_battle_boss::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_boss.base);
  return *internal_default_instance();
}


void msg_battle_boss::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_boss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_ != NULL);
    unit_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&attack_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boss_birth_time_) -
        reinterpret_cast<char*>(&attack_state_)) + sizeof(boss_birth_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_boss)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_battle_unit unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attack_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_attack_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attackZhen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_attackzhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackzhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 boss_birth_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_boss_birth_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_birth_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_boss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_boss)
  return false;
#undef DO_
}

void msg_battle_boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_boss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_unit unit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unit(), output);
  }

  // optional int32 attack_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attack_state(), output);
  }

  // optional int32 attackZhen = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attackzhen(), output);
  }

  // optional int32 boss_birth_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boss_birth_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_boss)
}

::google::protobuf::uint8* msg_battle_boss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_boss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_unit unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unit(), deterministic, target);
  }

  // optional int32 attack_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attack_state(), target);
  }

  // optional int32 attackZhen = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attackzhen(), target);
  }

  // optional int32 boss_birth_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boss_birth_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_boss)
  return target;
}

size_t msg_battle_boss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_boss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_battle_unit unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *unit_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional int32 attack_state = 2;
    if (has_attack_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_state());
    }

    // optional int32 attackZhen = 3;
    if (has_attackzhen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackzhen());
    }

    // optional int32 boss_birth_time = 4;
    if (has_boss_birth_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_birth_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_boss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_boss)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_boss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_boss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_boss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_boss)
    MergeFrom(*source);
  }
}

void msg_battle_boss::MergeFrom(const msg_battle_boss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_boss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_unit()->::protocol::game::msg_battle_unit::MergeFrom(from.unit());
    }
    if (cached_has_bits & 0x00000002u) {
      attack_state_ = from.attack_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      attackzhen_ = from.attackzhen_;
    }
    if (cached_has_bits & 0x00000008u) {
      boss_birth_time_ = from.boss_birth_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_boss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_boss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_boss::CopyFrom(const msg_battle_boss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_boss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_unit()) {
    if (!this->unit_->IsInitialized()) return false;
  }
  return true;
}

void msg_battle_boss::Swap(msg_battle_boss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_boss::InternalSwap(msg_battle_boss* other) {
  using std::swap;
  swap(unit_, other->unit_);
  swap(attack_state_, other->attack_state_);
  swap(attackzhen_, other->attackzhen_);
  swap(boss_birth_time_, other->boss_birth_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_boss::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_monster::InitAsDefaultInstance() {
  ::protocol::game::_msg_battle_monster_default_instance_._instance.get_mutable()->unit_ = const_cast< ::protocol::game::msg_battle_unit*>(
      ::protocol::game::msg_battle_unit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_monster::kUnitFieldNumber;
const int msg_battle_monster::kBirthXFieldNumber;
const int msg_battle_monster::kBirthYFieldNumber;
const int msg_battle_monster::kAttackGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_monster::msg_battle_monster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_monster.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_monster)
}
msg_battle_monster::msg_battle_monster(const msg_battle_monster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attack_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attack_guid()) {
    attack_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attack_guid_);
  }
  if (from.has_unit()) {
    unit_ = new ::protocol::game::msg_battle_unit(*from.unit_);
  } else {
    unit_ = NULL;
  }
  ::memcpy(&birth_x_, &from.birth_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&birth_y_) -
    reinterpret_cast<char*>(&birth_x_)) + sizeof(birth_y_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_monster)
}

void msg_battle_monster::SharedCtor() {
  attack_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birth_y_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(birth_y_));
}

msg_battle_monster::~msg_battle_monster() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_monster)
  SharedDtor();
}

void msg_battle_monster::SharedDtor() {
  attack_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unit_;
}

void msg_battle_monster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_monster::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_monster& msg_battle_monster::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_monster.base);
  return *internal_default_instance();
}


void msg_battle_monster::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_monster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      attack_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unit_ != NULL);
      unit_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&birth_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&birth_y_) -
        reinterpret_cast<char*>(&birth_x_)) + sizeof(birth_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_monster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_battle_unit unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_birth_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_birth_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string attack_guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attack_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attack_guid().data(), static_cast<int>(this->attack_guid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_monster.attack_guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_monster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_monster)
  return false;
#undef DO_
}

void msg_battle_monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_monster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_unit unit = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unit(), output);
  }

  // optional int32 birth_x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->birth_x(), output);
  }

  // optional int32 birth_y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->birth_y(), output);
  }

  // optional string attack_guid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attack_guid().data(), static_cast<int>(this->attack_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_monster.attack_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->attack_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_monster)
}

::google::protobuf::uint8* msg_battle_monster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_monster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_unit unit = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unit(), deterministic, target);
  }

  // optional int32 birth_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->birth_x(), target);
  }

  // optional int32 birth_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->birth_y(), target);
  }

  // optional string attack_guid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attack_guid().data(), static_cast<int>(this->attack_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_monster.attack_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attack_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_monster)
  return target;
}

size_t msg_battle_monster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_monster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_battle_unit unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *unit_);
  }
  // optional string attack_guid = 4;
  if (has_attack_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attack_guid());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 birth_x = 2;
    if (has_birth_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_x());
    }

    // optional int32 birth_y = 3;
    if (has_birth_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_monster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_monster)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_monster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_monster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_monster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_monster)
    MergeFrom(*source);
  }
}

void msg_battle_monster::MergeFrom(const msg_battle_monster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_monster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attack_guid();
      attack_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attack_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_unit()->::protocol::game::msg_battle_unit::MergeFrom(from.unit());
    }
    if (cached_has_bits & 0x00000004u) {
      birth_x_ = from.birth_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      birth_y_ = from.birth_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_monster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_monster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_monster::CopyFrom(const msg_battle_monster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_monster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_unit()) {
    if (!this->unit_->IsInitialized()) return false;
  }
  return true;
}

void msg_battle_monster::Swap(msg_battle_monster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_monster::InternalSwap(msg_battle_monster* other) {
  using std::swap;
  attack_guid_.Swap(&other->attack_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unit_, other->unit_);
  swap(birth_x_, other->birth_x_);
  swap(birth_y_, other->birth_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_monster::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_player::InitAsDefaultInstance() {
  ::protocol::game::_msg_battle_player_default_instance_._instance.get_mutable()->unit_ = const_cast< ::protocol::game::msg_battle_unit*>(
      ::protocol::game::msg_battle_unit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_player::kUnitFieldNumber;
const int msg_battle_player::kNameFieldNumber;
const int msg_battle_player::kSexFieldNumber;
const int msg_battle_player::kRoleLevelFieldNumber;
const int msg_battle_player::kCampFieldNumber;
const int msg_battle_player::kAttrTypeFieldNumber;
const int msg_battle_player::kAttrParam1FieldNumber;
const int msg_battle_player::kAttrParam2FieldNumber;
const int msg_battle_player::kAttrParam3FieldNumber;
const int msg_battle_player::kAvatarFieldNumber;
const int msg_battle_player::kCupFieldNumber;
const int msg_battle_player::kToukuangFieldNumber;
const int msg_battle_player::kFashionFieldNumber;
const int msg_battle_player::kRegionIdFieldNumber;
const int msg_battle_player::kNameColorFieldNumber;
const int msg_battle_player::kLevelFieldNumber;
const int msg_battle_player::kExpFieldNumber;
const int msg_battle_player::kScoreFieldNumber;
const int msg_battle_player::kScoreLevelFieldNumber;
const int msg_battle_player::kLattrValueFieldNumber;
const int msg_battle_player::kTalentIdFieldNumber;
const int msg_battle_player::kTalentLevelFieldNumber;
const int msg_battle_player::kTalentPointFieldNumber;
const int msg_battle_player::kDieFieldNumber;
const int msg_battle_player::kShaFieldNumber;
const int msg_battle_player::kLshaFieldNumber;
const int msg_battle_player::kMaxLshaFieldNumber;
const int msg_battle_player::kSkillIdFieldNumber;
const int msg_battle_player::kSkillLevelFieldNumber;
const int msg_battle_player::kRePreFieldNumber;
const int msg_battle_player::kRePreZhenFieldNumber;
const int msg_battle_player::kRePreZhen1FieldNumber;
const int msg_battle_player::kXuerenZhenFieldNumber;
const int msg_battle_player::kIsXuerenFieldNumber;
const int msg_battle_player::kCostFieldNumber;
const int msg_battle_player::kAttackStateFieldNumber;
const int msg_battle_player::kAttackZhenFieldNumber;
const int msg_battle_player::kBirthXFieldNumber;
const int msg_battle_player::kBirthYFieldNumber;
const int msg_battle_player::kAttackGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_player::msg_battle_player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_player)
}
msg_battle_player::msg_battle_player(const msg_battle_player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attr_type_(from.attr_type_),
      attr_param1_(from.attr_param1_),
      attr_param2_(from.attr_param2_),
      attr_param3_(from.attr_param3_),
      fashion_(from.fashion_),
      lattr_value_(from.lattr_value_),
      talent_id_(from.talent_id_),
      talent_level_(from.talent_level_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  attack_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attack_guid()) {
    attack_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attack_guid_);
  }
  if (from.has_unit()) {
    unit_ = new ::protocol::game::msg_battle_unit(*from.unit_);
  } else {
    unit_ = NULL;
  }
  ::memcpy(&sex_, &from.sex_,
    static_cast<size_t>(reinterpret_cast<char*>(&birth_x_) -
    reinterpret_cast<char*>(&sex_)) + sizeof(birth_x_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_player)
}

void msg_battle_player::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attack_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birth_x_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(birth_x_));
}

msg_battle_player::~msg_battle_player() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_player)
  SharedDtor();
}

void msg_battle_player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attack_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete unit_;
}

void msg_battle_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_player::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_player& msg_battle_player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_player.base);
  return *internal_default_instance();
}


void msg_battle_player::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  attr_type_.Clear();
  set_changed();
  attr_param1_.Clear();
  set_changed();
  attr_param2_.Clear();
  set_changed();
  attr_param3_.Clear();
  set_changed();
  fashion_.Clear();
  set_changed();
  lattr_value_.Clear();
  set_changed();
  talent_id_.Clear();
  set_changed();
  talent_level_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      attack_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(unit_ != NULL);
      unit_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&sex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cup_) -
        reinterpret_cast<char*>(&sex_)) + sizeof(cup_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&toukuang_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&talent_point_) -
        reinterpret_cast<char*>(&toukuang_)) + sizeof(talent_point_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&die_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&re_pre_) -
        reinterpret_cast<char*>(&die_)) + sizeof(re_pre_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&re_pre_zhen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&birth_x_) -
        reinterpret_cast<char*>(&re_pre_zhen_)) + sizeof(birth_x_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_battle_unit unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_player.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 role_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_role_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_camp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 attr_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_attr_type())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 attr_param1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56u, input, this->mutable_attr_param1())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr_param1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 attr_param2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_attr_param2())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr_param2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 attr_param3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_attr_param3())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr_param3())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 avatar = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_avatar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cup = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_cup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 toukuang = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_toukuang();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toukuang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fashion = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112u, input, this->mutable_fashion())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fashion())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 name_color = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_name_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exp = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score_level = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_score_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lattr_value = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272u, input, this->mutable_lattr_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattr_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 talent_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 280u, input, this->mutable_talent_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_talent_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 talent_level = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 288u, input, this->mutable_talent_level())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_talent_level())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 talent_point = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_talent_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 die = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_die();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sha = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_sha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lsha = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_lsha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lsha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_lsha = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_max_lsha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_lsha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skill_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_skill_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skill_level = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_pre = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_re_pre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_pre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_pre_zhen = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_re_pre_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_pre_zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_pre_zhen1 = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_re_pre_zhen1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_pre_zhen1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xueren_zhen = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_xueren_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xueren_zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_xueren = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_is_xueren();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_xueren_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attack_state = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_attack_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attackZhen = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          set_has_attackzhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackzhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_x = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          set_has_birth_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_y = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 824 & 0xFF */)) {
          set_has_birth_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string attack_guid = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attack_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attack_guid().data(), static_cast<int>(this->attack_guid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_player.attack_guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_player)
  return false;
#undef DO_
}

void msg_battle_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_unit unit = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unit(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 sex = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional int32 role_level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_level(), output);
  }

  // optional int32 camp = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp(), output);
  }

  // repeated int32 attr_type = 6;
  for (int i = 0, n = this->attr_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->attr_type(i), output);
  }

  // repeated int32 attr_param1 = 7;
  for (int i = 0, n = this->attr_param1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->attr_param1(i), output);
  }

  // repeated int32 attr_param2 = 8;
  for (int i = 0, n = this->attr_param2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->attr_param2(i), output);
  }

  // repeated int32 attr_param3 = 9;
  for (int i = 0, n = this->attr_param3_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->attr_param3(i), output);
  }

  // optional int32 avatar = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->avatar(), output);
  }

  // optional int32 cup = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cup(), output);
  }

  // optional int32 toukuang = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->toukuang(), output);
  }

  // repeated int32 fashion = 14;
  for (int i = 0, n = this->fashion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->fashion(i), output);
  }

  // optional int32 region_id = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->region_id(), output);
  }

  // optional int32 name_color = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->name_color(), output);
  }

  // optional int32 level = 30;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->level(), output);
  }

  // optional int32 exp = 31;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->exp(), output);
  }

  // optional int32 score = 32;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->score(), output);
  }

  // optional int32 score_level = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->score_level(), output);
  }

  // repeated int32 lattr_value = 34;
  for (int i = 0, n = this->lattr_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->lattr_value(i), output);
  }

  // repeated int32 talent_id = 35;
  for (int i = 0, n = this->talent_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      35, this->talent_id(i), output);
  }

  // repeated int32 talent_level = 36;
  for (int i = 0, n = this->talent_level_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      36, this->talent_level(i), output);
  }

  // optional int32 talent_point = 37;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->talent_point(), output);
  }

  // optional int32 die = 38;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->die(), output);
  }

  // optional int32 sha = 39;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->sha(), output);
  }

  // optional int32 lsha = 40;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->lsha(), output);
  }

  // optional int32 max_lsha = 41;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->max_lsha(), output);
  }

  // optional int32 skill_id = 50;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->skill_id(), output);
  }

  // optional int32 skill_level = 51;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->skill_level(), output);
  }

  // optional int32 re_pre = 52;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->re_pre(), output);
  }

  // optional int32 re_pre_zhen = 53;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->re_pre_zhen(), output);
  }

  // optional int32 re_pre_zhen1 = 54;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->re_pre_zhen1(), output);
  }

  // optional int32 xueren_zhen = 55;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->xueren_zhen(), output);
  }

  // optional bool is_xueren = 56;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->is_xueren(), output);
  }

  // optional int32 cost = 57;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->cost(), output);
  }

  // optional int32 attack_state = 100;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->attack_state(), output);
  }

  // optional int32 attackZhen = 101;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->attackzhen(), output);
  }

  // optional int32 birth_x = 102;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->birth_x(), output);
  }

  // optional int32 birth_y = 103;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->birth_y(), output);
  }

  // optional string attack_guid = 104;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attack_guid().data(), static_cast<int>(this->attack_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_player.attack_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      104, this->attack_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_player)
}

::google::protobuf::uint8* msg_battle_player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_unit unit = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unit(), deterministic, target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 sex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional int32 role_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_level(), target);
  }

  // optional int32 camp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camp(), target);
  }

  // repeated int32 attr_type = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->attr_type_, target);

  // repeated int32 attr_param1 = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(7, this->attr_param1_, target);

  // repeated int32 attr_param2 = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->attr_param2_, target);

  // repeated int32 attr_param3 = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(9, this->attr_param3_, target);

  // optional int32 avatar = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->avatar(), target);
  }

  // optional int32 cup = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cup(), target);
  }

  // optional int32 toukuang = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->toukuang(), target);
  }

  // repeated int32 fashion = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(14, this->fashion_, target);

  // optional int32 region_id = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->region_id(), target);
  }

  // optional int32 name_color = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->name_color(), target);
  }

  // optional int32 level = 30;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->level(), target);
  }

  // optional int32 exp = 31;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->exp(), target);
  }

  // optional int32 score = 32;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->score(), target);
  }

  // optional int32 score_level = 33;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->score_level(), target);
  }

  // repeated int32 lattr_value = 34;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(34, this->lattr_value_, target);

  // repeated int32 talent_id = 35;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(35, this->talent_id_, target);

  // repeated int32 talent_level = 36;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(36, this->talent_level_, target);

  // optional int32 talent_point = 37;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->talent_point(), target);
  }

  // optional int32 die = 38;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->die(), target);
  }

  // optional int32 sha = 39;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->sha(), target);
  }

  // optional int32 lsha = 40;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->lsha(), target);
  }

  // optional int32 max_lsha = 41;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->max_lsha(), target);
  }

  // optional int32 skill_id = 50;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->skill_id(), target);
  }

  // optional int32 skill_level = 51;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->skill_level(), target);
  }

  // optional int32 re_pre = 52;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->re_pre(), target);
  }

  // optional int32 re_pre_zhen = 53;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->re_pre_zhen(), target);
  }

  // optional int32 re_pre_zhen1 = 54;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->re_pre_zhen1(), target);
  }

  // optional int32 xueren_zhen = 55;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->xueren_zhen(), target);
  }

  // optional bool is_xueren = 56;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->is_xueren(), target);
  }

  // optional int32 cost = 57;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->cost(), target);
  }

  // optional int32 attack_state = 100;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->attack_state(), target);
  }

  // optional int32 attackZhen = 101;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->attackzhen(), target);
  }

  // optional int32 birth_x = 102;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->birth_x(), target);
  }

  // optional int32 birth_y = 103;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->birth_y(), target);
  }

  // optional string attack_guid = 104;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attack_guid().data(), static_cast<int>(this->attack_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_player.attack_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        104, this->attack_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_player)
  return target;
}

size_t msg_battle_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_battle_unit unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *unit_);
  }
  // repeated int32 attr_type = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->attr_type_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attr_type_size());
    total_size += data_size;
  }

  // repeated int32 attr_param1 = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->attr_param1_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attr_param1_size());
    total_size += data_size;
  }

  // repeated int32 attr_param2 = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->attr_param2_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attr_param2_size());
    total_size += data_size;
  }

  // repeated int32 attr_param3 = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->attr_param3_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attr_param3_size());
    total_size += data_size;
  }

  // repeated int32 fashion = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fashion_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fashion_size());
    total_size += data_size;
  }

  // repeated int32 lattr_value = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->lattr_value_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->lattr_value_size());
    total_size += data_size;
  }

  // repeated int32 talent_id = 35;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->talent_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->talent_id_size());
    total_size += data_size;
  }

  // repeated int32 talent_level = 36;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->talent_level_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->talent_level_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string attack_guid = 104;
    if (has_attack_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attack_guid());
    }

  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 role_level = 4;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }

    // optional int32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 avatar = 10;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatar());
    }

    // optional int32 cup = 12;
    if (has_cup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cup());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 toukuang = 13;
    if (has_toukuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toukuang());
    }

    // optional int32 region_id = 15;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional int32 name_color = 16;
    if (has_name_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_color());
    }

    // optional int32 level = 30;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 31;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 score = 32;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 score_level = 33;
    if (has_score_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_level());
    }

    // optional int32 talent_point = 37;
    if (has_talent_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_point());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 die = 38;
    if (has_die()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die());
    }

    // optional int32 sha = 39;
    if (has_sha()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sha());
    }

    // optional int32 lsha = 40;
    if (has_lsha()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lsha());
    }

    // optional int32 birth_y = 103;
    if (has_birth_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_y());
    }

    // optional int32 max_lsha = 41;
    if (has_max_lsha()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_lsha());
    }

    // optional int32 skill_id = 50;
    if (has_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_level = 51;
    if (has_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional int32 re_pre = 52;
    if (has_re_pre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_pre());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 re_pre_zhen = 53;
    if (has_re_pre_zhen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_pre_zhen());
    }

    // optional int32 re_pre_zhen1 = 54;
    if (has_re_pre_zhen1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_pre_zhen1());
    }

    // optional int32 xueren_zhen = 55;
    if (has_xueren_zhen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xueren_zhen());
    }

    // optional bool is_xueren = 56;
    if (has_is_xueren()) {
      total_size += 2 + 1;
    }

    // optional int32 cost = 57;
    if (has_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 attack_state = 100;
    if (has_attack_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_state());
    }

    // optional int32 attackZhen = 101;
    if (has_attackzhen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackzhen());
    }

    // optional int32 birth_x = 102;
    if (has_birth_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_x());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_player)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_player)
    MergeFrom(*source);
  }
}

void msg_battle_player::MergeFrom(const msg_battle_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_type_.MergeFrom(from.attr_type_);
  attr_param1_.MergeFrom(from.attr_param1_);
  attr_param2_.MergeFrom(from.attr_param2_);
  attr_param3_.MergeFrom(from.attr_param3_);
  fashion_.MergeFrom(from.fashion_);
  lattr_value_.MergeFrom(from.lattr_value_);
  talent_id_.MergeFrom(from.talent_id_);
  talent_level_.MergeFrom(from.talent_level_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_attack_guid();
      attack_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attack_guid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_unit()->::protocol::game::msg_battle_unit::MergeFrom(from.unit());
    }
    if (cached_has_bits & 0x00000008u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000010u) {
      role_level_ = from.role_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      camp_ = from.camp_;
    }
    if (cached_has_bits & 0x00000040u) {
      avatar_ = from.avatar_;
    }
    if (cached_has_bits & 0x00000080u) {
      cup_ = from.cup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      toukuang_ = from.toukuang_;
    }
    if (cached_has_bits & 0x00000200u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      name_color_ = from.name_color_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00001000u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00004000u) {
      score_level_ = from.score_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      talent_point_ = from.talent_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      die_ = from.die_;
    }
    if (cached_has_bits & 0x00020000u) {
      sha_ = from.sha_;
    }
    if (cached_has_bits & 0x00040000u) {
      lsha_ = from.lsha_;
    }
    if (cached_has_bits & 0x00080000u) {
      birth_y_ = from.birth_y_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_lsha_ = from.max_lsha_;
    }
    if (cached_has_bits & 0x00200000u) {
      skill_id_ = from.skill_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00800000u) {
      re_pre_ = from.re_pre_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      re_pre_zhen_ = from.re_pre_zhen_;
    }
    if (cached_has_bits & 0x02000000u) {
      re_pre_zhen1_ = from.re_pre_zhen1_;
    }
    if (cached_has_bits & 0x04000000u) {
      xueren_zhen_ = from.xueren_zhen_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_xueren_ = from.is_xueren_;
    }
    if (cached_has_bits & 0x10000000u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x20000000u) {
      attack_state_ = from.attack_state_;
    }
    if (cached_has_bits & 0x40000000u) {
      attackzhen_ = from.attackzhen_;
    }
    if (cached_has_bits & 0x80000000u) {
      birth_x_ = from.birth_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_player::CopyFrom(const msg_battle_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_unit()) {
    if (!this->unit_->IsInitialized()) return false;
  }
  return true;
}

void msg_battle_player::Swap(msg_battle_player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_player::InternalSwap(msg_battle_player* other) {
  using std::swap;
  attr_type_.InternalSwap(&other->attr_type_);
  attr_param1_.InternalSwap(&other->attr_param1_);
  attr_param2_.InternalSwap(&other->attr_param2_);
  attr_param3_.InternalSwap(&other->attr_param3_);
  fashion_.InternalSwap(&other->fashion_);
  lattr_value_.InternalSwap(&other->lattr_value_);
  talent_id_.InternalSwap(&other->talent_id_);
  talent_level_.InternalSwap(&other->talent_level_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attack_guid_.Swap(&other->attack_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unit_, other->unit_);
  swap(sex_, other->sex_);
  swap(role_level_, other->role_level_);
  swap(camp_, other->camp_);
  swap(avatar_, other->avatar_);
  swap(cup_, other->cup_);
  swap(toukuang_, other->toukuang_);
  swap(region_id_, other->region_id_);
  swap(name_color_, other->name_color_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(score_, other->score_);
  swap(score_level_, other->score_level_);
  swap(talent_point_, other->talent_point_);
  swap(die_, other->die_);
  swap(sha_, other->sha_);
  swap(lsha_, other->lsha_);
  swap(birth_y_, other->birth_y_);
  swap(max_lsha_, other->max_lsha_);
  swap(skill_id_, other->skill_id_);
  swap(skill_level_, other->skill_level_);
  swap(re_pre_, other->re_pre_);
  swap(re_pre_zhen_, other->re_pre_zhen_);
  swap(re_pre_zhen1_, other->re_pre_zhen1_);
  swap(xueren_zhen_, other->xueren_zhen_);
  swap(is_xueren_, other->is_xueren_);
  swap(cost_, other->cost_);
  swap(attack_state_, other->attack_state_);
  swap(attackzhen_, other->attackzhen_);
  swap(birth_x_, other->birth_x_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_player::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_effect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_effect::kTidFieldNumber;
const int msg_battle_effect::kReTidFieldNumber;
const int msg_battle_effect::kIdFieldNumber;
const int msg_battle_effect::kSxFieldNumber;
const int msg_battle_effect::kSyFieldNumber;
const int msg_battle_effect::kXFieldNumber;
const int msg_battle_effect::kYFieldNumber;
const int msg_battle_effect::kXxFieldNumber;
const int msg_battle_effect::kYyFieldNumber;
const int msg_battle_effect::kRFieldNumber;
const int msg_battle_effect::kReGuidFieldNumber;
const int msg_battle_effect::kReUrFieldNumber;
const int msg_battle_effect::kHitGuidsFieldNumber;
const int msg_battle_effect::kTimeFieldNumber;
const int msg_battle_effect::kDdTimeFieldNumber;
const int msg_battle_effect::kStateFieldNumber;
const int msg_battle_effect::kLenFieldNumber;
const int msg_battle_effect::kPreZhenFieldNumber;
const int msg_battle_effect::kCampFieldNumber;
const int msg_battle_effect::kFollowGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_effect::msg_battle_effect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_effect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_effect)
}
msg_battle_effect::msg_battle_effect(const msg_battle_effect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hit_guids_(from.hit_guids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  re_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_re_guid()) {
    re_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.re_guid_);
  }
  follow_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_follow_guid()) {
    follow_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.follow_guid_);
  }
  ::memcpy(&tid_, &from.tid_,
    static_cast<size_t>(reinterpret_cast<char*>(&camp_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(camp_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_effect)
}

void msg_battle_effect::SharedCtor() {
  re_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  follow_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camp_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(camp_));
}

msg_battle_effect::~msg_battle_effect() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_effect)
  SharedDtor();
}

void msg_battle_effect::SharedDtor() {
  re_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  follow_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void msg_battle_effect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_effect::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_effect& msg_battle_effect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_effect.base);
  return *internal_default_instance();
}


void msg_battle_effect::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_effect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  hit_guids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      re_guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      follow_guid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&tid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x_) -
        reinterpret_cast<char*>(&tid_)) + sizeof(x_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&y_)) + sizeof(state_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camp_) -
        reinterpret_cast<char*>(&len_)) + sizeof(camp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_effect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_re_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xx = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_xx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 yy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_yy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 r = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string re_guid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_re_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->re_guid().data(), static_cast<int>(this->re_guid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_effect.re_guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 re_ur = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_re_ur();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &re_ur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string hit_guids = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hit_guids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hit_guids(this->hit_guids_size() - 1).data(),
            static_cast<int>(this->hit_guids(this->hit_guids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_effect.hit_guids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dd_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_dd_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dd_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 len = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pre_zhen = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_pre_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camp = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_camp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string follow_guid = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_follow_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->follow_guid().data(), static_cast<int>(this->follow_guid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_effect.follow_guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_effect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_effect)
  return false;
#undef DO_
}

void msg_battle_effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_effect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 re_tid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->re_tid(), output);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 sx = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sx(), output);
  }

  // optional int32 sy = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sy(), output);
  }

  // optional int32 x = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->x(), output);
  }

  // optional int32 y = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->y(), output);
  }

  // optional int32 xx = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xx(), output);
  }

  // optional int32 yy = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->yy(), output);
  }

  // optional int32 r = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->r(), output);
  }

  // optional string re_guid = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->re_guid().data(), static_cast<int>(this->re_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_effect.re_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->re_guid(), output);
  }

  // optional int32 re_ur = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->re_ur(), output);
  }

  // repeated string hit_guids = 14;
  for (int i = 0, n = this->hit_guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hit_guids(i).data(), static_cast<int>(this->hit_guids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_effect.hit_guids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->hit_guids(i), output);
  }

  // optional int32 time = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->time(), output);
  }

  // optional int32 dd_time = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dd_time(), output);
  }

  // optional int32 state = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->state(), output);
  }

  // optional int32 len = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->len(), output);
  }

  // optional int32 pre_zhen = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->pre_zhen(), output);
  }

  // optional int32 camp = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->camp(), output);
  }

  // optional string follow_guid = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->follow_guid().data(), static_cast<int>(this->follow_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_effect.follow_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->follow_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_effect)
}

::google::protobuf::uint8* msg_battle_effect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_effect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 re_tid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->re_tid(), target);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 sx = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sx(), target);
  }

  // optional int32 sy = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sy(), target);
  }

  // optional int32 x = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->x(), target);
  }

  // optional int32 y = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->y(), target);
  }

  // optional int32 xx = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xx(), target);
  }

  // optional int32 yy = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->yy(), target);
  }

  // optional int32 r = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->r(), target);
  }

  // optional string re_guid = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->re_guid().data(), static_cast<int>(this->re_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_effect.re_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->re_guid(), target);
  }

  // optional int32 re_ur = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->re_ur(), target);
  }

  // repeated string hit_guids = 14;
  for (int i = 0, n = this->hit_guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hit_guids(i).data(), static_cast<int>(this->hit_guids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_effect.hit_guids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->hit_guids(i), target);
  }

  // optional int32 time = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->time(), target);
  }

  // optional int32 dd_time = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dd_time(), target);
  }

  // optional int32 state = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->state(), target);
  }

  // optional int32 len = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->len(), target);
  }

  // optional int32 pre_zhen = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->pre_zhen(), target);
  }

  // optional int32 camp = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->camp(), target);
  }

  // optional string follow_guid = 21;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->follow_guid().data(), static_cast<int>(this->follow_guid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_effect.follow_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->follow_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_effect)
  return target;
}

size_t msg_battle_effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_effect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 tid = 1;
  if (has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }
  // repeated string hit_guids = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hit_guids_size());
  for (int i = 0, n = this->hit_guids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hit_guids(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string re_guid = 12;
    if (has_re_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->re_guid());
    }

    // optional string follow_guid = 21;
    if (has_follow_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->follow_guid());
    }

  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 re_tid = 2;
    if (has_re_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_tid());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 sx = 4;
    if (has_sx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sx());
    }

    // optional int32 sy = 5;
    if (has_sy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sy());
    }

    // optional int32 x = 6;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 y = 7;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 xx = 8;
    if (has_xx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xx());
    }

    // optional int32 yy = 9;
    if (has_yy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yy());
    }

    // optional int32 r = 10;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 re_ur = 13;
    if (has_re_ur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->re_ur());
    }

    // optional int32 time = 15;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dd_time = 16;
    if (has_dd_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dd_time());
    }

    // optional int32 state = 17;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 len = 18;
    if (has_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional int32 pre_zhen = 19;
    if (has_pre_zhen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_zhen());
    }

    // optional int32 camp = 20;
    if (has_camp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_effect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_effect)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_effect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_effect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_effect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_effect)
    MergeFrom(*source);
  }
}

void msg_battle_effect::MergeFrom(const msg_battle_effect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_effect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_guids_.MergeFrom(from.hit_guids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_re_guid();
      re_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.re_guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_follow_guid();
      follow_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.follow_guid_);
    }
    if (cached_has_bits & 0x00000004u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000008u) {
      re_tid_ = from.re_tid_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      sx_ = from.sx_;
    }
    if (cached_has_bits & 0x00000040u) {
      sy_ = from.sy_;
    }
    if (cached_has_bits & 0x00000080u) {
      x_ = from.x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000200u) {
      xx_ = from.xx_;
    }
    if (cached_has_bits & 0x00000400u) {
      yy_ = from.yy_;
    }
    if (cached_has_bits & 0x00000800u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00001000u) {
      re_ur_ = from.re_ur_;
    }
    if (cached_has_bits & 0x00002000u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00004000u) {
      dd_time_ = from.dd_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00020000u) {
      pre_zhen_ = from.pre_zhen_;
    }
    if (cached_has_bits & 0x00040000u) {
      camp_ = from.camp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_effect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_effect::CopyFrom(const msg_battle_effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_effect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void msg_battle_effect::Swap(msg_battle_effect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_effect::InternalSwap(msg_battle_effect* other) {
  using std::swap;
  hit_guids_.InternalSwap(CastToBase(&other->hit_guids_));
  re_guid_.Swap(&other->re_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  follow_guid_.Swap(&other->follow_guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tid_, other->tid_);
  swap(re_tid_, other->re_tid_);
  swap(id_, other->id_);
  swap(sx_, other->sx_);
  swap(sy_, other->sy_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(xx_, other->xx_);
  swap(yy_, other->yy_);
  swap(r_, other->r_);
  swap(re_ur_, other->re_ur_);
  swap(time_, other->time_);
  swap(dd_time_, other->dd_time_);
  swap(state_, other->state_);
  swap(len_, other->len_);
  swap(pre_zhen_, other->pre_zhen_);
  swap(camp_, other->camp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_effect::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_item_base::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_item_base::kTidFieldNumber;
const int msg_battle_item_base::kIdFieldNumber;
const int msg_battle_item_base::kXFieldNumber;
const int msg_battle_item_base::kYFieldNumber;
const int msg_battle_item_base::kParamFieldNumber;
const int msg_battle_item_base::kZhenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_item_base::msg_battle_item_base()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item_base.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_item_base)
}
msg_battle_item_base::msg_battle_item_base(const msg_battle_item_base& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tid_, &from.tid_,
    static_cast<size_t>(reinterpret_cast<char*>(&zhen_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(zhen_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_item_base)
}

void msg_battle_item_base::SharedCtor() {
  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zhen_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(zhen_));
}

msg_battle_item_base::~msg_battle_item_base() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_item_base)
  SharedDtor();
}

void msg_battle_item_base::SharedDtor() {
}

void msg_battle_item_base::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_item_base::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_item_base& msg_battle_item_base::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item_base.base);
  return *internal_default_instance();
}


void msg_battle_item_base::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_item_base)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&tid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zhen_) -
        reinterpret_cast<char*>(&tid_)) + sizeof(zhen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_item_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_item_base)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zhen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_item_base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_item_base)
  return false;
#undef DO_
}

void msg_battle_item_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_item_base)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional int32 param = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }

  // optional int32 zhen = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zhen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_item_base)
}

::google::protobuf::uint8* msg_battle_item_base::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_item_base)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // optional int32 param = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }

  // optional int32 zhen = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zhen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_item_base)
  return target;
}

size_t msg_battle_item_base::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_item_base)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 tid = 1;
  if (has_tid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }
  if (_has_bits_[0 / 32] & 62u) {
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int32 zhen = 6;
    if (has_zhen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhen());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_item_base::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_item_base)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_item_base* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_item_base>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_item_base)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_item_base)
    MergeFrom(*source);
  }
}

void msg_battle_item_base::MergeFrom(const msg_battle_item_base& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_item_base)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      param_ = from.param_;
    }
    if (cached_has_bits & 0x00000020u) {
      zhen_ = from.zhen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_item_base::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_item_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_item_base::CopyFrom(const msg_battle_item_base& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_item_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_item_base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void msg_battle_item_base::Swap(msg_battle_item_base* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_item_base::InternalSwap(msg_battle_item_base* other) {
  using std::swap;
  swap(tid_, other->tid_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(param_, other->param_);
  swap(zhen_, other->zhen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_item_base::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_item::InitAsDefaultInstance() {
  ::protocol::game::_msg_battle_item_default_instance_._instance.get_mutable()->item_ = const_cast< ::protocol::game::msg_battle_item_base*>(
      ::protocol::game::msg_battle_item_base::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_item::kItemFieldNumber;
const int msg_battle_item::kBirthPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_item::msg_battle_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_item)
}
msg_battle_item::msg_battle_item(const msg_battle_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::protocol::game::msg_battle_item_base(*from.item_);
  } else {
    item_ = NULL;
  }
  birth_pos_ = from.birth_pos_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_item)
}

void msg_battle_item::SharedCtor() {
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birth_pos_) -
      reinterpret_cast<char*>(&item_)) + sizeof(birth_pos_));
}

msg_battle_item::~msg_battle_item() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_item)
  SharedDtor();
}

void msg_battle_item::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void msg_battle_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_item::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_item& msg_battle_item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_item.base);
  return *internal_default_instance();
}


void msg_battle_item::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_ != NULL);
    item_->Clear();
  }
  set_changed();
  birth_pos_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_battle_item_base item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_birth_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_item)
  return false;
#undef DO_
}

void msg_battle_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_item_base item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_item(), output);
  }

  // optional int32 birth_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->birth_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_item)
}

::google::protobuf::uint8* msg_battle_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_item_base item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_item(), deterministic, target);
  }

  // optional int32 birth_pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->birth_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_item)
  return target;
}

size_t msg_battle_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_battle_item_base item = 1;
  if (has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }
  // optional int32 birth_pos = 2;
  if (has_birth_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->birth_pos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_item)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_item)
    MergeFrom(*source);
  }
}

void msg_battle_item::MergeFrom(const msg_battle_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_item()->::protocol::game::msg_battle_item_base::MergeFrom(from.item());
    }
    if (cached_has_bits & 0x00000002u) {
      birth_pos_ = from.birth_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_item::CopyFrom(const msg_battle_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_item()) {
    if (!this->item_->IsInitialized()) return false;
  }
  return true;
}

void msg_battle_item::Swap(msg_battle_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_item::InternalSwap(msg_battle_item* other) {
  using std::swap;
  swap(item_, other->item_);
  swap(birth_pos_, other->birth_pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_item::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_op::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_op::kZhenFieldNumber;
const int msg_battle_op::kOpcodeFieldNumber;
const int msg_battle_op::kGuidFieldNumber;
const int msg_battle_op::kParamIntsFieldNumber;
const int msg_battle_op::kParamStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_op::msg_battle_op()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_op.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_op)
}
msg_battle_op::msg_battle_op(const msg_battle_op& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      param_ints_(from.param_ints_),
      param_strings_(from.param_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zhen_, &from.zhen_,
    static_cast<size_t>(reinterpret_cast<char*>(&guid_) -
    reinterpret_cast<char*>(&zhen_)) + sizeof(guid_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_op)
}

void msg_battle_op::SharedCtor() {
  ::memset(&zhen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guid_) -
      reinterpret_cast<char*>(&zhen_)) + sizeof(guid_));
}

msg_battle_op::~msg_battle_op() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_op)
  SharedDtor();
}

void msg_battle_op::SharedDtor() {
}

void msg_battle_op::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_op::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_op& msg_battle_op::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_op.base);
  return *internal_default_instance();
}


void msg_battle_op::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_op)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  param_ints_.Clear();
  set_changed();
  param_strings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&zhen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guid_) -
        reinterpret_cast<char*>(&zhen_)) + sizeof(guid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_op::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_op)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zhen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 param_ints = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_param_ints())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string param_strings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_strings(this->param_strings_size() - 1).data(),
            static_cast<int>(this->param_strings(this->param_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_battle_op.param_strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_op)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_op)
  return false;
#undef DO_
}

void msg_battle_op::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_op)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 zhen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zhen(), output);
  }

  // required int32 opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opcode(), output);
  }

  // required uint64 guid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated int32 param_ints = 4;
  for (int i = 0, n = this->param_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->param_ints(i), output);
  }

  // repeated string param_strings = 5;
  for (int i = 0, n = this->param_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_strings(i).data(), static_cast<int>(this->param_strings(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_op.param_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->param_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_op)
}

::google::protobuf::uint8* msg_battle_op::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_op)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 zhen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zhen(), target);
  }

  // required int32 opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opcode(), target);
  }

  // required uint64 guid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated int32 param_ints = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->param_ints_, target);

  // repeated string param_strings = 5;
  for (int i = 0, n = this->param_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_strings(i).data(), static_cast<int>(this->param_strings(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_battle_op.param_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->param_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_op)
  return target;
}

size_t msg_battle_op::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.msg_battle_op)
  size_t total_size = 0;

  if (has_opcode()) {
    // required int32 opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  if (has_guid()) {
    // required uint64 guid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  return total_size;
}
size_t msg_battle_op::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_op)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());

    // required uint64 guid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 param_ints = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->param_ints_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->param_ints_size());
    total_size += data_size;
  }

  // repeated string param_strings = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->param_strings_size());
  for (int i = 0, n = this->param_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param_strings(i));
  }

  // optional int32 zhen = 1;
  if (has_zhen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_op::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_op)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_op* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_op>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_op)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_op)
    MergeFrom(*source);
  }
}

void msg_battle_op::MergeFrom(const msg_battle_op& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_op)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_ints_.MergeFrom(from.param_ints_);
  param_strings_.MergeFrom(from.param_strings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      zhen_ = from.zhen_;
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      guid_ = from.guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_op::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_op::CopyFrom(const msg_battle_op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_op::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void msg_battle_op::Swap(msg_battle_op* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_op::InternalSwap(msg_battle_op* other) {
  using std::swap;
  param_ints_.InternalSwap(&other->param_ints_);
  param_strings_.InternalSwap(CastToBase(&other->param_strings_));
  swap(zhen_, other->zhen_);
  swap(opcode_, other->opcode_);
  swap(guid_, other->guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_op::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_state::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_state::kZhenFieldNumber;
const int msg_battle_state::kBossFieldNumber;
const int msg_battle_state::kMonstersFieldNumber;
const int msg_battle_state::kPlayersFieldNumber;
const int msg_battle_state::kEffectsFieldNumber;
const int msg_battle_state::kBasesFieldNumber;
const int msg_battle_state::kItemsFieldNumber;
const int msg_battle_state::kTidFieldNumber;
const int msg_battle_state::kInitItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_state::msg_battle_state()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_state.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_state)
}
msg_battle_state::msg_battle_state(const msg_battle_state& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      boss_(from.boss_),
      monsters_(from.monsters_),
      players_(from.players_),
      effects_(from.effects_),
      bases_(from.bases_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zhen_, &from.zhen_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_item_) -
    reinterpret_cast<char*>(&zhen_)) + sizeof(init_item_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_state)
}

void msg_battle_state::SharedCtor() {
  ::memset(&zhen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_item_) -
      reinterpret_cast<char*>(&zhen_)) + sizeof(init_item_));
}

msg_battle_state::~msg_battle_state() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_state)
  SharedDtor();
}

void msg_battle_state::SharedDtor() {
}

void msg_battle_state::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_state::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_state& msg_battle_state::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_state.base);
  return *internal_default_instance();
}


void msg_battle_state::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_state)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boss_.Clear();
  monsters_.Clear();
  players_.Clear();
  effects_.Clear();
  bases_.Clear();
  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&zhen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_item_) -
        reinterpret_cast<char*>(&zhen_)) + sizeof(init_item_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_state)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zhen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_boss boss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_boss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_monster monsters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_monsters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_player players = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_effect effects = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_item_base bases = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_item items = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool init_item = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_init_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &init_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_state)
  return false;
#undef DO_
}

void msg_battle_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_state)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 zhen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zhen(), output);
  }

  // repeated .protocol.game.msg_battle_boss boss = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boss_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->boss(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.game.msg_battle_monster monsters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monsters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->monsters(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.game.msg_battle_player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->players(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.game.msg_battle_effect effects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->effects(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.game.msg_battle_item_base bases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->bases(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.game.msg_battle_item items = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->items(static_cast<int>(i)),
      output);
  }

  // required int32 tid = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tid(), output);
  }

  // required bool init_item = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->init_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_state)
}

::google::protobuf::uint8* msg_battle_state::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_state)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 zhen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zhen(), target);
  }

  // repeated .protocol.game.msg_battle_boss boss = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boss_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->boss(static_cast<int>(i)), deterministic, target);
  }

  // repeated .protocol.game.msg_battle_monster monsters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->monsters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->monsters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .protocol.game.msg_battle_player players = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->players(static_cast<int>(i)), deterministic, target);
  }

  // repeated .protocol.game.msg_battle_effect effects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->effects(static_cast<int>(i)), deterministic, target);
  }

  // repeated .protocol.game.msg_battle_item_base bases = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->bases(static_cast<int>(i)), deterministic, target);
  }

  // repeated .protocol.game.msg_battle_item items = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->items(static_cast<int>(i)), deterministic, target);
  }

  // required int32 tid = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tid(), target);
  }

  // required bool init_item = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->init_item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_state)
  return target;
}

size_t msg_battle_state::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.msg_battle_state)
  size_t total_size = 0;

  if (has_zhen()) {
    // required int32 zhen = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());
  }

  if (has_tid()) {
    // required int32 tid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  if (has_init_item()) {
    // required bool init_item = 9;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t msg_battle_state::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_state)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 zhen = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());

    // required int32 tid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());

    // required bool init_item = 9;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.game.msg_battle_boss boss = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->boss_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boss(static_cast<int>(i)));
    }
  }

  // repeated .protocol.game.msg_battle_monster monsters = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->monsters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->monsters(static_cast<int>(i)));
    }
  }

  // repeated .protocol.game.msg_battle_player players = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated .protocol.game.msg_battle_effect effects = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->effects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effects(static_cast<int>(i)));
    }
  }

  // repeated .protocol.game.msg_battle_item_base bases = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->bases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bases(static_cast<int>(i)));
    }
  }

  // repeated .protocol.game.msg_battle_item items = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_state::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_state)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_state* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_state>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_state)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_state)
    MergeFrom(*source);
  }
}

void msg_battle_state::MergeFrom(const msg_battle_state& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_state)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boss_.MergeFrom(from.boss_);
  monsters_.MergeFrom(from.monsters_);
  players_.MergeFrom(from.players_);
  effects_.MergeFrom(from.effects_);
  bases_.MergeFrom(from.bases_);
  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      zhen_ = from.zhen_;
    }
    if (cached_has_bits & 0x00000002u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000004u) {
      init_item_ = from.init_item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_state::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_state::CopyFrom(const msg_battle_state& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->boss())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->monsters())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effects())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bases())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void msg_battle_state::Swap(msg_battle_state* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_state::InternalSwap(msg_battle_state* other) {
  using std::swap;
  CastToBase(&boss_)->InternalSwap(CastToBase(&other->boss_));
  CastToBase(&monsters_)->InternalSwap(CastToBase(&other->monsters_));
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  CastToBase(&effects_)->InternalSwap(CastToBase(&other->effects_));
  CastToBase(&bases_)->InternalSwap(CastToBase(&other->bases_));
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(zhen_, other->zhen_);
  swap(tid_, other->tid_);
  swap(init_item_, other->init_item_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_state::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_battle_state::InitAsDefaultInstance() {
  ::protocol::game::_cmsg_battle_state_default_instance_._instance.get_mutable()->state_ = const_cast< ::protocol::game::msg_battle_state*>(
      ::protocol::game::msg_battle_state::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_battle_state::kGuidFieldNumber;
const int cmsg_battle_state::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_battle_state::cmsg_battle_state()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_cmsg_battle_state.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_battle_state)
}
cmsg_battle_state::cmsg_battle_state(const cmsg_battle_state& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::protocol::game::msg_battle_state(*from.state_);
  } else {
    state_ = NULL;
  }
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_battle_state)
}

void cmsg_battle_state::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(guid_));
}

cmsg_battle_state::~cmsg_battle_state() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_battle_state)
  SharedDtor();
}

void cmsg_battle_state::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void cmsg_battle_state::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_battle_state::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_battle_state& cmsg_battle_state::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_cmsg_battle_state.base);
  return *internal_default_instance();
}


void cmsg_battle_state::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_battle_state)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_battle_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_battle_state)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_battle_state state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_battle_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_battle_state)
  return false;
#undef DO_
}

void cmsg_battle_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_battle_state)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required .protocol.game.msg_battle_state state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_battle_state)
}

::google::protobuf::uint8* cmsg_battle_state::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_battle_state)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required .protocol.game.msg_battle_state state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_battle_state)
  return target;
}

size_t cmsg_battle_state::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.cmsg_battle_state)
  size_t total_size = 0;

  if (has_state()) {
    // required .protocol.game.msg_battle_state state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (has_guid()) {
    // required uint64 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  return total_size;
}
size_t cmsg_battle_state::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_battle_state)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.game.msg_battle_state state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);

    // required uint64 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_battle_state::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_battle_state)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_battle_state* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_battle_state>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_battle_state)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_battle_state)
    MergeFrom(*source);
  }
}

void cmsg_battle_state::MergeFrom(const cmsg_battle_state& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_battle_state)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::protocol::game::msg_battle_state::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cmsg_battle_state::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_battle_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_battle_state::CopyFrom(const cmsg_battle_state& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_battle_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_battle_state::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void cmsg_battle_state::Swap(cmsg_battle_state* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_battle_state::InternalSwap(cmsg_battle_state* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(guid_, other->guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_battle_state::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_battle_code::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_battle_code::kZhenFieldNumber;
const int msg_battle_code::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_battle_code::msg_battle_code()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_code.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_battle_code)
}
msg_battle_code::msg_battle_code(const msg_battle_code& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zhen_, &from.zhen_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&zhen_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_battle_code)
}

void msg_battle_code::SharedCtor() {
  ::memset(&zhen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&zhen_)) + sizeof(code_));
}

msg_battle_code::~msg_battle_code() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_battle_code)
  SharedDtor();
}

void msg_battle_code::SharedDtor() {
}

void msg_battle_code::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_battle_code::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_battle_code& msg_battle_code::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_msg_battle_code.base);
  return *internal_default_instance();
}


void msg_battle_code::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_battle_code)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&zhen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&zhen_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_battle_code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_battle_code)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zhen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_battle_code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_battle_code)
  return false;
#undef DO_
}

void msg_battle_code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_battle_code)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 zhen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zhen(), output);
  }

  // required int32 code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_battle_code)
}

::google::protobuf::uint8* msg_battle_code::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_battle_code)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 zhen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zhen(), target);
  }

  // required int32 code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_battle_code)
  return target;
}

size_t msg_battle_code::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.msg_battle_code)
  size_t total_size = 0;

  if (has_zhen()) {
    // required int32 zhen = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());
  }

  if (has_code()) {
    // required int32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  return total_size;
}
size_t msg_battle_code::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_battle_code)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 zhen = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());

    // required int32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_battle_code::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_battle_code)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_battle_code* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_battle_code>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_battle_code)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_battle_code)
    MergeFrom(*source);
  }
}

void msg_battle_code::MergeFrom(const msg_battle_code& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_battle_code)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      zhen_ = from.zhen_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_battle_code::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_battle_code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_battle_code::CopyFrom(const msg_battle_code& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_battle_code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_battle_code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void msg_battle_code::Swap(msg_battle_code* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_battle_code::InternalSwap(msg_battle_code* other) {
  using std::swap;
  swap(zhen_, other->zhen_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_battle_code::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_battle_link::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_battle_link::kGuidFieldNumber;
const int cmsg_battle_link::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_battle_link::cmsg_battle_link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_cmsg_battle_link.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_battle_link)
}
cmsg_battle_link::cmsg_battle_link(const cmsg_battle_link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_battle_link)
}

void cmsg_battle_link::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = GOOGLE_ULONGLONG(0);
}

cmsg_battle_link::~cmsg_battle_link() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_battle_link)
  SharedDtor();
}

void cmsg_battle_link::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cmsg_battle_link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_battle_link::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_battle_link& cmsg_battle_link::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_cmsg_battle_link.base);
  return *internal_default_instance();
}


void cmsg_battle_link::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_battle_link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    code_.ClearNonDefaultToEmptyNoArena();
  }
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_battle_link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_battle_link)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.cmsg_battle_link.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_battle_link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_battle_link)
  return false;
#undef DO_
}

void cmsg_battle_link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_battle_link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.cmsg_battle_link.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_battle_link)
}

::google::protobuf::uint8* cmsg_battle_link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_battle_link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.cmsg_battle_link.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_battle_link)
  return target;
}

size_t cmsg_battle_link::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.cmsg_battle_link)
  size_t total_size = 0;

  if (has_code()) {
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_guid()) {
    // required uint64 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  return total_size;
}
size_t cmsg_battle_link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_battle_link)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required uint64 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_battle_link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_battle_link)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_battle_link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_battle_link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_battle_link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_battle_link)
    MergeFrom(*source);
  }
}

void cmsg_battle_link::MergeFrom(const cmsg_battle_link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_battle_link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cmsg_battle_link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_battle_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_battle_link::CopyFrom(const cmsg_battle_link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_battle_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_battle_link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void cmsg_battle_link::Swap(cmsg_battle_link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_battle_link::InternalSwap(cmsg_battle_link* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guid_, other->guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_battle_link::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_battle_link::InitAsDefaultInstance() {
  ::protocol::game::_smsg_battle_link_default_instance_._instance.get_mutable()->state_ = const_cast< ::protocol::game::msg_battle_state*>(
      ::protocol::game::msg_battle_state::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_battle_link::kBattleGuidFieldNumber;
const int smsg_battle_link::kTypeFieldNumber;
const int smsg_battle_link::kTeamNumFieldNumber;
const int smsg_battle_link::kMemberNumFieldNumber;
const int smsg_battle_link::kZhenFieldNumber;
const int smsg_battle_link::kSeedFieldNumber;
const int smsg_battle_link::kSeedAddFieldNumber;
const int smsg_battle_link::kIsStateFieldNumber;
const int smsg_battle_link::kStateFieldNumber;
const int smsg_battle_link::kOpsFieldNumber;
const int smsg_battle_link::kSelfCampFieldNumber;
const int smsg_battle_link::kIsNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_battle_link::smsg_battle_link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fbattle1_2eproto::scc_info_smsg_battle_link.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_battle_link)
}
smsg_battle_link::smsg_battle_link(const smsg_battle_link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::protocol::game::msg_battle_state(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&battle_guid_, &from.battle_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_) -
    reinterpret_cast<char*>(&battle_guid_)) + sizeof(is_new_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_battle_link)
}

void smsg_battle_link::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_) -
      reinterpret_cast<char*>(&state_)) + sizeof(is_new_));
}

smsg_battle_link::~smsg_battle_link() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_battle_link)
  SharedDtor();
}

void smsg_battle_link::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void smsg_battle_link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_battle_link::descriptor() {
  ::protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_battle_link& smsg_battle_link::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fbattle1_2eproto::scc_info_smsg_battle_link.base);
  return *internal_default_instance();
}


void smsg_battle_link::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_battle_link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&battle_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seed_add_) -
        reinterpret_cast<char*>(&battle_guid_)) + sizeof(seed_add_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&is_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_new_) -
        reinterpret_cast<char*>(&is_state_)) + sizeof(is_new_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_battle_link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_battle_link)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 battle_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_battle_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 team_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_team_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 member_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_member_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 zhen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_zhen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 seed_add = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_seed_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.game.msg_battle_state state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_op ops = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 self_camp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_self_camp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_camp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_new = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_battle_link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_battle_link)
  return false;
#undef DO_
}

void smsg_battle_link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_battle_link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 battle_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battle_guid(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 team_num = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team_num(), output);
  }

  // required int32 member_num = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->member_num(), output);
  }

  // required int32 zhen = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zhen(), output);
  }

  // required int32 seed = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seed(), output);
  }

  // required int32 seed_add = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seed_add(), output);
  }

  // optional int32 is_state = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_state(), output);
  }

  // optional .protocol.game.msg_battle_state state = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_state(), output);
  }

  // repeated .protocol.game.msg_battle_op ops = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->ops(static_cast<int>(i)),
      output);
  }

  // required int32 self_camp = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->self_camp(), output);
  }

  // required int32 is_new = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_new(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_battle_link)
}

::google::protobuf::uint8* smsg_battle_link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_battle_link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 battle_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battle_guid(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 team_num = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team_num(), target);
  }

  // required int32 member_num = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->member_num(), target);
  }

  // required int32 zhen = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zhen(), target);
  }

  // required int32 seed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seed(), target);
  }

  // required int32 seed_add = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seed_add(), target);
  }

  // optional int32 is_state = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_state(), target);
  }

  // optional .protocol.game.msg_battle_state state = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_state(), deterministic, target);
  }

  // repeated .protocol.game.msg_battle_op ops = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->ops(static_cast<int>(i)), deterministic, target);
  }

  // required int32 self_camp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->self_camp(), target);
  }

  // required int32 is_new = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_new(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_battle_link)
  return target;
}

size_t smsg_battle_link::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.smsg_battle_link)
  size_t total_size = 0;

  if (has_battle_guid()) {
    // required uint64 battle_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battle_guid());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_team_num()) {
    // required int32 team_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_num());
  }

  if (has_member_num()) {
    // required int32 member_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_num());
  }

  if (has_zhen()) {
    // required int32 zhen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());
  }

  if (has_seed()) {
    // required int32 seed = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed());
  }

  if (has_seed_add()) {
    // required int32 seed_add = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed_add());
  }

  if (has_self_camp()) {
    // required int32 self_camp = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->self_camp());
  }

  if (has_is_new()) {
    // required int32 is_new = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());
  }

  return total_size;
}
size_t smsg_battle_link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_battle_link)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000006fe) ^ 0x000006fe) == 0) {  // All required fields are present.
    // required uint64 battle_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battle_guid());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 team_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_num());

    // required int32 member_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_num());

    // required int32 zhen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zhen());

    // required int32 seed = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed());

    // required int32 seed_add = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed_add());

    // required int32 self_camp = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->self_camp());

    // required int32 is_new = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.game.msg_battle_op ops = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->ops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ops(static_cast<int>(i)));
    }
  }

  // optional .protocol.game.msg_battle_state state = 9;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // optional int32 is_state = 8;
  if (has_is_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_battle_link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_battle_link)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_battle_link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_battle_link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_battle_link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_battle_link)
    MergeFrom(*source);
  }
}

void smsg_battle_link::MergeFrom(const smsg_battle_link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_battle_link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::protocol::game::msg_battle_state::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      battle_guid_ = from.battle_guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_num_ = from.team_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      member_num_ = from.member_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      zhen_ = from.zhen_;
    }
    if (cached_has_bits & 0x00000040u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000080u) {
      seed_add_ = from.seed_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_state_ = from.is_state_;
    }
    if (cached_has_bits & 0x00000200u) {
      self_camp_ = from.self_camp_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_new_ = from.is_new_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void smsg_battle_link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_battle_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_battle_link::CopyFrom(const smsg_battle_link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_battle_link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_battle_link::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006fe) != 0x000006fe) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void smsg_battle_link::Swap(smsg_battle_link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_battle_link::InternalSwap(smsg_battle_link* other) {
  using std::swap;
  CastToBase(&ops_)->InternalSwap(CastToBase(&other->ops_));
  swap(state_, other->state_);
  swap(battle_guid_, other->battle_guid_);
  swap(type_, other->type_);
  swap(team_num_, other->team_num_);
  swap(member_num_, other->member_num_);
  swap(zhen_, other->zhen_);
  swap(seed_, other->seed_);
  swap(seed_add_, other->seed_add_);
  swap(is_state_, other->is_state_);
  swap(self_camp_, other->self_camp_);
  swap(is_new_, other->is_new_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_battle_link::GetMetadata() const {
  protobuf_msg_5fbattle1_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fbattle1_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
}  // namespace protocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_unit* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_unit >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_unit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_boss* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_boss >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_boss >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_monster* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_monster >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_monster >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_player* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_player >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_effect* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_effect >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_effect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_item_base* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_item_base >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_item_base >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_item* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_item >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_item >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_op* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_op >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_op >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_state* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_state >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_state >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_battle_state* Arena::CreateMaybeMessage< ::protocol::game::cmsg_battle_state >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_battle_state >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_battle_code* Arena::CreateMaybeMessage< ::protocol::game::msg_battle_code >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_battle_code >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_battle_link* Arena::CreateMaybeMessage< ::protocol::game::cmsg_battle_link >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_battle_link >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_battle_link* Arena::CreateMaybeMessage< ::protocol::game::smsg_battle_link >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_battle_link >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
