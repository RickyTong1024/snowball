// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_connect.proto

#ifndef PROTOBUF_INCLUDED_msg_5fconnect_2eproto
#define PROTOBUF_INCLUDED_msg_5fconnect_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fconnect_2eproto 

namespace protobuf_msg_5fconnect_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_5fconnect_2eproto
namespace protocol {
namespace game {
class push_gate_connect_player_num;
class push_gate_connect_player_numDefaultTypeInternal;
extern push_gate_connect_player_numDefaultTypeInternal _push_gate_connect_player_num_default_instance_;
class smsg_request_gate;
class smsg_request_gateDefaultTypeInternal;
extern smsg_request_gateDefaultTypeInternal _smsg_request_gate_default_instance_;
}  // namespace game
}  // namespace protocol
namespace google {
namespace protobuf {
template<> ::protocol::game::push_gate_connect_player_num* Arena::CreateMaybeMessage<::protocol::game::push_gate_connect_player_num>(Arena*);
template<> ::protocol::game::smsg_request_gate* Arena::CreateMaybeMessage<::protocol::game::smsg_request_gate>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protocol {
namespace game {

// ===================================================================

class push_gate_connect_player_num : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_gate_connect_player_num) */ {
 public:
  push_gate_connect_player_num();
  virtual ~push_gate_connect_player_num();

  push_gate_connect_player_num(const push_gate_connect_player_num& from);

  inline push_gate_connect_player_num& operator=(const push_gate_connect_player_num& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_gate_connect_player_num(push_gate_connect_player_num&& from) noexcept
    : push_gate_connect_player_num() {
    *this = ::std::move(from);
  }

  inline push_gate_connect_player_num& operator=(push_gate_connect_player_num&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_gate_connect_player_num& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_gate_connect_player_num* internal_default_instance() {
    return reinterpret_cast<const push_gate_connect_player_num*>(
               &_push_gate_connect_player_num_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(push_gate_connect_player_num* other);
  friend void swap(push_gate_connect_player_num& a, push_gate_connect_player_num& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_gate_connect_player_num* New() const final {
    return CreateMaybeMessage<push_gate_connect_player_num>(NULL);
  }

  push_gate_connect_player_num* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_gate_connect_player_num>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_gate_connect_player_num& from);
  void MergeFrom(const push_gate_connect_player_num& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_gate_connect_player_num* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // required int32 num = 3;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 3;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_gate_connect_player_num)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 num_;
  friend struct ::protobuf_msg_5fconnect_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_request_gate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_request_gate) */ {
 public:
  smsg_request_gate();
  virtual ~smsg_request_gate();

  smsg_request_gate(const smsg_request_gate& from);

  inline smsg_request_gate& operator=(const smsg_request_gate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_request_gate(smsg_request_gate&& from) noexcept
    : smsg_request_gate() {
    *this = ::std::move(from);
  }

  inline smsg_request_gate& operator=(smsg_request_gate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_request_gate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_request_gate* internal_default_instance() {
    return reinterpret_cast<const smsg_request_gate*>(
               &_smsg_request_gate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(smsg_request_gate* other);
  friend void swap(smsg_request_gate& a, smsg_request_gate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_request_gate* New() const final {
    return CreateMaybeMessage<smsg_request_gate>(NULL);
  }

  smsg_request_gate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_request_gate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_request_gate& from);
  void MergeFrom(const smsg_request_gate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_request_gate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_request_gate)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_msg_5fconnect_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// push_gate_connect_player_num

// required string ip = 1;
inline bool push_gate_connect_player_num::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_gate_connect_player_num::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_gate_connect_player_num::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_gate_connect_player_num::clear_ip() {
  set_changed();
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& push_gate_connect_player_num::ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_gate_connect_player_num.ip)
  return ip_.GetNoArena();
}
inline void push_gate_connect_player_num::set_ip(const ::std::string& value) {
  set_changed();
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_gate_connect_player_num.ip)
}
#if LANG_CXX11
inline void push_gate_connect_player_num::set_ip(::std::string&& value) {
  set_changed();
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_gate_connect_player_num.ip)
}
#endif
inline void push_gate_connect_player_num::set_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_gate_connect_player_num.ip)
}
inline void push_gate_connect_player_num::set_ip(const char* value, size_t size) {
  set_changed();
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_gate_connect_player_num.ip)
}
inline ::std::string* push_gate_connect_player_num::mutable_ip() {
  set_changed();
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_gate_connect_player_num.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_gate_connect_player_num::release_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_gate_connect_player_num.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_gate_connect_player_num::set_allocated_ip(::std::string* ip) {
  set_changed();
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_gate_connect_player_num.ip)
}

// required int32 port = 2;
inline bool push_gate_connect_player_num::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_gate_connect_player_num::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_gate_connect_player_num::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_gate_connect_player_num::clear_port() {
  set_changed();
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 push_gate_connect_player_num::port() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_gate_connect_player_num.port)
  return port_;
}
inline void push_gate_connect_player_num::set_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_gate_connect_player_num.port)
}

// required int32 num = 3;
inline bool push_gate_connect_player_num::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void push_gate_connect_player_num::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void push_gate_connect_player_num::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void push_gate_connect_player_num::clear_num() {
  set_changed();
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 push_gate_connect_player_num::num() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_gate_connect_player_num.num)
  return num_;
}
inline void push_gate_connect_player_num::set_num(::google::protobuf::int32 value) {
  set_changed();
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_gate_connect_player_num.num)
}

// -------------------------------------------------------------------

// smsg_request_gate

// required string ip = 1;
inline bool smsg_request_gate::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_request_gate::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_request_gate::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_request_gate::clear_ip() {
  set_changed();
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& smsg_request_gate::ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_request_gate.ip)
  return ip_.GetNoArena();
}
inline void smsg_request_gate::set_ip(const ::std::string& value) {
  set_changed();
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_request_gate.ip)
}
#if LANG_CXX11
inline void smsg_request_gate::set_ip(::std::string&& value) {
  set_changed();
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_request_gate.ip)
}
#endif
inline void smsg_request_gate::set_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_request_gate.ip)
}
inline void smsg_request_gate::set_ip(const char* value, size_t size) {
  set_changed();
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_request_gate.ip)
}
inline ::std::string* smsg_request_gate::mutable_ip() {
  set_changed();
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_request_gate.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_request_gate::release_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_request_gate.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_request_gate::set_allocated_ip(::std::string* ip) {
  set_changed();
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_request_gate.ip)
}

// required int32 port = 2;
inline bool smsg_request_gate::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_request_gate::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_request_gate::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_request_gate::clear_port() {
  set_changed();
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 smsg_request_gate::port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_request_gate.port)
  return port_;
}
inline void smsg_request_gate::set_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_request_gate.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_5fconnect_2eproto
