// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_rank.proto

#include "msg_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_rank_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_rank_t;
}  // namespace protobuf_rank_2eproto
namespace protocol {
namespace game {
class push_hall_rank_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_rank_update>
      _instance;
} _push_hall_rank_update_default_instance_;
class push_rank_hall_cacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_rank_hall_cache>
      _instance;
} _push_rank_hall_cache_default_instance_;
class cmsg_rankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_rank>
      _instance;
} _cmsg_rank_default_instance_;
class smsg_rankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_rank>
      _instance;
} _smsg_rank_default_instance_;
class push_hall_rank_forbiddenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_rank_forbidden>
      _instance;
} _push_hall_rank_forbidden_default_instance_;
}  // namespace game
}  // namespace protocol
namespace protobuf_msg_5frank_2eproto {
static void InitDefaultspush_hall_rank_update() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_rank_update_default_instance_;
    new (ptr) ::protocol::game::push_hall_rank_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_rank_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_rank_update =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_rank_update}, {}};

static void InitDefaultspush_rank_hall_cache() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_rank_hall_cache_default_instance_;
    new (ptr) ::protocol::game::push_rank_hall_cache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_rank_hall_cache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_rank_hall_cache =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_rank_hall_cache}, {
      &protobuf_rank_2eproto::scc_info_rank_t.base,}};

static void InitDefaultscmsg_rank() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_rank_default_instance_;
    new (ptr) ::protocol::game::cmsg_rank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_rank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_rank =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_rank}, {}};

static void InitDefaultssmsg_rank() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_rank_default_instance_;
    new (ptr) ::protocol::game::smsg_rank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_rank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_rank =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_rank}, {
      &protobuf_rank_2eproto::scc_info_rank_t.base,}};

static void InitDefaultspush_hall_rank_forbidden() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_rank_forbidden_default_instance_;
    new (ptr) ::protocol::game::push_hall_rank_forbidden();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_rank_forbidden::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_rank_forbidden =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_rank_forbidden}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_rank_update.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_rank_hall_cache.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_rank.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_rank.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_rank_forbidden.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, toukuang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, name_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_update, value_),
  2,
  1,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_rank_hall_cache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_rank_hall_cache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_rank_hall_cache, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_rank_hall_cache, ranks_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_rank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_rank, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_rank, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_rank, rank_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_forbidden, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_forbidden, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_rank_forbidden, guid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::protocol::game::push_hall_rank_update)},
  { 25, 32, sizeof(::protocol::game::push_rank_hall_cache)},
  { 34, 40, sizeof(::protocol::game::cmsg_rank)},
  { 41, 47, sizeof(::protocol::game::smsg_rank)},
  { 48, 54, sizeof(::protocol::game::push_hall_rank_forbidden)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_rank_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_rank_hall_cache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_rank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_rank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_rank_forbidden_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "msg_rank.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016msg_rank.proto\022\rprotocol.game\032\nrank.pr"
      "oto\"\272\001\n\025push_hall_rank_update\022\n\n\002id\030\001 \002("
      "\005\022\023\n\013player_guid\030\002 \002(\004\022\014\n\004name\030\003 \002(\t\022\013\n\003"
      "sex\030\004 \002(\005\022\r\n\005level\030\005 \002(\005\022\016\n\006avatar\030\006 \002(\005"
      "\022\020\n\010toukuang\030\007 \002(\005\022\021\n\tregion_id\030\010 \002(\005\022\022\n"
      "\nname_color\030\t \002(\005\022\r\n\005value\030\n \002(\005\">\n\024push"
      "_rank_hall_cache\022\n\n\002id\030\001 \003(\005\022\032\n\005ranks\030\002 "
      "\003(\0132\013.dhc.rank_t\"\027\n\tcmsg_rank\022\n\n\002id\030\001 \002("
      "\005\"&\n\tsmsg_rank\022\031\n\004rank\030\001 \002(\0132\013.dhc.rank_"
      "t\"(\n\030push_hall_rank_forbidden\022\014\n\004guid\030\001 "
      "\002(\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_rank.proto", &protobuf_RegisterTypes);
  ::protobuf_rank_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_5frank_2eproto
namespace protocol {
namespace game {

// ===================================================================

void push_hall_rank_update::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_rank_update::kIdFieldNumber;
const int push_hall_rank_update::kPlayerGuidFieldNumber;
const int push_hall_rank_update::kNameFieldNumber;
const int push_hall_rank_update::kSexFieldNumber;
const int push_hall_rank_update::kLevelFieldNumber;
const int push_hall_rank_update::kAvatarFieldNumber;
const int push_hall_rank_update::kToukuangFieldNumber;
const int push_hall_rank_update::kRegionIdFieldNumber;
const int push_hall_rank_update::kNameColorFieldNumber;
const int push_hall_rank_update::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_rank_update::push_hall_rank_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5frank_2eproto::scc_info_push_hall_rank_update.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_rank_update)
}
push_hall_rank_update::push_hall_rank_update(const push_hall_rank_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&player_guid_, &from.player_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_guid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_rank_update)
}

void push_hall_rank_update::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(value_));
}

push_hall_rank_update::~push_hall_rank_update() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_rank_update)
  SharedDtor();
}

void push_hall_rank_update::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void push_hall_rank_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_rank_update::descriptor() {
  ::protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_rank_update& push_hall_rank_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5frank_2eproto::scc_info_push_hall_rank_update.base);
  return *internal_default_instance();
}


void push_hall_rank_update::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_rank_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&player_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_id_) -
        reinterpret_cast<char*>(&player_guid_)) + sizeof(region_id_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&name_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_color_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_rank_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_rank_update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 player_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_hall_rank_update.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 avatar = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_avatar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 toukuang = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_toukuang();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toukuang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 region_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 name_color = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_name_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_rank_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_rank_update)
  return false;
#undef DO_
}

void push_hall_rank_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_rank_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_guid(), output);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_hall_rank_update.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required int32 sex = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 avatar = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->avatar(), output);
  }

  // required int32 toukuang = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->toukuang(), output);
  }

  // required int32 region_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->region_id(), output);
  }

  // required int32 name_color = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->name_color(), output);
  }

  // required int32 value = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_rank_update)
}

::google::protobuf::uint8* push_hall_rank_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_rank_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_guid(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_hall_rank_update.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 sex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // required int32 level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 avatar = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->avatar(), target);
  }

  // required int32 toukuang = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->toukuang(), target);
  }

  // required int32 region_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->region_id(), target);
  }

  // required int32 name_color = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->name_color(), target);
  }

  // required int32 value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_rank_update)
  return target;
}

size_t push_hall_rank_update::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_hall_rank_update)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_sex()) {
    // required int32 sex = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  if (has_level()) {
    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_avatar()) {
    // required int32 avatar = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatar());
  }

  if (has_toukuang()) {
    // required int32 toukuang = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toukuang());
  }

  if (has_region_id()) {
    // required int32 region_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());
  }

  if (has_name_color()) {
    // required int32 name_color = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->name_color());
  }

  if (has_value()) {
    // required int32 value = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t push_hall_rank_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_rank_update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 player_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 sex = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

    // required int32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 avatar = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatar());

    // required int32 toukuang = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toukuang());

    // required int32 region_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->region_id());

    // required int32 name_color = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->name_color());

    // required int32 value = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_rank_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_rank_update)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_rank_update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_rank_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_rank_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_rank_update)
    MergeFrom(*source);
  }
}

void push_hall_rank_update::MergeFrom(const push_hall_rank_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_rank_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      avatar_ = from.avatar_;
    }
    if (cached_has_bits & 0x00000040u) {
      toukuang_ = from.toukuang_;
    }
    if (cached_has_bits & 0x00000080u) {
      region_id_ = from.region_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      name_color_ = from.name_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_hall_rank_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_rank_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_rank_update::CopyFrom(const push_hall_rank_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_rank_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_rank_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void push_hall_rank_update::Swap(push_hall_rank_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_rank_update::InternalSwap(push_hall_rank_update* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_guid_, other->player_guid_);
  swap(id_, other->id_);
  swap(sex_, other->sex_);
  swap(level_, other->level_);
  swap(avatar_, other->avatar_);
  swap(toukuang_, other->toukuang_);
  swap(region_id_, other->region_id_);
  swap(name_color_, other->name_color_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_rank_update::GetMetadata() const {
  protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_rank_hall_cache::InitAsDefaultInstance() {
}
void push_rank_hall_cache::clear_ranks() {
  ranks_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_rank_hall_cache::kIdFieldNumber;
const int push_rank_hall_cache::kRanksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_rank_hall_cache::push_rank_hall_cache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5frank_2eproto::scc_info_push_rank_hall_cache.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_rank_hall_cache)
}
push_rank_hall_cache::push_rank_hall_cache(const push_rank_hall_cache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      id_(from.id_),
      ranks_(from.ranks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_rank_hall_cache)
}

void push_rank_hall_cache::SharedCtor() {
}

push_rank_hall_cache::~push_rank_hall_cache() {
  // @@protoc_insertion_point(destructor:protocol.game.push_rank_hall_cache)
  SharedDtor();
}

void push_rank_hall_cache::SharedDtor() {
}

void push_rank_hall_cache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_rank_hall_cache::descriptor() {
  ::protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_rank_hall_cache& push_rank_hall_cache::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5frank_2eproto::scc_info_push_rank_hall_cache.base);
  return *internal_default_instance();
}


void push_rank_hall_cache::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_rank_hall_cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  id_.Clear();
  ranks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_rank_hall_cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_rank_hall_cache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dhc.rank_t ranks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_rank_hall_cache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_rank_hall_cache)
  return false;
#undef DO_
}

void push_rank_hall_cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_rank_hall_cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 id = 1;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  // repeated .dhc.rank_t ranks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ranks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_rank_hall_cache)
}

::google::protobuf::uint8* push_rank_hall_cache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_rank_hall_cache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->id_, target);

  // repeated .dhc.rank_t ranks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ranks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_rank_hall_cache)
  return target;
}

size_t push_rank_hall_cache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_rank_hall_cache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->id_size());
    total_size += data_size;
  }

  // repeated .dhc.rank_t ranks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ranks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ranks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_rank_hall_cache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_rank_hall_cache)
  GOOGLE_DCHECK_NE(&from, this);
  const push_rank_hall_cache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_rank_hall_cache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_rank_hall_cache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_rank_hall_cache)
    MergeFrom(*source);
  }
}

void push_rank_hall_cache::MergeFrom(const push_rank_hall_cache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_rank_hall_cache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  ranks_.MergeFrom(from.ranks_);
}

void push_rank_hall_cache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_rank_hall_cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_rank_hall_cache::CopyFrom(const push_rank_hall_cache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_rank_hall_cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_rank_hall_cache::IsInitialized() const {
  return true;
}

void push_rank_hall_cache::Swap(push_rank_hall_cache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_rank_hall_cache::InternalSwap(push_rank_hall_cache* other) {
  using std::swap;
  id_.InternalSwap(&other->id_);
  CastToBase(&ranks_)->InternalSwap(CastToBase(&other->ranks_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_rank_hall_cache::GetMetadata() const {
  protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_rank::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_rank::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_rank::cmsg_rank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5frank_2eproto::scc_info_cmsg_rank.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_rank)
}
cmsg_rank::cmsg_rank(const cmsg_rank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_rank)
}

void cmsg_rank::SharedCtor() {
  id_ = 0;
}

cmsg_rank::~cmsg_rank() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_rank)
  SharedDtor();
}

void cmsg_rank::SharedDtor() {
}

void cmsg_rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_rank::descriptor() {
  ::protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_rank& cmsg_rank::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5frank_2eproto::scc_info_cmsg_rank.base);
  return *internal_default_instance();
}


void cmsg_rank::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_rank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_rank)
  return false;
#undef DO_
}

void cmsg_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_rank)
}

::google::protobuf::uint8* cmsg_rank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_rank)
  return target;
}

size_t cmsg_rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_rank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_rank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_rank)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_rank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_rank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_rank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_rank)
    MergeFrom(*source);
  }
}

void cmsg_rank::MergeFrom(const cmsg_rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void cmsg_rank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_rank::CopyFrom(const cmsg_rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void cmsg_rank::Swap(cmsg_rank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_rank::InternalSwap(cmsg_rank* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_rank::GetMetadata() const {
  protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_rank::InitAsDefaultInstance() {
  ::protocol::game::_smsg_rank_default_instance_._instance.get_mutable()->rank_ = const_cast< ::dhc::rank_t*>(
      ::dhc::rank_t::internal_default_instance());
}
void smsg_rank::clear_rank() {
  if (rank_ != NULL) rank_->Clear();
  clear_has_rank();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_rank::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_rank::smsg_rank()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5frank_2eproto::scc_info_smsg_rank.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_rank)
}
smsg_rank::smsg_rank(const smsg_rank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rank()) {
    rank_ = new ::dhc::rank_t(*from.rank_);
  } else {
    rank_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_rank)
}

void smsg_rank::SharedCtor() {
  rank_ = NULL;
}

smsg_rank::~smsg_rank() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_rank)
  SharedDtor();
}

void smsg_rank::SharedDtor() {
  if (this != internal_default_instance()) delete rank_;
}

void smsg_rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_rank::descriptor() {
  ::protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_rank& smsg_rank::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5frank_2eproto::scc_info_smsg_rank.base);
  return *internal_default_instance();
}


void smsg_rank::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rank_ != NULL);
    rank_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_rank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dhc.rank_t rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rank()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_rank)
  return false;
#undef DO_
}

void smsg_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .dhc.rank_t rank = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_rank)
}

::google::protobuf::uint8* smsg_rank::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_rank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .dhc.rank_t rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_rank(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_rank)
  return target;
}

size_t smsg_rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_rank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .dhc.rank_t rank = 1;
  if (has_rank()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rank_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_rank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_rank)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_rank* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_rank>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_rank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_rank)
    MergeFrom(*source);
  }
}

void smsg_rank::MergeFrom(const smsg_rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rank()) {
    mutable_rank()->::dhc::rank_t::MergeFrom(from.rank());
  }
}

void smsg_rank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_rank::CopyFrom(const smsg_rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void smsg_rank::Swap(smsg_rank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_rank::InternalSwap(smsg_rank* other) {
  using std::swap;
  swap(rank_, other->rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_rank::GetMetadata() const {
  protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_rank_forbidden::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_rank_forbidden::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_rank_forbidden::push_hall_rank_forbidden()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5frank_2eproto::scc_info_push_hall_rank_forbidden.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_rank_forbidden)
}
push_hall_rank_forbidden::push_hall_rank_forbidden(const push_hall_rank_forbidden& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_rank_forbidden)
}

void push_hall_rank_forbidden::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
}

push_hall_rank_forbidden::~push_hall_rank_forbidden() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_rank_forbidden)
  SharedDtor();
}

void push_hall_rank_forbidden::SharedDtor() {
}

void push_hall_rank_forbidden::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_rank_forbidden::descriptor() {
  ::protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_rank_forbidden& push_hall_rank_forbidden::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5frank_2eproto::scc_info_push_hall_rank_forbidden.base);
  return *internal_default_instance();
}


void push_hall_rank_forbidden::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_rank_forbidden)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_rank_forbidden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_rank_forbidden)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_rank_forbidden)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_rank_forbidden)
  return false;
#undef DO_
}

void push_hall_rank_forbidden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_rank_forbidden)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_rank_forbidden)
}

::google::protobuf::uint8* push_hall_rank_forbidden::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_rank_forbidden)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_rank_forbidden)
  return target;
}

size_t push_hall_rank_forbidden::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_rank_forbidden)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_rank_forbidden::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_rank_forbidden)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_rank_forbidden* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_rank_forbidden>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_rank_forbidden)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_rank_forbidden)
    MergeFrom(*source);
  }
}

void push_hall_rank_forbidden::MergeFrom(const push_hall_rank_forbidden& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_rank_forbidden)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void push_hall_rank_forbidden::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_rank_forbidden)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_rank_forbidden::CopyFrom(const push_hall_rank_forbidden& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_rank_forbidden)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_rank_forbidden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void push_hall_rank_forbidden::Swap(push_hall_rank_forbidden* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_rank_forbidden::InternalSwap(push_hall_rank_forbidden* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_rank_forbidden::GetMetadata() const {
  protobuf_msg_5frank_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5frank_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
}  // namespace protocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_rank_update* Arena::CreateMaybeMessage< ::protocol::game::push_hall_rank_update >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_rank_update >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_rank_hall_cache* Arena::CreateMaybeMessage< ::protocol::game::push_rank_hall_cache >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_rank_hall_cache >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_rank* Arena::CreateMaybeMessage< ::protocol::game::cmsg_rank >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_rank >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_rank* Arena::CreateMaybeMessage< ::protocol::game::smsg_rank >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_rank >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_rank_forbidden* Arena::CreateMaybeMessage< ::protocol::game::push_hall_rank_forbidden >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_rank_forbidden >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
