// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_team.proto

#include "msg_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_msg_5fbattle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fbattle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_battle_player_info;
}  // namespace protobuf_msg_5fbattle_2eproto
namespace protobuf_msg_5fteam_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_team_player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_team;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_team_member;
}  // namespace protobuf_msg_5fteam_2eproto
namespace protocol {
namespace game {
class req_hall_rc_single_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<req_hall_rc_single_battle>
      _instance;
} _req_hall_rc_single_battle_default_instance_;
class rep_hall_rc_single_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rep_hall_rc_single_battle>
      _instance;
} _rep_hall_rc_single_battle_default_instance_;
class smsg_single_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_single_battle>
      _instance;
} _smsg_single_battle_default_instance_;
class req_team_rc_multi_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<req_team_rc_multi_battle>
      _instance;
} _req_team_rc_multi_battle_default_instance_;
class rep_team_rc_multi_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rep_team_rc_multi_battle>
      _instance;
} _rep_team_rc_multi_battle_default_instance_;
class smsg_multi_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_multi_battle>
      _instance;
} _smsg_multi_battle_default_instance_;
class smsg_has_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_has_battle>
      _instance;
} _smsg_has_battle_default_instance_;
class req_hall_rc_has_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<req_hall_rc_has_battle>
      _instance;
} _req_hall_rc_has_battle_default_instance_;
class rep_hall_rc_has_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rep_hall_rc_has_battle>
      _instance;
} _rep_hall_rc_has_battle_default_instance_;
class msg_team_playerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_team_player>
      _instance;
} _msg_team_player_default_instance_;
class msg_team_memberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_team_member>
      _instance;
} _msg_team_member_default_instance_;
class msg_teamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_team>
      _instance;
} _msg_team_default_instance_;
class push_team_hall_errorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_error>
      _instance;
} _push_team_hall_error_default_instance_;
class push_hall_team_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_create>
      _instance;
} _push_hall_team_create_default_instance_;
class push_team_hall_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_create>
      _instance;
} _push_team_hall_create_default_instance_;
class smsg_team_createDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_create>
      _instance;
} _smsg_team_create_default_instance_;
class smsg_team_tuijianDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_tuijian>
      _instance;
} _smsg_team_tuijian_default_instance_;
class cmsg_team_joinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_join>
      _instance;
} _cmsg_team_join_default_instance_;
class push_hall_team_joinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_join>
      _instance;
} _push_hall_team_join_default_instance_;
class push_team_hall_joinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_join>
      _instance;
} _push_team_hall_join_default_instance_;
class smsg_team_joinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_join>
      _instance;
} _smsg_team_join_default_instance_;
class push_team_hall_other_joinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_other_join>
      _instance;
} _push_team_hall_other_join_default_instance_;
class smsg_team_other_joinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_other_join>
      _instance;
} _smsg_team_other_join_default_instance_;
class push_hall_team_exitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_exit>
      _instance;
} _push_hall_team_exit_default_instance_;
class push_team_hall_exitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_exit>
      _instance;
} _push_team_hall_exit_default_instance_;
class smsg_team_exitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_exit>
      _instance;
} _smsg_team_exit_default_instance_;
class cmsg_team_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_kick>
      _instance;
} _cmsg_team_kick_default_instance_;
class push_hall_team_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_kick>
      _instance;
} _push_hall_team_kick_default_instance_;
class push_team_hall_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_kick>
      _instance;
} _push_team_hall_kick_default_instance_;
class smsg_team_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_kick>
      _instance;
} _smsg_team_kick_default_instance_;
class cmsg_team_invertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_invert>
      _instance;
} _cmsg_team_invert_default_instance_;
class push_hall_team_invertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_invert>
      _instance;
} _push_hall_team_invert_default_instance_;
class push_team_hall_invertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_invert>
      _instance;
} _push_team_hall_invert_default_instance_;
class smsg_team_invertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_invert>
      _instance;
} _smsg_team_invert_default_instance_;
class cmsg_team_chatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cmsg_team_chat>
      _instance;
} _cmsg_team_chat_default_instance_;
class push_hall_team_chatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_chat>
      _instance;
} _push_hall_team_chat_default_instance_;
class push_team_hall_chatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_chat>
      _instance;
} _push_team_hall_chat_default_instance_;
class smsg_team_chatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<smsg_team_chat>
      _instance;
} _smsg_team_chat_default_instance_;
class push_hall_team_multi_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_hall_team_multi_battle>
      _instance;
} _push_hall_team_multi_battle_default_instance_;
class push_team_hall_multi_battleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<push_team_hall_multi_battle>
      _instance;
} _push_team_hall_multi_battle_default_instance_;
}  // namespace game
}  // namespace protocol
namespace protobuf_msg_5fteam_2eproto {
static void InitDefaultsreq_hall_rc_single_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_req_hall_rc_single_battle_default_instance_;
    new (ptr) ::protocol::game::req_hall_rc_single_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::req_hall_rc_single_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_req_hall_rc_single_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreq_hall_rc_single_battle}, {
      &protobuf_msg_5fbattle_2eproto::scc_info_msg_battle_player_info.base,}};

static void InitDefaultsrep_hall_rc_single_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_rep_hall_rc_single_battle_default_instance_;
    new (ptr) ::protocol::game::rep_hall_rc_single_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::rep_hall_rc_single_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rep_hall_rc_single_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrep_hall_rc_single_battle}, {}};

static void InitDefaultssmsg_single_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_single_battle_default_instance_;
    new (ptr) ::protocol::game::smsg_single_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_single_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_single_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_single_battle}, {}};

static void InitDefaultsreq_team_rc_multi_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_req_team_rc_multi_battle_default_instance_;
    new (ptr) ::protocol::game::req_team_rc_multi_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::req_team_rc_multi_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_req_team_rc_multi_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreq_team_rc_multi_battle}, {
      &protobuf_msg_5fbattle_2eproto::scc_info_msg_battle_player_info.base,}};

static void InitDefaultsrep_team_rc_multi_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_rep_team_rc_multi_battle_default_instance_;
    new (ptr) ::protocol::game::rep_team_rc_multi_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::rep_team_rc_multi_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rep_team_rc_multi_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrep_team_rc_multi_battle}, {}};

static void InitDefaultssmsg_multi_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_multi_battle_default_instance_;
    new (ptr) ::protocol::game::smsg_multi_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_multi_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_multi_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_multi_battle}, {}};

static void InitDefaultssmsg_has_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_has_battle_default_instance_;
    new (ptr) ::protocol::game::smsg_has_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_has_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_has_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_has_battle}, {}};

static void InitDefaultsreq_hall_rc_has_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_req_hall_rc_has_battle_default_instance_;
    new (ptr) ::protocol::game::req_hall_rc_has_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::req_hall_rc_has_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_req_hall_rc_has_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreq_hall_rc_has_battle}, {}};

static void InitDefaultsrep_hall_rc_has_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_rep_hall_rc_has_battle_default_instance_;
    new (ptr) ::protocol::game::rep_hall_rc_has_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::rep_hall_rc_has_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rep_hall_rc_has_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrep_hall_rc_has_battle}, {}};

static void InitDefaultsmsg_team_player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_team_player_default_instance_;
    new (ptr) ::protocol::game::msg_team_player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_team_player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_team_player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_team_player}, {}};

static void InitDefaultsmsg_team_member() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_team_member_default_instance_;
    new (ptr) ::protocol::game::msg_team_member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_team_member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_team_member =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_team_member}, {
      &protobuf_msg_5fbattle_2eproto::scc_info_msg_battle_player_info.base,}};

static void InitDefaultsmsg_team() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_msg_team_default_instance_;
    new (ptr) ::protocol::game::msg_team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::msg_team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_team =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_team}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_member.base,}};

static void InitDefaultspush_team_hall_error() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_error_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_team_hall_error =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_team_hall_error}, {}};

static void InitDefaultspush_hall_team_create() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_create_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_hall_team_create =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_hall_team_create}, {
      &protobuf_msg_5fbattle_2eproto::scc_info_msg_battle_player_info.base,}};

static void InitDefaultspush_team_hall_create() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_create_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_team_hall_create =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_team_hall_create}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team.base,}};

static void InitDefaultssmsg_team_create() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_create_default_instance_;
    new (ptr) ::protocol::game::smsg_team_create();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_create::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_create =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_create}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team.base,}};

static void InitDefaultssmsg_team_tuijian() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_tuijian_default_instance_;
    new (ptr) ::protocol::game::smsg_team_tuijian();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_tuijian::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_tuijian =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_tuijian}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_player.base,}};

static void InitDefaultscmsg_team_join() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_team_join_default_instance_;
    new (ptr) ::protocol::game::cmsg_team_join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_team_join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_join}, {}};

static void InitDefaultspush_hall_team_join() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_join_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_hall_team_join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_hall_team_join}, {
      &protobuf_msg_5fbattle_2eproto::scc_info_msg_battle_player_info.base,}};

static void InitDefaultspush_team_hall_join() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_join_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_team_hall_join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_team_hall_join}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team.base,}};

static void InitDefaultssmsg_team_join() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_join_default_instance_;
    new (ptr) ::protocol::game::smsg_team_join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_join}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team.base,}};

static void InitDefaultspush_team_hall_other_join() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_other_join_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_other_join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_other_join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_team_hall_other_join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_team_hall_other_join}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_member.base,}};

static void InitDefaultssmsg_team_other_join() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_other_join_default_instance_;
    new (ptr) ::protocol::game::smsg_team_other_join();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_other_join::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_other_join =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_other_join}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_member.base,}};

static void InitDefaultspush_hall_team_exit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_exit_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_exit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_exit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_team_exit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_team_exit}, {}};

static void InitDefaultspush_team_hall_exit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_exit_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_exit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_exit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_team_hall_exit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_team_hall_exit}, {}};

static void InitDefaultssmsg_team_exit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_exit_default_instance_;
    new (ptr) ::protocol::game::smsg_team_exit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_exit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_exit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_exit}, {}};

static void InitDefaultscmsg_team_kick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_team_kick_default_instance_;
    new (ptr) ::protocol::game::cmsg_team_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_team_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_kick}, {}};

static void InitDefaultspush_hall_team_kick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_kick_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_team_kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_team_kick}, {}};

static void InitDefaultspush_team_hall_kick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_kick_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_team_hall_kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_team_hall_kick}, {}};

static void InitDefaultssmsg_team_kick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_kick_default_instance_;
    new (ptr) ::protocol::game::smsg_team_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_kick}, {}};

static void InitDefaultscmsg_team_invert() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_team_invert_default_instance_;
    new (ptr) ::protocol::game::cmsg_team_invert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_team_invert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_invert =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_invert}, {}};

static void InitDefaultspush_hall_team_invert() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_invert_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_invert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_invert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_team_invert =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_team_invert}, {}};

static void InitDefaultspush_team_hall_invert() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_invert_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_invert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_invert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_push_team_hall_invert =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspush_team_hall_invert}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_player.base,}};

static void InitDefaultssmsg_team_invert() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_invert_default_instance_;
    new (ptr) ::protocol::game::smsg_team_invert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_invert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_smsg_team_invert =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssmsg_team_invert}, {
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_player.base,}};

static void InitDefaultscmsg_team_chat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_cmsg_team_chat_default_instance_;
    new (ptr) ::protocol::game::cmsg_team_chat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::cmsg_team_chat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_cmsg_team_chat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscmsg_team_chat}, {}};

static void InitDefaultspush_hall_team_chat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_chat_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_chat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_chat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_team_chat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_team_chat}, {}};

static void InitDefaultspush_team_hall_chat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_chat_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_chat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_chat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_team_hall_chat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_team_hall_chat}, {}};

static void InitDefaultssmsg_team_chat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_smsg_team_chat_default_instance_;
    new (ptr) ::protocol::game::smsg_team_chat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::smsg_team_chat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_smsg_team_chat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssmsg_team_chat}, {}};

static void InitDefaultspush_hall_team_multi_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_hall_team_multi_battle_default_instance_;
    new (ptr) ::protocol::game::push_hall_team_multi_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_hall_team_multi_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_hall_team_multi_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_hall_team_multi_battle}, {}};

static void InitDefaultspush_team_hall_multi_battle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::game::_push_team_hall_multi_battle_default_instance_;
    new (ptr) ::protocol::game::push_team_hall_multi_battle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::game::push_team_hall_multi_battle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_push_team_hall_multi_battle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspush_team_hall_multi_battle}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_req_hall_rc_single_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rep_hall_rc_single_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_single_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_req_team_rc_multi_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rep_team_rc_multi_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_multi_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_has_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_req_hall_rc_has_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rep_hall_rc_has_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_team_player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_team_member.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_team.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_error.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_create.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_create.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_create.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_tuijian.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_other_join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_other_join.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_exit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_exit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_exit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_invert.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_invert.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_invert.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_invert.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cmsg_team_chat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_chat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_chat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_smsg_team_chat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_hall_team_multi_battle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_push_team_hall_multi_battle.base);
}

::google::protobuf::Metadata file_level_metadata[40];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_hall_rc_single_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_hall_rc_single_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_hall_rc_single_battle, player_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_single_battle, is_new_),
  0,
  3,
  1,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_single_battle, is_new_),
  0,
  3,
  1,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_team_rc_multi_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_team_rc_multi_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_team_rc_multi_battle, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_team_rc_multi_battle, player_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_team_rc_multi_battle, code_),
  0,
  2,
  1,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_multi_battle, num_),
  0,
  3,
  1,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_has_battle, code_),
  0,
  3,
  1,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_hall_rc_has_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_hall_rc_has_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::req_hall_rc_has_battle, guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, is_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::rep_hall_rc_has_battle, code_),
  3,
  0,
  4,
  1,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, toukuang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, cup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_player, name_color_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_member, member_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team_member, player_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::msg_team, member_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_error, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_error, text_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_create, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_create, player_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_create, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_create, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_create, team_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_create, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_create, team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_tuijian, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_tuijian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_tuijian, players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_join, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_join, player_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_join, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_join, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_join, player_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_join, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_join, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_join, team_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_join, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_join, team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_other_join, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_other_join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_other_join, guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_other_join, member_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_other_join, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_other_join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_other_join, member_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_exit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_exit, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_exit, mauto_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_exit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_exit, guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_exit, leader_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_exit, player_guid_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_exit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_exit, leader_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_exit, player_guid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_kick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_kick, target_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_kick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_kick, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_kick, target_guid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_kick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_kick, guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_kick, player_guid_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_kick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_kick, player_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_invert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_invert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_invert, target_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_invert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_invert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_invert, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_invert, target_guid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_invert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_invert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_invert, target_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_invert, player_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_invert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_invert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_invert, player_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_chat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::cmsg_team_chat, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_chat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_chat, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_chat, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_chat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_chat, guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_chat, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_chat, text_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_chat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_chat, player_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::smsg_team_chat, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_multi_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_multi_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_hall_team_multi_battle, player_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, guids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, udp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, udp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, tcp_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, tcp_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::game::push_team_hall_multi_battle, num_),
  ~0u,
  0,
  2,
  1,
  3,
  ~0u,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::protocol::game::req_hall_rc_single_battle)},
  { 7, 18, sizeof(::protocol::game::rep_hall_rc_single_battle)},
  { 24, 35, sizeof(::protocol::game::smsg_single_battle)},
  { 41, 48, sizeof(::protocol::game::req_team_rc_multi_battle)},
  { 50, 61, sizeof(::protocol::game::rep_team_rc_multi_battle)},
  { 67, 78, sizeof(::protocol::game::smsg_multi_battle)},
  { 84, 94, sizeof(::protocol::game::smsg_has_battle)},
  { 99, 105, sizeof(::protocol::game::req_hall_rc_has_battle)},
  { 106, 117, sizeof(::protocol::game::rep_hall_rc_has_battle)},
  { 123, 135, sizeof(::protocol::game::msg_team_player)},
  { 142, 149, sizeof(::protocol::game::msg_team_member)},
  { 151, 158, sizeof(::protocol::game::msg_team)},
  { 160, 168, sizeof(::protocol::game::push_team_hall_error)},
  { 171, 177, sizeof(::protocol::game::push_hall_team_create)},
  { 178, 185, sizeof(::protocol::game::push_team_hall_create)},
  { 187, 193, sizeof(::protocol::game::smsg_team_create)},
  { 194, 200, sizeof(::protocol::game::smsg_team_tuijian)},
  { 201, 207, sizeof(::protocol::game::cmsg_team_join)},
  { 208, 215, sizeof(::protocol::game::push_hall_team_join)},
  { 217, 224, sizeof(::protocol::game::push_team_hall_join)},
  { 226, 232, sizeof(::protocol::game::smsg_team_join)},
  { 233, 240, sizeof(::protocol::game::push_team_hall_other_join)},
  { 242, 248, sizeof(::protocol::game::smsg_team_other_join)},
  { 249, 256, sizeof(::protocol::game::push_hall_team_exit)},
  { 258, 266, sizeof(::protocol::game::push_team_hall_exit)},
  { 269, 276, sizeof(::protocol::game::smsg_team_exit)},
  { 278, 284, sizeof(::protocol::game::cmsg_team_kick)},
  { 285, 292, sizeof(::protocol::game::push_hall_team_kick)},
  { 294, 301, sizeof(::protocol::game::push_team_hall_kick)},
  { 303, 309, sizeof(::protocol::game::smsg_team_kick)},
  { 310, 316, sizeof(::protocol::game::cmsg_team_invert)},
  { 317, 324, sizeof(::protocol::game::push_hall_team_invert)},
  { 326, 333, sizeof(::protocol::game::push_team_hall_invert)},
  { 335, 341, sizeof(::protocol::game::smsg_team_invert)},
  { 342, 348, sizeof(::protocol::game::cmsg_team_chat)},
  { 349, 356, sizeof(::protocol::game::push_hall_team_chat)},
  { 358, 366, sizeof(::protocol::game::push_team_hall_chat)},
  { 369, 376, sizeof(::protocol::game::smsg_team_chat)},
  { 378, 384, sizeof(::protocol::game::push_hall_team_multi_battle)},
  { 385, 397, sizeof(::protocol::game::push_team_hall_multi_battle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_req_hall_rc_single_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_rep_hall_rc_single_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_single_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_req_team_rc_multi_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_rep_team_rc_multi_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_multi_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_has_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_req_hall_rc_has_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_rep_hall_rc_has_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_team_player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_team_member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_msg_team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_tuijian_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_team_join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_other_join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_other_join_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_exit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_exit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_exit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_team_kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_team_invert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_invert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_invert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_invert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_cmsg_team_chat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_chat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_chat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_smsg_team_chat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_hall_team_multi_battle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::game::_push_team_hall_multi_battle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "msg_team.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 40);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016msg_team.proto\022\rprotocol.game\032\020msg_bat"
      "tle.proto\"R\n\031req_hall_rc_single_battle\0225"
      "\n\006player\030\001 \002(\0132%.protocol.game.msg_battl"
      "e_player_info\"}\n\031rep_hall_rc_single_batt"
      "le\022\016\n\006udp_ip\030\001 \002(\t\022\020\n\010udp_port\030\002 \002(\005\022\016\n\006"
      "tcp_ip\030\003 \002(\t\022\020\n\010tcp_port\030\004 \002(\005\022\014\n\004code\030\005"
      " \002(\t\022\016\n\006is_new\030\006 \002(\005\"v\n\022smsg_single_batt"
      "le\022\016\n\006udp_ip\030\001 \002(\t\022\020\n\010udp_port\030\002 \002(\005\022\016\n\006"
      "tcp_ip\030\003 \002(\t\022\020\n\010tcp_port\030\004 \002(\005\022\014\n\004code\030\005"
      " \002(\t\022\016\n\006is_new\030\006 \002(\005\"b\n\030req_team_rc_mult"
      "i_battle\022\017\n\007team_id\030\001 \002(\005\0225\n\006player\030\002 \003("
      "\0132%.protocol.game.msg_battle_player_info"
      "\"z\n\030rep_team_rc_multi_battle\022\016\n\006udp_ip\030\001"
      " \002(\t\022\020\n\010udp_port\030\002 \002(\005\022\016\n\006tcp_ip\030\003 \002(\t\022\020"
      "\n\010tcp_port\030\004 \002(\005\022\014\n\004guid\030\005 \003(\004\022\014\n\004code\030\006"
      " \003(\t\"r\n\021smsg_multi_battle\022\016\n\006udp_ip\030\001 \002("
      "\t\022\020\n\010udp_port\030\002 \002(\005\022\016\n\006tcp_ip\030\003 \002(\t\022\020\n\010t"
      "cp_port\030\004 \002(\005\022\014\n\004code\030\005 \002(\t\022\013\n\003num\030\006 \002(\005"
      "\"c\n\017smsg_has_battle\022\016\n\006udp_ip\030\001 \002(\t\022\020\n\010u"
      "dp_port\030\002 \002(\005\022\016\n\006tcp_ip\030\003 \002(\t\022\020\n\010tcp_por"
      "t\030\004 \002(\005\022\014\n\004code\030\005 \002(\t\"&\n\026req_hall_rc_has"
      "_battle\022\014\n\004guid\030\001 \002(\004\"z\n\026rep_hall_rc_has"
      "_battle\022\016\n\006is_new\030\001 \002(\005\022\016\n\006udp_ip\030\002 \002(\t\022"
      "\020\n\010udp_port\030\003 \002(\005\022\016\n\006tcp_ip\030\004 \002(\t\022\020\n\010tcp"
      "_port\030\005 \002(\005\022\014\n\004code\030\006 \002(\t\"}\n\017msg_team_pl"
      "ayer\022\014\n\004guid\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\013\n\003sex\030"
      "\003 \002(\005\022\016\n\006avatar\030\004 \002(\005\022\020\n\010toukuang\030\006 \002(\005\022"
      "\013\n\003cup\030\007 \002(\005\022\022\n\nname_color\030\010 \002(\005\"]\n\017msg_"
      "team_member\022\023\n\013member_type\030\001 \002(\005\0225\n\006play"
      "er\030\002 \002(\0132%.protocol.game.msg_battle_play"
      "er_info\"K\n\010msg_team\022\017\n\007team_id\030\001 \002(\005\022.\n\006"
      "member\030\002 \003(\0132\036.protocol.game.msg_team_me"
      "mber\"G\n\024push_team_hall_error\022\023\n\013player_g"
      "uid\030\001 \002(\004\022\014\n\004code\030\002 \002(\005\022\014\n\004text\030\003 \001(\t\"N\n"
      "\025push_hall_team_create\0225\n\006player\030\001 \002(\0132%"
      ".protocol.game.msg_battle_player_info\"S\n"
      "\025push_team_hall_create\022\023\n\013player_guid\030\001 "
      "\002(\004\022%\n\004team\030\002 \002(\0132\027.protocol.game.msg_te"
      "am\"9\n\020smsg_team_create\022%\n\004team\030\001 \002(\0132\027.p"
      "rotocol.game.msg_team\"D\n\021smsg_team_tuiji"
      "an\022/\n\007players\030\001 \003(\0132\036.protocol.game.msg_"
      "team_player\"%\n\016cmsg_team_join\022\023\n\013player_"
      "guid\030\001 \002(\004\"a\n\023push_hall_team_join\022\023\n\013pla"
      "yer_guid\030\001 \002(\004\0225\n\006player\030\002 \002(\0132%.protoco"
      "l.game.msg_battle_player_info\"Q\n\023push_te"
      "am_hall_join\022\023\n\013player_guid\030\001 \002(\004\022%\n\004tea"
      "m\030\002 \002(\0132\027.protocol.game.msg_team\"7\n\016smsg"
      "_team_join\022%\n\004team\030\001 \002(\0132\027.protocol.game"
      ".msg_team\"Z\n\031push_team_hall_other_join\022\r"
      "\n\005guids\030\001 \003(\004\022.\n\006member\030\002 \002(\0132\036.protocol"
      ".game.msg_team_member\"F\n\024smsg_team_other"
      "_join\022.\n\006member\030\001 \002(\0132\036.protocol.game.ms"
      "g_team_member\"9\n\023push_hall_team_exit\022\023\n\013"
      "player_guid\030\001 \002(\004\022\r\n\005mauto\030\002 \002(\005\"N\n\023push"
      "_team_hall_exit\022\r\n\005guids\030\001 \003(\004\022\023\n\013leader"
      "_guid\030\002 \002(\004\022\023\n\013player_guid\030\003 \002(\004\":\n\016smsg"
      "_team_exit\022\023\n\013leader_guid\030\001 \002(\004\022\023\n\013playe"
      "r_guid\030\002 \002(\004\"%\n\016cmsg_team_kick\022\023\n\013target"
      "_guid\030\001 \002(\004\"\?\n\023push_hall_team_kick\022\023\n\013pl"
      "ayer_guid\030\001 \002(\004\022\023\n\013target_guid\030\002 \002(\004\"9\n\023"
      "push_team_hall_kick\022\r\n\005guids\030\001 \003(\004\022\023\n\013pl"
      "ayer_guid\030\002 \002(\004\"%\n\016smsg_team_kick\022\023\n\013pla"
      "yer_guid\030\001 \002(\004\"\'\n\020cmsg_team_invert\022\023\n\013ta"
      "rget_guid\030\001 \002(\004\"A\n\025push_hall_team_invert"
      "\022\023\n\013player_guid\030\001 \002(\004\022\023\n\013target_guid\030\002 \002"
      "(\004\"\\\n\025push_team_hall_invert\022\023\n\013target_gu"
      "id\030\001 \002(\004\022.\n\006player\030\002 \002(\0132\036.protocol.game"
      ".msg_team_player\"B\n\020smsg_team_invert\022.\n\006"
      "player\030\001 \002(\0132\036.protocol.game.msg_team_pl"
      "ayer\"\036\n\016cmsg_team_chat\022\014\n\004text\030\001 \002(\t\"8\n\023"
      "push_hall_team_chat\022\023\n\013player_guid\030\001 \002(\004"
      "\022\014\n\004text\030\002 \002(\t\"G\n\023push_team_hall_chat\022\r\n"
      "\005guids\030\001 \003(\004\022\023\n\013player_guid\030\002 \002(\004\022\014\n\004tex"
      "t\030\003 \002(\t\"3\n\016smsg_team_chat\022\023\n\013player_guid"
      "\030\001 \002(\004\022\014\n\004text\030\002 \002(\t\"2\n\033push_hall_team_m"
      "ulti_battle\022\023\n\013player_guid\030\001 \002(\004\"\213\001\n\033pus"
      "h_team_hall_multi_battle\022\r\n\005guids\030\001 \003(\004\022"
      "\016\n\006udp_ip\030\002 \002(\t\022\020\n\010udp_port\030\003 \002(\005\022\016\n\006tcp"
      "_ip\030\004 \002(\t\022\020\n\010tcp_port\030\005 \002(\005\022\014\n\004code\030\006 \003("
      "\t\022\013\n\003num\030\007 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_team.proto", &protobuf_RegisterTypes);
  ::protobuf_msg_5fbattle_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_msg_5fteam_2eproto
namespace protocol {
namespace game {

// ===================================================================

void req_hall_rc_single_battle::InitAsDefaultInstance() {
  ::protocol::game::_req_hall_rc_single_battle_default_instance_._instance.get_mutable()->player_ = const_cast< ::protocol::game::msg_battle_player_info*>(
      ::protocol::game::msg_battle_player_info::internal_default_instance());
}
void req_hall_rc_single_battle::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_hall_rc_single_battle::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_hall_rc_single_battle::req_hall_rc_single_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_req_hall_rc_single_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.req_hall_rc_single_battle)
}
req_hall_rc_single_battle::req_hall_rc_single_battle(const req_hall_rc_single_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::protocol::game::msg_battle_player_info(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.req_hall_rc_single_battle)
}

void req_hall_rc_single_battle::SharedCtor() {
  player_ = NULL;
}

req_hall_rc_single_battle::~req_hall_rc_single_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.req_hall_rc_single_battle)
  SharedDtor();
}

void req_hall_rc_single_battle::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void req_hall_rc_single_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* req_hall_rc_single_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_hall_rc_single_battle& req_hall_rc_single_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_req_hall_rc_single_battle.base);
  return *internal_default_instance();
}


void req_hall_rc_single_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.req_hall_rc_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool req_hall_rc_single_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.req_hall_rc_single_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_battle_player_info player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.req_hall_rc_single_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.req_hall_rc_single_battle)
  return false;
#undef DO_
}

void req_hall_rc_single_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.req_hall_rc_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_player_info player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.req_hall_rc_single_battle)
}

::google::protobuf::uint8* req_hall_rc_single_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.req_hall_rc_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_player_info player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.req_hall_rc_single_battle)
  return target;
}

size_t req_hall_rc_single_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.req_hall_rc_single_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_battle_player_info player = 1;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void req_hall_rc_single_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.req_hall_rc_single_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const req_hall_rc_single_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_hall_rc_single_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.req_hall_rc_single_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.req_hall_rc_single_battle)
    MergeFrom(*source);
  }
}

void req_hall_rc_single_battle::MergeFrom(const req_hall_rc_single_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.req_hall_rc_single_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::protocol::game::msg_battle_player_info::MergeFrom(from.player());
  }
}

void req_hall_rc_single_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.req_hall_rc_single_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_hall_rc_single_battle::CopyFrom(const req_hall_rc_single_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.req_hall_rc_single_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_hall_rc_single_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void req_hall_rc_single_battle::Swap(req_hall_rc_single_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_hall_rc_single_battle::InternalSwap(req_hall_rc_single_battle* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata req_hall_rc_single_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rep_hall_rc_single_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_hall_rc_single_battle::kUdpIpFieldNumber;
const int rep_hall_rc_single_battle::kUdpPortFieldNumber;
const int rep_hall_rc_single_battle::kTcpIpFieldNumber;
const int rep_hall_rc_single_battle::kTcpPortFieldNumber;
const int rep_hall_rc_single_battle::kCodeFieldNumber;
const int rep_hall_rc_single_battle::kIsNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_hall_rc_single_battle::rep_hall_rc_single_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_rep_hall_rc_single_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.rep_hall_rc_single_battle)
}
rep_hall_rc_single_battle::rep_hall_rc_single_battle(const rep_hall_rc_single_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&udp_port_, &from.udp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_) -
    reinterpret_cast<char*>(&udp_port_)) + sizeof(is_new_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.rep_hall_rc_single_battle)
}

void rep_hall_rc_single_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&udp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_) -
      reinterpret_cast<char*>(&udp_port_)) + sizeof(is_new_));
}

rep_hall_rc_single_battle::~rep_hall_rc_single_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.rep_hall_rc_single_battle)
  SharedDtor();
}

void rep_hall_rc_single_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rep_hall_rc_single_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rep_hall_rc_single_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rep_hall_rc_single_battle& rep_hall_rc_single_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_rep_hall_rc_single_battle.base);
  return *internal_default_instance();
}


void rep_hall_rc_single_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.rep_hall_rc_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      set_changed();
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&udp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_new_) -
        reinterpret_cast<char*>(&udp_port_)) + sizeof(is_new_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rep_hall_rc_single_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.rep_hall_rc_single_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string udp_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_hall_rc_single_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_hall_rc_single_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_hall_rc_single_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_new = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.rep_hall_rc_single_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.rep_hall_rc_single_battle)
  return false;
#undef DO_
}

void rep_hall_rc_single_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.rep_hall_rc_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_single_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->udp_ip(), output);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udp_port(), output);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_single_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tcp_port(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_single_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // required int32 is_new = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_new(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.rep_hall_rc_single_battle)
}

::google::protobuf::uint8* rep_hall_rc_single_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.rep_hall_rc_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_single_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->udp_ip(), target);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udp_port(), target);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_single_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tcp_port(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_single_battle.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // required int32 is_new = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_new(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.rep_hall_rc_single_battle)
  return target;
}

size_t rep_hall_rc_single_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.rep_hall_rc_single_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  if (has_is_new()) {
    // required int32 is_new = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());
  }

  return total_size;
}
size_t rep_hall_rc_single_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.rep_hall_rc_single_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

    // required int32 is_new = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rep_hall_rc_single_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.rep_hall_rc_single_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const rep_hall_rc_single_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_hall_rc_single_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.rep_hall_rc_single_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.rep_hall_rc_single_battle)
    MergeFrom(*source);
  }
}

void rep_hall_rc_single_battle::MergeFrom(const rep_hall_rc_single_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.rep_hall_rc_single_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      tcp_port_ = from.tcp_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_new_ = from.is_new_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rep_hall_rc_single_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.rep_hall_rc_single_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_hall_rc_single_battle::CopyFrom(const rep_hall_rc_single_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.rep_hall_rc_single_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_hall_rc_single_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void rep_hall_rc_single_battle::Swap(rep_hall_rc_single_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_hall_rc_single_battle::InternalSwap(rep_hall_rc_single_battle* other) {
  using std::swap;
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(is_new_, other->is_new_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rep_hall_rc_single_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_single_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_single_battle::kUdpIpFieldNumber;
const int smsg_single_battle::kUdpPortFieldNumber;
const int smsg_single_battle::kTcpIpFieldNumber;
const int smsg_single_battle::kTcpPortFieldNumber;
const int smsg_single_battle::kCodeFieldNumber;
const int smsg_single_battle::kIsNewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_single_battle::smsg_single_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_single_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_single_battle)
}
smsg_single_battle::smsg_single_battle(const smsg_single_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&udp_port_, &from.udp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_) -
    reinterpret_cast<char*>(&udp_port_)) + sizeof(is_new_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_single_battle)
}

void smsg_single_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&udp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_) -
      reinterpret_cast<char*>(&udp_port_)) + sizeof(is_new_));
}

smsg_single_battle::~smsg_single_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_single_battle)
  SharedDtor();
}

void smsg_single_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_single_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_single_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_single_battle& smsg_single_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_single_battle.base);
  return *internal_default_instance();
}


void smsg_single_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      set_changed();
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&udp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_new_) -
        reinterpret_cast<char*>(&udp_port_)) + sizeof(is_new_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_single_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_single_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string udp_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_single_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_single_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_single_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 is_new = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_single_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_single_battle)
  return false;
#undef DO_
}

void smsg_single_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_single_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->udp_ip(), output);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udp_port(), output);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_single_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tcp_port(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_single_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // required int32 is_new = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_new(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_single_battle)
}

::google::protobuf::uint8* smsg_single_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_single_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_single_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->udp_ip(), target);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udp_port(), target);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_single_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tcp_port(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_single_battle.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // required int32 is_new = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_new(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_single_battle)
  return target;
}

size_t smsg_single_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.smsg_single_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  if (has_is_new()) {
    // required int32 is_new = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());
  }

  return total_size;
}
size_t smsg_single_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_single_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

    // required int32 is_new = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_single_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_single_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_single_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_single_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_single_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_single_battle)
    MergeFrom(*source);
  }
}

void smsg_single_battle::MergeFrom(const smsg_single_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_single_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      tcp_port_ = from.tcp_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_new_ = from.is_new_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void smsg_single_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_single_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_single_battle::CopyFrom(const smsg_single_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_single_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_single_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void smsg_single_battle::Swap(smsg_single_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_single_battle::InternalSwap(smsg_single_battle* other) {
  using std::swap;
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(is_new_, other->is_new_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_single_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void req_team_rc_multi_battle::InitAsDefaultInstance() {
}
void req_team_rc_multi_battle::clear_player() {
  player_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_team_rc_multi_battle::kTeamIdFieldNumber;
const int req_team_rc_multi_battle::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_team_rc_multi_battle::req_team_rc_multi_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_req_team_rc_multi_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.req_team_rc_multi_battle)
}
req_team_rc_multi_battle::req_team_rc_multi_battle(const req_team_rc_multi_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_(from.player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.req_team_rc_multi_battle)
}

void req_team_rc_multi_battle::SharedCtor() {
  team_id_ = 0;
}

req_team_rc_multi_battle::~req_team_rc_multi_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.req_team_rc_multi_battle)
  SharedDtor();
}

void req_team_rc_multi_battle::SharedDtor() {
}

void req_team_rc_multi_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* req_team_rc_multi_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_team_rc_multi_battle& req_team_rc_multi_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_req_team_rc_multi_battle.base);
  return *internal_default_instance();
}


void req_team_rc_multi_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.req_team_rc_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  set_changed();
  team_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool req_team_rc_multi_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.req_team_rc_multi_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_battle_player_info player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.req_team_rc_multi_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.req_team_rc_multi_battle)
  return false;
#undef DO_
}

void req_team_rc_multi_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.req_team_rc_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // repeated .protocol.game.msg_battle_player_info player = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->player(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.req_team_rc_multi_battle)
}

::google::protobuf::uint8* req_team_rc_multi_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.req_team_rc_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // repeated .protocol.game.msg_battle_player_info player = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->player(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.req_team_rc_multi_battle)
  return target;
}

size_t req_team_rc_multi_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.req_team_rc_multi_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_id());
  }
  // repeated .protocol.game.msg_battle_player_info player = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->player_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void req_team_rc_multi_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.req_team_rc_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const req_team_rc_multi_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_team_rc_multi_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.req_team_rc_multi_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.req_team_rc_multi_battle)
    MergeFrom(*source);
  }
}

void req_team_rc_multi_battle::MergeFrom(const req_team_rc_multi_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.req_team_rc_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void req_team_rc_multi_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.req_team_rc_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_team_rc_multi_battle::CopyFrom(const req_team_rc_multi_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.req_team_rc_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_team_rc_multi_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->player())) return false;
  return true;
}

void req_team_rc_multi_battle::Swap(req_team_rc_multi_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_team_rc_multi_battle::InternalSwap(req_team_rc_multi_battle* other) {
  using std::swap;
  CastToBase(&player_)->InternalSwap(CastToBase(&other->player_));
  swap(team_id_, other->team_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata req_team_rc_multi_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rep_team_rc_multi_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_team_rc_multi_battle::kUdpIpFieldNumber;
const int rep_team_rc_multi_battle::kUdpPortFieldNumber;
const int rep_team_rc_multi_battle::kTcpIpFieldNumber;
const int rep_team_rc_multi_battle::kTcpPortFieldNumber;
const int rep_team_rc_multi_battle::kGuidFieldNumber;
const int rep_team_rc_multi_battle::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_team_rc_multi_battle::rep_team_rc_multi_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_rep_team_rc_multi_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.rep_team_rc_multi_battle)
}
rep_team_rc_multi_battle::rep_team_rc_multi_battle(const rep_team_rc_multi_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guid_(from.guid_),
      code_(from.code_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  ::memcpy(&udp_port_, &from.udp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_port_) -
    reinterpret_cast<char*>(&udp_port_)) + sizeof(tcp_port_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.rep_team_rc_multi_battle)
}

void rep_team_rc_multi_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&udp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_port_) -
      reinterpret_cast<char*>(&udp_port_)) + sizeof(tcp_port_));
}

rep_team_rc_multi_battle::~rep_team_rc_multi_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.rep_team_rc_multi_battle)
  SharedDtor();
}

void rep_team_rc_multi_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rep_team_rc_multi_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rep_team_rc_multi_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rep_team_rc_multi_battle& rep_team_rc_multi_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_rep_team_rc_multi_battle.base);
  return *internal_default_instance();
}


void rep_team_rc_multi_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.rep_team_rc_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guid_.Clear();
  set_changed();
  code_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&udp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcp_port_) -
        reinterpret_cast<char*>(&udp_port_)) + sizeof(tcp_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rep_team_rc_multi_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.rep_team_rc_multi_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string udp_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_team_rc_multi_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_team_rc_multi_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_guid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code(this->code_size() - 1).data(),
            static_cast<int>(this->code(this->code_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_team_rc_multi_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.rep_team_rc_multi_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.rep_team_rc_multi_battle)
  return false;
#undef DO_
}

void rep_team_rc_multi_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.rep_team_rc_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_team_rc_multi_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->udp_ip(), output);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udp_port(), output);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_team_rc_multi_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tcp_port(), output);
  }

  // repeated uint64 guid = 5;
  for (int i = 0, n = this->guid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->guid(i), output);
  }

  // repeated string code = 6;
  for (int i = 0, n = this->code_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code(i).data(), static_cast<int>(this->code(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_team_rc_multi_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->code(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.rep_team_rc_multi_battle)
}

::google::protobuf::uint8* rep_team_rc_multi_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.rep_team_rc_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_team_rc_multi_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->udp_ip(), target);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udp_port(), target);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_team_rc_multi_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tcp_port(), target);
  }

  // repeated uint64 guid = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->guid_, target);

  // repeated string code = 6;
  for (int i = 0, n = this->code_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code(i).data(), static_cast<int>(this->code(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_team_rc_multi_battle.code");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->code(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.rep_team_rc_multi_battle)
  return target;
}

size_t rep_team_rc_multi_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.rep_team_rc_multi_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  return total_size;
}
size_t rep_team_rc_multi_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.rep_team_rc_multi_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 guid = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->guid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guid_size());
    total_size += data_size;
  }

  // repeated string code = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->code_size());
  for (int i = 0, n = this->code_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->code(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rep_team_rc_multi_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.rep_team_rc_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const rep_team_rc_multi_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_team_rc_multi_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.rep_team_rc_multi_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.rep_team_rc_multi_battle)
    MergeFrom(*source);
  }
}

void rep_team_rc_multi_battle::MergeFrom(const rep_team_rc_multi_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.rep_team_rc_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guid_.MergeFrom(from.guid_);
  code_.MergeFrom(from.code_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      tcp_port_ = from.tcp_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rep_team_rc_multi_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.rep_team_rc_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_team_rc_multi_battle::CopyFrom(const rep_team_rc_multi_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.rep_team_rc_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_team_rc_multi_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void rep_team_rc_multi_battle::Swap(rep_team_rc_multi_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_team_rc_multi_battle::InternalSwap(rep_team_rc_multi_battle* other) {
  using std::swap;
  guid_.InternalSwap(&other->guid_);
  code_.InternalSwap(CastToBase(&other->code_));
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rep_team_rc_multi_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_multi_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_multi_battle::kUdpIpFieldNumber;
const int smsg_multi_battle::kUdpPortFieldNumber;
const int smsg_multi_battle::kTcpIpFieldNumber;
const int smsg_multi_battle::kTcpPortFieldNumber;
const int smsg_multi_battle::kCodeFieldNumber;
const int smsg_multi_battle::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_multi_battle::smsg_multi_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_multi_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_multi_battle)
}
smsg_multi_battle::smsg_multi_battle(const smsg_multi_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&udp_port_, &from.udp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&udp_port_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_multi_battle)
}

void smsg_multi_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&udp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&udp_port_)) + sizeof(num_));
}

smsg_multi_battle::~smsg_multi_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_multi_battle)
  SharedDtor();
}

void smsg_multi_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_multi_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_multi_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_multi_battle& smsg_multi_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_multi_battle.base);
  return *internal_default_instance();
}


void smsg_multi_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      set_changed();
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&udp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&udp_port_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_multi_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_multi_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string udp_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_multi_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_multi_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_multi_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_multi_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_multi_battle)
  return false;
#undef DO_
}

void smsg_multi_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_multi_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->udp_ip(), output);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udp_port(), output);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_multi_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tcp_port(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_multi_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // required int32 num = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_multi_battle)
}

::google::protobuf::uint8* smsg_multi_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_multi_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->udp_ip(), target);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udp_port(), target);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_multi_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tcp_port(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_multi_battle.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // required int32 num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_multi_battle)
  return target;
}

size_t smsg_multi_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.smsg_multi_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  if (has_num()) {
    // required int32 num = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  return total_size;
}
size_t smsg_multi_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_multi_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

    // required int32 num = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_multi_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_multi_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_multi_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_multi_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_multi_battle)
    MergeFrom(*source);
  }
}

void smsg_multi_battle::MergeFrom(const smsg_multi_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      tcp_port_ = from.tcp_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void smsg_multi_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_multi_battle::CopyFrom(const smsg_multi_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_multi_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void smsg_multi_battle::Swap(smsg_multi_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_multi_battle::InternalSwap(smsg_multi_battle* other) {
  using std::swap;
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_multi_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_has_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_has_battle::kUdpIpFieldNumber;
const int smsg_has_battle::kUdpPortFieldNumber;
const int smsg_has_battle::kTcpIpFieldNumber;
const int smsg_has_battle::kTcpPortFieldNumber;
const int smsg_has_battle::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_has_battle::smsg_has_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_has_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_has_battle)
}
smsg_has_battle::smsg_has_battle(const smsg_has_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&udp_port_, &from.udp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_port_) -
    reinterpret_cast<char*>(&udp_port_)) + sizeof(tcp_port_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_has_battle)
}

void smsg_has_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&udp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_port_) -
      reinterpret_cast<char*>(&udp_port_)) + sizeof(tcp_port_));
}

smsg_has_battle::~smsg_has_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_has_battle)
  SharedDtor();
}

void smsg_has_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_has_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_has_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_has_battle& smsg_has_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_has_battle.base);
  return *internal_default_instance();
}


void smsg_has_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      set_changed();
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&udp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcp_port_) -
        reinterpret_cast<char*>(&udp_port_)) + sizeof(tcp_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_has_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_has_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string udp_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_has_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_has_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_has_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_has_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_has_battle)
  return false;
#undef DO_
}

void smsg_has_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_has_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->udp_ip(), output);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udp_port(), output);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_has_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tcp_port(), output);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_has_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_has_battle)
}

::google::protobuf::uint8* smsg_has_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_has_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->udp_ip(), target);
  }

  // required int32 udp_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udp_port(), target);
  }

  // required string tcp_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_has_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tcp_port(), target);
  }

  // required string code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_has_battle.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_has_battle)
  return target;
}

size_t smsg_has_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.smsg_has_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_code()) {
    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  return total_size;
}
size_t smsg_has_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_has_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string udp_ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required string code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 udp_port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_has_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_has_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_has_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_has_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_has_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_has_battle)
    MergeFrom(*source);
  }
}

void smsg_has_battle::MergeFrom(const smsg_has_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_has_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      tcp_port_ = from.tcp_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void smsg_has_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_has_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_has_battle::CopyFrom(const smsg_has_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_has_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_has_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void smsg_has_battle::Swap(smsg_has_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_has_battle::InternalSwap(smsg_has_battle* other) {
  using std::swap;
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_has_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void req_hall_rc_has_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_hall_rc_has_battle::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_hall_rc_has_battle::req_hall_rc_has_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_req_hall_rc_has_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.req_hall_rc_has_battle)
}
req_hall_rc_has_battle::req_hall_rc_has_battle(const req_hall_rc_has_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_ = from.guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.req_hall_rc_has_battle)
}

void req_hall_rc_has_battle::SharedCtor() {
  guid_ = GOOGLE_ULONGLONG(0);
}

req_hall_rc_has_battle::~req_hall_rc_has_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.req_hall_rc_has_battle)
  SharedDtor();
}

void req_hall_rc_has_battle::SharedDtor() {
}

void req_hall_rc_has_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* req_hall_rc_has_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_hall_rc_has_battle& req_hall_rc_has_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_req_hall_rc_has_battle.base);
  return *internal_default_instance();
}


void req_hall_rc_has_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.req_hall_rc_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool req_hall_rc_has_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.req_hall_rc_has_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.req_hall_rc_has_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.req_hall_rc_has_battle)
  return false;
#undef DO_
}

void req_hall_rc_has_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.req_hall_rc_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.req_hall_rc_has_battle)
}

::google::protobuf::uint8* req_hall_rc_has_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.req_hall_rc_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.req_hall_rc_has_battle)
  return target;
}

size_t req_hall_rc_has_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.req_hall_rc_has_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 guid = 1;
  if (has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void req_hall_rc_has_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.req_hall_rc_has_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const req_hall_rc_has_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_hall_rc_has_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.req_hall_rc_has_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.req_hall_rc_has_battle)
    MergeFrom(*source);
  }
}

void req_hall_rc_has_battle::MergeFrom(const req_hall_rc_has_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.req_hall_rc_has_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guid()) {
    set_guid(from.guid());
  }
}

void req_hall_rc_has_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.req_hall_rc_has_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_hall_rc_has_battle::CopyFrom(const req_hall_rc_has_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.req_hall_rc_has_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_hall_rc_has_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void req_hall_rc_has_battle::Swap(req_hall_rc_has_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_hall_rc_has_battle::InternalSwap(req_hall_rc_has_battle* other) {
  using std::swap;
  swap(guid_, other->guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata req_hall_rc_has_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rep_hall_rc_has_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rep_hall_rc_has_battle::kIsNewFieldNumber;
const int rep_hall_rc_has_battle::kUdpIpFieldNumber;
const int rep_hall_rc_has_battle::kUdpPortFieldNumber;
const int rep_hall_rc_has_battle::kTcpIpFieldNumber;
const int rep_hall_rc_has_battle::kTcpPortFieldNumber;
const int rep_hall_rc_has_battle::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rep_hall_rc_has_battle::rep_hall_rc_has_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_rep_hall_rc_has_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.rep_hall_rc_has_battle)
}
rep_hall_rc_has_battle::rep_hall_rc_has_battle(const rep_hall_rc_has_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&is_new_, &from.is_new_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_port_) -
    reinterpret_cast<char*>(&is_new_)) + sizeof(tcp_port_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.rep_hall_rc_has_battle)
}

void rep_hall_rc_has_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_new_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_port_) -
      reinterpret_cast<char*>(&is_new_)) + sizeof(tcp_port_));
}

rep_hall_rc_has_battle::~rep_hall_rc_has_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.rep_hall_rc_has_battle)
  SharedDtor();
}

void rep_hall_rc_has_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rep_hall_rc_has_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rep_hall_rc_has_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rep_hall_rc_has_battle& rep_hall_rc_has_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_rep_hall_rc_has_battle.base);
  return *internal_default_instance();
}


void rep_hall_rc_has_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.rep_hall_rc_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      set_changed();
      code_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&is_new_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcp_port_) -
        reinterpret_cast<char*>(&is_new_)) + sizeof(tcp_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rep_hall_rc_has_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.rep_hall_rc_has_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 is_new = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string udp_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_hall_rc_has_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_hall_rc_has_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.rep_hall_rc_has_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.rep_hall_rc_has_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.rep_hall_rc_has_battle)
  return false;
#undef DO_
}

void rep_hall_rc_has_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.rep_hall_rc_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 is_new = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_new(), output);
  }

  // required string udp_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_has_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->udp_ip(), output);
  }

  // required int32 udp_port = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->udp_port(), output);
  }

  // required string tcp_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_has_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tcp_port(), output);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_has_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.rep_hall_rc_has_battle)
}

::google::protobuf::uint8* rep_hall_rc_has_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.rep_hall_rc_has_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 is_new = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_new(), target);
  }

  // required string udp_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_has_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->udp_ip(), target);
  }

  // required int32 udp_port = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->udp_port(), target);
  }

  // required string tcp_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_has_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tcp_port(), target);
  }

  // required string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.rep_hall_rc_has_battle.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.rep_hall_rc_has_battle)
  return target;
}

size_t rep_hall_rc_has_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.rep_hall_rc_has_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_code()) {
    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_is_new()) {
    // required int32 is_new = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  return total_size;
}
size_t rep_hall_rc_has_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.rep_hall_rc_has_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string udp_ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required string code = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 is_new = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new());

    // required int32 udp_port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rep_hall_rc_has_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.rep_hall_rc_has_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const rep_hall_rc_has_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rep_hall_rc_has_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.rep_hall_rc_has_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.rep_hall_rc_has_battle)
    MergeFrom(*source);
  }
}

void rep_hall_rc_has_battle::MergeFrom(const rep_hall_rc_has_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.rep_hall_rc_has_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      is_new_ = from.is_new_;
    }
    if (cached_has_bits & 0x00000010u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      tcp_port_ = from.tcp_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rep_hall_rc_has_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.rep_hall_rc_has_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rep_hall_rc_has_battle::CopyFrom(const rep_hall_rc_has_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.rep_hall_rc_has_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rep_hall_rc_has_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void rep_hall_rc_has_battle::Swap(rep_hall_rc_has_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rep_hall_rc_has_battle::InternalSwap(rep_hall_rc_has_battle* other) {
  using std::swap;
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_new_, other->is_new_);
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rep_hall_rc_has_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_team_player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_team_player::kGuidFieldNumber;
const int msg_team_player::kNameFieldNumber;
const int msg_team_player::kSexFieldNumber;
const int msg_team_player::kAvatarFieldNumber;
const int msg_team_player::kToukuangFieldNumber;
const int msg_team_player::kCupFieldNumber;
const int msg_team_player::kNameColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_team_player::msg_team_player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_team_player)
}
msg_team_player::msg_team_player(const msg_team_player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_color_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(name_color_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_team_player)
}

void msg_team_player::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_color_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(name_color_));
}

msg_team_player::~msg_team_player() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_team_player)
  SharedDtor();
}

void msg_team_player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void msg_team_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_team_player::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_team_player& msg_team_player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_msg_team_player.base);
  return *internal_default_instance();
}


void msg_team_player::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_team_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_color_) -
        reinterpret_cast<char*>(&guid_)) + sizeof(name_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_team_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_team_player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.msg_team_player.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 avatar = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_avatar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 toukuang = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_toukuang();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toukuang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cup = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 name_color = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_name_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_team_player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_team_player)
  return false;
#undef DO_
}

void msg_team_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_team_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_team_player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 sex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // required int32 avatar = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avatar(), output);
  }

  // required int32 toukuang = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->toukuang(), output);
  }

  // required int32 cup = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cup(), output);
  }

  // required int32 name_color = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->name_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_team_player)
}

::google::protobuf::uint8* msg_team_player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_team_player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.msg_team_player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 sex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // required int32 avatar = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avatar(), target);
  }

  // required int32 toukuang = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->toukuang(), target);
  }

  // required int32 cup = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cup(), target);
  }

  // required int32 name_color = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->name_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_team_player)
  return target;
}

size_t msg_team_player::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.msg_team_player)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_guid()) {
    // required uint64 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  if (has_sex()) {
    // required int32 sex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  if (has_avatar()) {
    // required int32 avatar = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatar());
  }

  if (has_toukuang()) {
    // required int32 toukuang = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toukuang());
  }

  if (has_cup()) {
    // required int32 cup = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cup());
  }

  if (has_name_color()) {
    // required int32 name_color = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->name_color());
  }

  return total_size;
}
size_t msg_team_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_team_player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());

    // required int32 sex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

    // required int32 avatar = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avatar());

    // required int32 toukuang = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toukuang());

    // required int32 cup = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cup());

    // required int32 name_color = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->name_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_team_player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_team_player)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_team_player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_team_player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_team_player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_team_player)
    MergeFrom(*source);
  }
}

void msg_team_player::MergeFrom(const msg_team_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_team_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      guid_ = from.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000008u) {
      avatar_ = from.avatar_;
    }
    if (cached_has_bits & 0x00000010u) {
      toukuang_ = from.toukuang_;
    }
    if (cached_has_bits & 0x00000020u) {
      cup_ = from.cup_;
    }
    if (cached_has_bits & 0x00000040u) {
      name_color_ = from.name_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_team_player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_team_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_team_player::CopyFrom(const msg_team_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_team_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_team_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void msg_team_player::Swap(msg_team_player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_team_player::InternalSwap(msg_team_player* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guid_, other->guid_);
  swap(sex_, other->sex_);
  swap(avatar_, other->avatar_);
  swap(toukuang_, other->toukuang_);
  swap(cup_, other->cup_);
  swap(name_color_, other->name_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_team_player::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_team_member::InitAsDefaultInstance() {
  ::protocol::game::_msg_team_member_default_instance_._instance.get_mutable()->player_ = const_cast< ::protocol::game::msg_battle_player_info*>(
      ::protocol::game::msg_battle_player_info::internal_default_instance());
}
void msg_team_member::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_team_member::kMemberTypeFieldNumber;
const int msg_team_member::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_team_member::msg_team_member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team_member.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_team_member)
}
msg_team_member::msg_team_member(const msg_team_member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::protocol::game::msg_battle_player_info(*from.player_);
  } else {
    player_ = NULL;
  }
  member_type_ = from.member_type_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_team_member)
}

void msg_team_member::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_type_) -
      reinterpret_cast<char*>(&player_)) + sizeof(member_type_));
}

msg_team_member::~msg_team_member() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_team_member)
  SharedDtor();
}

void msg_team_member::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void msg_team_member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_team_member::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_team_member& msg_team_member::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_msg_team_member.base);
  return *internal_default_instance();
}


void msg_team_member::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_team_member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  set_changed();
  member_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_team_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_team_member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 member_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_member_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_battle_player_info player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_team_member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_team_member)
  return false;
#undef DO_
}

void msg_team_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_team_member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 member_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->member_type(), output);
  }

  // required .protocol.game.msg_battle_player_info player = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_team_member)
}

::google::protobuf::uint8* msg_team_member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_team_member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 member_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->member_type(), target);
  }

  // required .protocol.game.msg_battle_player_info player = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_team_member)
  return target;
}

size_t msg_team_member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.msg_team_member)
  size_t total_size = 0;

  if (has_player()) {
    // required .protocol.game.msg_battle_player_info player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (has_member_type()) {
    // required int32 member_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_type());
  }

  return total_size;
}
size_t msg_team_member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_team_member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.game.msg_battle_player_info player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);

    // required int32 member_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->member_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_team_member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_team_member)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_team_member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_team_member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_team_member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_team_member)
    MergeFrom(*source);
  }
}

void msg_team_member::MergeFrom(const msg_team_member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_team_member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player()->::protocol::game::msg_battle_player_info::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000002u) {
      member_type_ = from.member_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_team_member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_team_member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_team_member::CopyFrom(const msg_team_member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_team_member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_team_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void msg_team_member::Swap(msg_team_member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_team_member::InternalSwap(msg_team_member* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(member_type_, other->member_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_team_member::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_team::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_team::kTeamIdFieldNumber;
const int msg_team::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_team::msg_team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_msg_team.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.msg_team)
}
msg_team::msg_team(const msg_team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.msg_team)
}

void msg_team::SharedCtor() {
  team_id_ = 0;
}

msg_team::~msg_team() {
  // @@protoc_insertion_point(destructor:protocol.game.msg_team)
  SharedDtor();
}

void msg_team::SharedDtor() {
}

void msg_team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_team::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_team& msg_team::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_msg_team.base);
  return *internal_default_instance();
}


void msg_team::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.msg_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  set_changed();
  team_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.msg_team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.game.msg_team_member member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.msg_team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.msg_team)
  return false;
#undef DO_
}

void msg_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.msg_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }

  // repeated .protocol.game.msg_team_member member = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->member(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.msg_team)
}

::google::protobuf::uint8* msg_team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.msg_team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }

  // repeated .protocol.game.msg_team_member member = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->member_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->member(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.msg_team)
  return target;
}

size_t msg_team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.msg_team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team_id());
  }
  // repeated .protocol.game.msg_team_member member = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->member_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->member(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.msg_team)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.msg_team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.msg_team)
    MergeFrom(*source);
  }
}

void msg_team::MergeFrom(const msg_team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.msg_team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void msg_team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.msg_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_team::CopyFrom(const msg_team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.msg_team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->member())) return false;
  return true;
}

void msg_team::Swap(msg_team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_team::InternalSwap(msg_team* other) {
  using std::swap;
  CastToBase(&member_)->InternalSwap(CastToBase(&other->member_));
  swap(team_id_, other->team_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_team::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_error::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_error::kPlayerGuidFieldNumber;
const int push_team_hall_error::kCodeFieldNumber;
const int push_team_hall_error::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_error::push_team_hall_error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_error.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_error)
}
push_team_hall_error::push_team_hall_error(const push_team_hall_error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&player_guid_, &from.player_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&player_guid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_error)
}

void push_team_hall_error::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(code_));
}

push_team_hall_error::~push_team_hall_error() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_error)
  SharedDtor();
}

void push_team_hall_error::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void push_team_hall_error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_error::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_error& push_team_hall_error::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_error.base);
  return *internal_default_instance();
}


void push_team_hall_error::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&player_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&player_guid_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_team_hall_error.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_error)
  return false;
#undef DO_
}

void push_team_hall_error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required int32 code = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_error.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_error)
}

::google::protobuf::uint8* push_team_hall_error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required int32 code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_error.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_error)
  return target;
}

size_t push_team_hall_error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_error)
  size_t total_size = 0;

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  if (has_code()) {
    // required int32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  return total_size;
}
size_t push_team_hall_error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

    // required int32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string text = 3;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_error)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_error)
    MergeFrom(*source);
  }
}

void push_team_hall_error::MergeFrom(const push_team_hall_error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_error::CopyFrom(const push_team_hall_error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void push_team_hall_error::Swap(push_team_hall_error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_error::InternalSwap(push_team_hall_error* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_guid_, other->player_guid_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_error::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_create::InitAsDefaultInstance() {
  ::protocol::game::_push_hall_team_create_default_instance_._instance.get_mutable()->player_ = const_cast< ::protocol::game::msg_battle_player_info*>(
      ::protocol::game::msg_battle_player_info::internal_default_instance());
}
void push_hall_team_create::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_create::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_create::push_hall_team_create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_create.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_create)
}
push_hall_team_create::push_hall_team_create(const push_hall_team_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::protocol::game::msg_battle_player_info(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_create)
}

void push_hall_team_create::SharedCtor() {
  player_ = NULL;
}

push_hall_team_create::~push_hall_team_create() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_create)
  SharedDtor();
}

void push_hall_team_create::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void push_hall_team_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_create::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_create& push_hall_team_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_create.base);
  return *internal_default_instance();
}


void push_hall_team_create::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_battle_player_info player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_create)
  return false;
#undef DO_
}

void push_hall_team_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_player_info player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_create)
}

::google::protobuf::uint8* push_hall_team_create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_battle_player_info player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_create)
  return target;
}

size_t push_hall_team_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_battle_player_info player = 1;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_create)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_create)
    MergeFrom(*source);
  }
}

void push_hall_team_create::MergeFrom(const push_hall_team_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::protocol::game::msg_battle_player_info::MergeFrom(from.player());
  }
}

void push_hall_team_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_create::CopyFrom(const push_hall_team_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void push_hall_team_create::Swap(push_hall_team_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_create::InternalSwap(push_hall_team_create* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_create::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_create::InitAsDefaultInstance() {
  ::protocol::game::_push_team_hall_create_default_instance_._instance.get_mutable()->team_ = const_cast< ::protocol::game::msg_team*>(
      ::protocol::game::msg_team::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_create::kPlayerGuidFieldNumber;
const int push_team_hall_create::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_create::push_team_hall_create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_create.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_create)
}
push_team_hall_create::push_team_hall_create(const push_team_hall_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team()) {
    team_ = new ::protocol::game::msg_team(*from.team_);
  } else {
    team_ = NULL;
  }
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_create)
}

void push_team_hall_create::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_guid_) -
      reinterpret_cast<char*>(&team_)) + sizeof(player_guid_));
}

push_team_hall_create::~push_team_hall_create() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_create)
  SharedDtor();
}

void push_team_hall_create::SharedDtor() {
  if (this != internal_default_instance()) delete team_;
}

void push_team_hall_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_create::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_create& push_team_hall_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_create.base);
  return *internal_default_instance();
}


void push_team_hall_create::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(team_ != NULL);
    team_->Clear();
  }
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_team team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_create)
  return false;
#undef DO_
}

void push_team_hall_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required .protocol.game.msg_team team = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_create)
}

::google::protobuf::uint8* push_team_hall_create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required .protocol.game.msg_team team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_create)
  return target;
}

size_t push_team_hall_create::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_create)
  size_t total_size = 0;

  if (has_team()) {
    // required .protocol.game.msg_team team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_);
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t push_team_hall_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.game.msg_team team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_);

    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_create)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_create)
    MergeFrom(*source);
  }
}

void push_team_hall_create::MergeFrom(const push_team_hall_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team()->::protocol::game::msg_team::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_create::CopyFrom(const push_team_hall_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_team()) {
    if (!this->team_->IsInitialized()) return false;
  }
  return true;
}

void push_team_hall_create::Swap(push_team_hall_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_create::InternalSwap(push_team_hall_create* other) {
  using std::swap;
  swap(team_, other->team_);
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_create::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_create::InitAsDefaultInstance() {
  ::protocol::game::_smsg_team_create_default_instance_._instance.get_mutable()->team_ = const_cast< ::protocol::game::msg_team*>(
      ::protocol::game::msg_team::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_create::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_create::smsg_team_create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_create.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_create)
}
smsg_team_create::smsg_team_create(const smsg_team_create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team()) {
    team_ = new ::protocol::game::msg_team(*from.team_);
  } else {
    team_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_create)
}

void smsg_team_create::SharedCtor() {
  team_ = NULL;
}

smsg_team_create::~smsg_team_create() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_create)
  SharedDtor();
}

void smsg_team_create::SharedDtor() {
  if (this != internal_default_instance()) delete team_;
}

void smsg_team_create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_create::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_create& smsg_team_create::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_create.base);
  return *internal_default_instance();
}


void smsg_team_create::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(team_ != NULL);
    team_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_create)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_team team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_create)
  return false;
#undef DO_
}

void smsg_team_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_create)
}

::google::protobuf::uint8* smsg_team_create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_create)
  return target;
}

size_t smsg_team_create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_team team = 1;
  if (has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_create)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_create)
    MergeFrom(*source);
  }
}

void smsg_team_create::MergeFrom(const smsg_team_create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team()) {
    mutable_team()->::protocol::game::msg_team::MergeFrom(from.team());
  }
}

void smsg_team_create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_create::CopyFrom(const smsg_team_create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_team()) {
    if (!this->team_->IsInitialized()) return false;
  }
  return true;
}

void smsg_team_create::Swap(smsg_team_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_create::InternalSwap(smsg_team_create* other) {
  using std::swap;
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_create::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_tuijian::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_tuijian::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_tuijian::smsg_team_tuijian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_tuijian.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_tuijian)
}
smsg_team_tuijian::smsg_team_tuijian(const smsg_team_tuijian& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_tuijian)
}

void smsg_team_tuijian::SharedCtor() {
}

smsg_team_tuijian::~smsg_team_tuijian() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_tuijian)
  SharedDtor();
}

void smsg_team_tuijian::SharedDtor() {
}

void smsg_team_tuijian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_tuijian::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_tuijian& smsg_team_tuijian::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_tuijian.base);
  return *internal_default_instance();
}


void smsg_team_tuijian::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_tuijian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_tuijian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_tuijian)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.game.msg_team_player players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_tuijian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_tuijian)
  return false;
#undef DO_
}

void smsg_team_tuijian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_tuijian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.game.msg_team_player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_tuijian)
}

::google::protobuf::uint8* smsg_team_tuijian::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_tuijian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.game.msg_team_player players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->players(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_tuijian)
  return target;
}

size_t smsg_team_tuijian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_tuijian)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .protocol.game.msg_team_player players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_tuijian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_tuijian)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_tuijian* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_tuijian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_tuijian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_tuijian)
    MergeFrom(*source);
  }
}

void smsg_team_tuijian::MergeFrom(const smsg_team_tuijian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_tuijian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void smsg_team_tuijian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_tuijian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_tuijian::CopyFrom(const smsg_team_tuijian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_tuijian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_tuijian::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void smsg_team_tuijian::Swap(smsg_team_tuijian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_tuijian::InternalSwap(smsg_team_tuijian* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_tuijian::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_join::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_join::kPlayerGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_join::cmsg_team_join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_team_join)
}
cmsg_team_join::cmsg_team_join(const cmsg_team_join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_team_join)
}

void cmsg_team_join::SharedCtor() {
  player_guid_ = GOOGLE_ULONGLONG(0);
}

cmsg_team_join::~cmsg_team_join() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_team_join)
  SharedDtor();
}

void cmsg_team_join::SharedDtor() {
}

void cmsg_team_join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_join::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_join& cmsg_team_join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_join.base);
  return *internal_default_instance();
}


void cmsg_team_join::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_team_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_team_join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_team_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_team_join)
  return false;
#undef DO_
}

void cmsg_team_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_team_join)
}

::google::protobuf::uint8* cmsg_team_join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_team_join)
  return target;
}

size_t cmsg_team_join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_team_join)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_team_join)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_team_join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_team_join)
    MergeFrom(*source);
  }
}

void cmsg_team_join::MergeFrom(const cmsg_team_join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_team_join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_guid()) {
    set_player_guid(from.player_guid());
  }
}

void cmsg_team_join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_team_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_join::CopyFrom(const cmsg_team_join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_team_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void cmsg_team_join::Swap(cmsg_team_join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_join::InternalSwap(cmsg_team_join* other) {
  using std::swap;
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_join::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_join::InitAsDefaultInstance() {
  ::protocol::game::_push_hall_team_join_default_instance_._instance.get_mutable()->player_ = const_cast< ::protocol::game::msg_battle_player_info*>(
      ::protocol::game::msg_battle_player_info::internal_default_instance());
}
void push_hall_team_join::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_join::kPlayerGuidFieldNumber;
const int push_hall_team_join::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_join::push_hall_team_join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_join)
}
push_hall_team_join::push_hall_team_join(const push_hall_team_join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::protocol::game::msg_battle_player_info(*from.player_);
  } else {
    player_ = NULL;
  }
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_join)
}

void push_hall_team_join::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_guid_) -
      reinterpret_cast<char*>(&player_)) + sizeof(player_guid_));
}

push_hall_team_join::~push_hall_team_join() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_join)
  SharedDtor();
}

void push_hall_team_join::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void push_hall_team_join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_join::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_join& push_hall_team_join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_join.base);
  return *internal_default_instance();
}


void push_hall_team_join::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_battle_player_info player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_join)
  return false;
#undef DO_
}

void push_hall_team_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required .protocol.game.msg_battle_player_info player = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_join)
}

::google::protobuf::uint8* push_hall_team_join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required .protocol.game.msg_battle_player_info player = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_join)
  return target;
}

size_t push_hall_team_join::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_hall_team_join)
  size_t total_size = 0;

  if (has_player()) {
    // required .protocol.game.msg_battle_player_info player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t push_hall_team_join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_join)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.game.msg_battle_player_info player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);

    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_join)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_join)
    MergeFrom(*source);
  }
}

void push_hall_team_join::MergeFrom(const push_hall_team_join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player()->::protocol::game::msg_battle_player_info::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_hall_team_join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_join::CopyFrom(const push_hall_team_join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void push_hall_team_join::Swap(push_hall_team_join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_join::InternalSwap(push_hall_team_join* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_join::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_join::InitAsDefaultInstance() {
  ::protocol::game::_push_team_hall_join_default_instance_._instance.get_mutable()->team_ = const_cast< ::protocol::game::msg_team*>(
      ::protocol::game::msg_team::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_join::kPlayerGuidFieldNumber;
const int push_team_hall_join::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_join::push_team_hall_join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_join)
}
push_team_hall_join::push_team_hall_join(const push_team_hall_join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team()) {
    team_ = new ::protocol::game::msg_team(*from.team_);
  } else {
    team_ = NULL;
  }
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_join)
}

void push_team_hall_join::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_guid_) -
      reinterpret_cast<char*>(&team_)) + sizeof(player_guid_));
}

push_team_hall_join::~push_team_hall_join() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_join)
  SharedDtor();
}

void push_team_hall_join::SharedDtor() {
  if (this != internal_default_instance()) delete team_;
}

void push_team_hall_join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_join::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_join& push_team_hall_join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_join.base);
  return *internal_default_instance();
}


void push_team_hall_join::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(team_ != NULL);
    team_->Clear();
  }
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_team team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_join)
  return false;
#undef DO_
}

void push_team_hall_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required .protocol.game.msg_team team = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_join)
}

::google::protobuf::uint8* push_team_hall_join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required .protocol.game.msg_team team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_join)
  return target;
}

size_t push_team_hall_join::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_join)
  size_t total_size = 0;

  if (has_team()) {
    // required .protocol.game.msg_team team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_);
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t push_team_hall_join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_join)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.game.msg_team team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_);

    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_join)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_join)
    MergeFrom(*source);
  }
}

void push_team_hall_join::MergeFrom(const push_team_hall_join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team()->::protocol::game::msg_team::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_join::CopyFrom(const push_team_hall_join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_team()) {
    if (!this->team_->IsInitialized()) return false;
  }
  return true;
}

void push_team_hall_join::Swap(push_team_hall_join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_join::InternalSwap(push_team_hall_join* other) {
  using std::swap;
  swap(team_, other->team_);
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_join::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_join::InitAsDefaultInstance() {
  ::protocol::game::_smsg_team_join_default_instance_._instance.get_mutable()->team_ = const_cast< ::protocol::game::msg_team*>(
      ::protocol::game::msg_team::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_join::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_join::smsg_team_join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_join)
}
smsg_team_join::smsg_team_join(const smsg_team_join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team()) {
    team_ = new ::protocol::game::msg_team(*from.team_);
  } else {
    team_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_join)
}

void smsg_team_join::SharedCtor() {
  team_ = NULL;
}

smsg_team_join::~smsg_team_join() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_join)
  SharedDtor();
}

void smsg_team_join::SharedDtor() {
  if (this != internal_default_instance()) delete team_;
}

void smsg_team_join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_join::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_join& smsg_team_join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_join.base);
  return *internal_default_instance();
}


void smsg_team_join::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(team_ != NULL);
    team_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_team team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_join)
  return false;
#undef DO_
}

void smsg_team_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_join)
}

::google::protobuf::uint8* smsg_team_join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_join)
  return target;
}

size_t smsg_team_join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_join)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_team team = 1;
  if (has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_join)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_join)
    MergeFrom(*source);
  }
}

void smsg_team_join::MergeFrom(const smsg_team_join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team()) {
    mutable_team()->::protocol::game::msg_team::MergeFrom(from.team());
  }
}

void smsg_team_join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_join::CopyFrom(const smsg_team_join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_team()) {
    if (!this->team_->IsInitialized()) return false;
  }
  return true;
}

void smsg_team_join::Swap(smsg_team_join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_join::InternalSwap(smsg_team_join* other) {
  using std::swap;
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_join::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_other_join::InitAsDefaultInstance() {
  ::protocol::game::_push_team_hall_other_join_default_instance_._instance.get_mutable()->member_ = const_cast< ::protocol::game::msg_team_member*>(
      ::protocol::game::msg_team_member::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_other_join::kGuidsFieldNumber;
const int push_team_hall_other_join::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_other_join::push_team_hall_other_join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_other_join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_other_join)
}
push_team_hall_other_join::push_team_hall_other_join(const push_team_hall_other_join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guids_(from.guids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_member()) {
    member_ = new ::protocol::game::msg_team_member(*from.member_);
  } else {
    member_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_other_join)
}

void push_team_hall_other_join::SharedCtor() {
  member_ = NULL;
}

push_team_hall_other_join::~push_team_hall_other_join() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_other_join)
  SharedDtor();
}

void push_team_hall_other_join::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void push_team_hall_other_join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_other_join::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_other_join& push_team_hall_other_join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_other_join.base);
  return *internal_default_instance();
}


void push_team_hall_other_join::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_other_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_ != NULL);
    member_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_other_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_other_join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 guids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_guids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_team_member member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_other_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_other_join)
  return false;
#undef DO_
}

void push_team_hall_other_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_other_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  for (int i = 0, n = this->guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team_member member = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_member(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_other_join)
}

::google::protobuf::uint8* push_team_hall_other_join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_other_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->guids_, target);

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team_member member = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_member(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_other_join)
  return target;
}

size_t push_team_hall_other_join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_other_join)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_team_member member = 2;
  if (has_member()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_);
  }
  // repeated uint64 guids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->guids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_other_join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_other_join)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_other_join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_other_join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_other_join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_other_join)
    MergeFrom(*source);
  }
}

void push_team_hall_other_join::MergeFrom(const push_team_hall_other_join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_other_join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guids_.MergeFrom(from.guids_);
  if (from.has_member()) {
    mutable_member()->::protocol::game::msg_team_member::MergeFrom(from.member());
  }
}

void push_team_hall_other_join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_other_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_other_join::CopyFrom(const push_team_hall_other_join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_other_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_other_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_member()) {
    if (!this->member_->IsInitialized()) return false;
  }
  return true;
}

void push_team_hall_other_join::Swap(push_team_hall_other_join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_other_join::InternalSwap(push_team_hall_other_join* other) {
  using std::swap;
  guids_.InternalSwap(&other->guids_);
  swap(member_, other->member_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_other_join::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_other_join::InitAsDefaultInstance() {
  ::protocol::game::_smsg_team_other_join_default_instance_._instance.get_mutable()->member_ = const_cast< ::protocol::game::msg_team_member*>(
      ::protocol::game::msg_team_member::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_other_join::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_other_join::smsg_team_other_join()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_other_join.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_other_join)
}
smsg_team_other_join::smsg_team_other_join(const smsg_team_other_join& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_member()) {
    member_ = new ::protocol::game::msg_team_member(*from.member_);
  } else {
    member_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_other_join)
}

void smsg_team_other_join::SharedCtor() {
  member_ = NULL;
}

smsg_team_other_join::~smsg_team_other_join() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_other_join)
  SharedDtor();
}

void smsg_team_other_join::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void smsg_team_other_join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_other_join::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_other_join& smsg_team_other_join::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_other_join.base);
  return *internal_default_instance();
}


void smsg_team_other_join::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_other_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_ != NULL);
    member_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_other_join::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_other_join)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_team_member member = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_other_join)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_other_join)
  return false;
#undef DO_
}

void smsg_team_other_join::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_other_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team_member member = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_member(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_other_join)
}

::google::protobuf::uint8* smsg_team_other_join::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_other_join)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team_member member = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_member(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_other_join)
  return target;
}

size_t smsg_team_other_join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_other_join)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_team_member member = 1;
  if (has_member()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_other_join::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_other_join)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_other_join* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_other_join>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_other_join)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_other_join)
    MergeFrom(*source);
  }
}

void smsg_team_other_join::MergeFrom(const smsg_team_other_join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_other_join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_member()) {
    mutable_member()->::protocol::game::msg_team_member::MergeFrom(from.member());
  }
}

void smsg_team_other_join::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_other_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_other_join::CopyFrom(const smsg_team_other_join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_other_join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_other_join::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_member()) {
    if (!this->member_->IsInitialized()) return false;
  }
  return true;
}

void smsg_team_other_join::Swap(smsg_team_other_join* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_other_join::InternalSwap(smsg_team_other_join* other) {
  using std::swap;
  swap(member_, other->member_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_other_join::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_exit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_exit::kPlayerGuidFieldNumber;
const int push_hall_team_exit::kMautoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_exit::push_hall_team_exit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_exit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_exit)
}
push_hall_team_exit::push_hall_team_exit(const push_hall_team_exit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_guid_, &from.player_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mauto_) -
    reinterpret_cast<char*>(&player_guid_)) + sizeof(mauto_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_exit)
}

void push_hall_team_exit::SharedCtor() {
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mauto_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(mauto_));
}

push_hall_team_exit::~push_hall_team_exit() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_exit)
  SharedDtor();
}

void push_hall_team_exit::SharedDtor() {
}

void push_hall_team_exit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_exit::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_exit& push_hall_team_exit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_exit.base);
  return *internal_default_instance();
}


void push_hall_team_exit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&player_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mauto_) -
        reinterpret_cast<char*>(&player_guid_)) + sizeof(mauto_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_exit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_exit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 mauto = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mauto();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mauto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_exit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_exit)
  return false;
#undef DO_
}

void push_hall_team_exit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required int32 mauto = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mauto(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_exit)
}

::google::protobuf::uint8* push_hall_team_exit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required int32 mauto = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mauto(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_exit)
  return target;
}

size_t push_hall_team_exit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_hall_team_exit)
  size_t total_size = 0;

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  if (has_mauto()) {
    // required int32 mauto = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mauto());
  }

  return total_size;
}
size_t push_hall_team_exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_exit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

    // required int32 mauto = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mauto());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_exit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_exit)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_exit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_exit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_exit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_exit)
    MergeFrom(*source);
  }
}

void push_hall_team_exit::MergeFrom(const push_hall_team_exit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_exit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_guid_ = from.player_guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mauto_ = from.mauto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_hall_team_exit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_exit::CopyFrom(const push_hall_team_exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_exit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void push_hall_team_exit::Swap(push_hall_team_exit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_exit::InternalSwap(push_hall_team_exit* other) {
  using std::swap;
  swap(player_guid_, other->player_guid_);
  swap(mauto_, other->mauto_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_exit::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_exit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_exit::kGuidsFieldNumber;
const int push_team_hall_exit::kLeaderGuidFieldNumber;
const int push_team_hall_exit::kPlayerGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_exit::push_team_hall_exit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_exit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_exit)
}
push_team_hall_exit::push_team_hall_exit(const push_team_hall_exit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guids_(from.guids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leader_guid_, &from.leader_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_guid_) -
    reinterpret_cast<char*>(&leader_guid_)) + sizeof(player_guid_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_exit)
}

void push_team_hall_exit::SharedCtor() {
  ::memset(&leader_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_guid_) -
      reinterpret_cast<char*>(&leader_guid_)) + sizeof(player_guid_));
}

push_team_hall_exit::~push_team_hall_exit() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_exit)
  SharedDtor();
}

void push_team_hall_exit::SharedDtor() {
}

void push_team_hall_exit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_exit::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_exit& push_team_hall_exit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_exit.base);
  return *internal_default_instance();
}


void push_team_hall_exit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&leader_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_guid_) -
        reinterpret_cast<char*>(&leader_guid_)) + sizeof(player_guid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_exit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_exit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 guids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_guids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 leader_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_leader_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 player_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_exit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_exit)
  return false;
#undef DO_
}

void push_team_hall_exit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  for (int i = 0, n = this->guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 leader_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leader_guid(), output);
  }

  // required uint64 player_guid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_exit)
}

::google::protobuf::uint8* push_team_hall_exit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->guids_, target);

  cached_has_bits = _has_bits_[0];
  // required uint64 leader_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leader_guid(), target);
  }

  // required uint64 player_guid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_exit)
  return target;
}

size_t push_team_hall_exit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_exit)
  size_t total_size = 0;

  if (has_leader_guid()) {
    // required uint64 leader_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_guid());
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t push_team_hall_exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_exit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 leader_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_guid());

    // required uint64 player_guid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 guids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->guids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_exit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_exit)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_exit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_exit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_exit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_exit)
    MergeFrom(*source);
  }
}

void push_team_hall_exit::MergeFrom(const push_team_hall_exit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_exit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guids_.MergeFrom(from.guids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      leader_guid_ = from.leader_guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_exit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_exit::CopyFrom(const push_team_hall_exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_exit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void push_team_hall_exit::Swap(push_team_hall_exit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_exit::InternalSwap(push_team_hall_exit* other) {
  using std::swap;
  guids_.InternalSwap(&other->guids_);
  swap(leader_guid_, other->leader_guid_);
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_exit::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_exit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_exit::kLeaderGuidFieldNumber;
const int smsg_team_exit::kPlayerGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_exit::smsg_team_exit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_exit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_exit)
}
smsg_team_exit::smsg_team_exit(const smsg_team_exit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leader_guid_, &from.leader_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_guid_) -
    reinterpret_cast<char*>(&leader_guid_)) + sizeof(player_guid_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_exit)
}

void smsg_team_exit::SharedCtor() {
  ::memset(&leader_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_guid_) -
      reinterpret_cast<char*>(&leader_guid_)) + sizeof(player_guid_));
}

smsg_team_exit::~smsg_team_exit() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_exit)
  SharedDtor();
}

void smsg_team_exit::SharedDtor() {
}

void smsg_team_exit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_exit::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_exit& smsg_team_exit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_exit.base);
  return *internal_default_instance();
}


void smsg_team_exit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&leader_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_guid_) -
        reinterpret_cast<char*>(&leader_guid_)) + sizeof(player_guid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_exit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_exit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 leader_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_leader_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 player_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_exit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_exit)
  return false;
#undef DO_
}

void smsg_team_exit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 leader_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->leader_guid(), output);
  }

  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_exit)
}

::google::protobuf::uint8* smsg_team_exit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 leader_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->leader_guid(), target);
  }

  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_exit)
  return target;
}

size_t smsg_team_exit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.smsg_team_exit)
  size_t total_size = 0;

  if (has_leader_guid()) {
    // required uint64 leader_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_guid());
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t smsg_team_exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_exit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 leader_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_guid());

    // required uint64 player_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_exit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_exit)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_exit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_exit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_exit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_exit)
    MergeFrom(*source);
  }
}

void smsg_team_exit::MergeFrom(const smsg_team_exit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_exit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      leader_guid_ = from.leader_guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void smsg_team_exit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_exit::CopyFrom(const smsg_team_exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_exit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void smsg_team_exit::Swap(smsg_team_exit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_exit::InternalSwap(smsg_team_exit* other) {
  using std::swap;
  swap(leader_guid_, other->leader_guid_);
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_exit::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_kick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_kick::kTargetGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_kick::cmsg_team_kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_team_kick)
}
cmsg_team_kick::cmsg_team_kick(const cmsg_team_kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_guid_ = from.target_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_team_kick)
}

void cmsg_team_kick::SharedCtor() {
  target_guid_ = GOOGLE_ULONGLONG(0);
}

cmsg_team_kick::~cmsg_team_kick() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_team_kick)
  SharedDtor();
}

void cmsg_team_kick::SharedDtor() {
}

void cmsg_team_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_kick::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_kick& cmsg_team_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_kick.base);
  return *internal_default_instance();
}


void cmsg_team_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_team_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_team_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_target_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_team_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_team_kick)
  return false;
#undef DO_
}

void cmsg_team_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 target_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_team_kick)
}

::google::protobuf::uint8* cmsg_team_kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 target_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_team_kick)
  return target;
}

size_t cmsg_team_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_team_kick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 target_guid = 1;
  if (has_target_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_team_kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_team_kick)
    MergeFrom(*source);
  }
}

void cmsg_team_kick::MergeFrom(const cmsg_team_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_guid()) {
    set_target_guid(from.target_guid());
  }
}

void cmsg_team_kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_kick::CopyFrom(const cmsg_team_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void cmsg_team_kick::Swap(cmsg_team_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_kick::InternalSwap(cmsg_team_kick* other) {
  using std::swap;
  swap(target_guid_, other->target_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_kick::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_kick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_kick::kPlayerGuidFieldNumber;
const int push_hall_team_kick::kTargetGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_kick::push_hall_team_kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_kick)
}
push_hall_team_kick::push_hall_team_kick(const push_hall_team_kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_guid_, &from.player_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_guid_) -
    reinterpret_cast<char*>(&player_guid_)) + sizeof(target_guid_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_kick)
}

void push_hall_team_kick::SharedCtor() {
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_guid_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(target_guid_));
}

push_hall_team_kick::~push_hall_team_kick() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_kick)
  SharedDtor();
}

void push_hall_team_kick::SharedDtor() {
}

void push_hall_team_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_kick::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_kick& push_hall_team_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_kick.base);
  return *internal_default_instance();
}


void push_hall_team_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&player_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_guid_) -
        reinterpret_cast<char*>(&player_guid_)) + sizeof(target_guid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 target_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_kick)
  return false;
#undef DO_
}

void push_hall_team_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required uint64 target_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_kick)
}

::google::protobuf::uint8* push_hall_team_kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required uint64 target_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_kick)
  return target;
}

size_t push_hall_team_kick::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_hall_team_kick)
  size_t total_size = 0;

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  if (has_target_guid()) {
    // required uint64 target_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());
  }

  return total_size;
}
size_t push_hall_team_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_kick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

    // required uint64 target_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_kick)
    MergeFrom(*source);
  }
}

void push_hall_team_kick::MergeFrom(const push_hall_team_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_guid_ = from.player_guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_guid_ = from.target_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_hall_team_kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_kick::CopyFrom(const push_hall_team_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void push_hall_team_kick::Swap(push_hall_team_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_kick::InternalSwap(push_hall_team_kick* other) {
  using std::swap;
  swap(player_guid_, other->player_guid_);
  swap(target_guid_, other->target_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_kick::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_kick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_kick::kGuidsFieldNumber;
const int push_team_hall_kick::kPlayerGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_kick::push_team_hall_kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_kick)
}
push_team_hall_kick::push_team_hall_kick(const push_team_hall_kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guids_(from.guids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_kick)
}

void push_team_hall_kick::SharedCtor() {
  player_guid_ = GOOGLE_ULONGLONG(0);
}

push_team_hall_kick::~push_team_hall_kick() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_kick)
  SharedDtor();
}

void push_team_hall_kick::SharedDtor() {
}

void push_team_hall_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_kick::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_kick& push_team_hall_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_kick.base);
  return *internal_default_instance();
}


void push_team_hall_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guids_.Clear();
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 guids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_guids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 player_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_kick)
  return false;
#undef DO_
}

void push_team_hall_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  for (int i = 0, n = this->guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_kick)
}

::google::protobuf::uint8* push_team_hall_kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->guids_, target);

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_kick)
  return target;
}

size_t push_team_hall_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_kick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 player_guid = 2;
  if (has_player_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }
  // repeated uint64 guids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->guids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_kick)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_kick)
    MergeFrom(*source);
  }
}

void push_team_hall_kick::MergeFrom(const push_team_hall_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guids_.MergeFrom(from.guids_);
  if (from.has_player_guid()) {
    set_player_guid(from.player_guid());
  }
}

void push_team_hall_kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_kick::CopyFrom(const push_team_hall_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void push_team_hall_kick::Swap(push_team_hall_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_kick::InternalSwap(push_team_hall_kick* other) {
  using std::swap;
  guids_.InternalSwap(&other->guids_);
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_kick::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_kick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_kick::kPlayerGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_kick::smsg_team_kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_kick)
}
smsg_team_kick::smsg_team_kick(const smsg_team_kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_kick)
}

void smsg_team_kick::SharedCtor() {
  player_guid_ = GOOGLE_ULONGLONG(0);
}

smsg_team_kick::~smsg_team_kick() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_kick)
  SharedDtor();
}

void smsg_team_kick::SharedDtor() {
}

void smsg_team_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_kick::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_kick& smsg_team_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_kick.base);
  return *internal_default_instance();
}


void smsg_team_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_kick)
  return false;
#undef DO_
}

void smsg_team_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_kick)
}

::google::protobuf::uint8* smsg_team_kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_kick)
  return target;
}

size_t smsg_team_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_kick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_kick)
    MergeFrom(*source);
  }
}

void smsg_team_kick::MergeFrom(const smsg_team_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_guid()) {
    set_player_guid(from.player_guid());
  }
}

void smsg_team_kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_kick::CopyFrom(const smsg_team_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_kick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void smsg_team_kick::Swap(smsg_team_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_kick::InternalSwap(smsg_team_kick* other) {
  using std::swap;
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_kick::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_invert::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_invert::kTargetGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_invert::cmsg_team_invert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_invert.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_team_invert)
}
cmsg_team_invert::cmsg_team_invert(const cmsg_team_invert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_guid_ = from.target_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_team_invert)
}

void cmsg_team_invert::SharedCtor() {
  target_guid_ = GOOGLE_ULONGLONG(0);
}

cmsg_team_invert::~cmsg_team_invert() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_team_invert)
  SharedDtor();
}

void cmsg_team_invert::SharedDtor() {
}

void cmsg_team_invert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_invert::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_invert& cmsg_team_invert::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_invert.base);
  return *internal_default_instance();
}


void cmsg_team_invert::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_team_invert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_team_invert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_target_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_team_invert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_team_invert)
  return false;
#undef DO_
}

void cmsg_team_invert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 target_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_team_invert)
}

::google::protobuf::uint8* cmsg_team_invert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 target_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_team_invert)
  return target;
}

size_t cmsg_team_invert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_team_invert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 target_guid = 1;
  if (has_target_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_invert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_team_invert)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_invert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_invert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_team_invert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_team_invert)
    MergeFrom(*source);
  }
}

void cmsg_team_invert::MergeFrom(const cmsg_team_invert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_team_invert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_guid()) {
    set_target_guid(from.target_guid());
  }
}

void cmsg_team_invert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_team_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_invert::CopyFrom(const cmsg_team_invert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_team_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_invert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void cmsg_team_invert::Swap(cmsg_team_invert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_invert::InternalSwap(cmsg_team_invert* other) {
  using std::swap;
  swap(target_guid_, other->target_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_invert::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_invert::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_invert::kPlayerGuidFieldNumber;
const int push_hall_team_invert::kTargetGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_invert::push_hall_team_invert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_invert.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_invert)
}
push_hall_team_invert::push_hall_team_invert(const push_hall_team_invert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_guid_, &from.player_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_guid_) -
    reinterpret_cast<char*>(&player_guid_)) + sizeof(target_guid_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_invert)
}

void push_hall_team_invert::SharedCtor() {
  ::memset(&player_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_guid_) -
      reinterpret_cast<char*>(&player_guid_)) + sizeof(target_guid_));
}

push_hall_team_invert::~push_hall_team_invert() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_invert)
  SharedDtor();
}

void push_hall_team_invert::SharedDtor() {
}

void push_hall_team_invert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_invert::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_invert& push_hall_team_invert::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_invert.base);
  return *internal_default_instance();
}


void push_hall_team_invert::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&player_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_guid_) -
        reinterpret_cast<char*>(&player_guid_)) + sizeof(target_guid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_invert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_invert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 target_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_invert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_invert)
  return false;
#undef DO_
}

void push_hall_team_invert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required uint64 target_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_invert)
}

::google::protobuf::uint8* push_hall_team_invert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required uint64 target_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_invert)
  return target;
}

size_t push_hall_team_invert::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_hall_team_invert)
  size_t total_size = 0;

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  if (has_target_guid()) {
    // required uint64 target_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());
  }

  return total_size;
}
size_t push_hall_team_invert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_invert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

    // required uint64 target_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_invert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_invert)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_invert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_invert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_invert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_invert)
    MergeFrom(*source);
  }
}

void push_hall_team_invert::MergeFrom(const push_hall_team_invert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_invert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_guid_ = from.player_guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_guid_ = from.target_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_hall_team_invert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_invert::CopyFrom(const push_hall_team_invert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_invert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void push_hall_team_invert::Swap(push_hall_team_invert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_invert::InternalSwap(push_hall_team_invert* other) {
  using std::swap;
  swap(player_guid_, other->player_guid_);
  swap(target_guid_, other->target_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_invert::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_invert::InitAsDefaultInstance() {
  ::protocol::game::_push_team_hall_invert_default_instance_._instance.get_mutable()->player_ = const_cast< ::protocol::game::msg_team_player*>(
      ::protocol::game::msg_team_player::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_invert::kTargetGuidFieldNumber;
const int push_team_hall_invert::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_invert::push_team_hall_invert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_invert.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_invert)
}
push_team_hall_invert::push_team_hall_invert(const push_team_hall_invert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::protocol::game::msg_team_player(*from.player_);
  } else {
    player_ = NULL;
  }
  target_guid_ = from.target_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_invert)
}

void push_team_hall_invert::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_guid_) -
      reinterpret_cast<char*>(&player_)) + sizeof(target_guid_));
}

push_team_hall_invert::~push_team_hall_invert() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_invert)
  SharedDtor();
}

void push_team_hall_invert::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void push_team_hall_invert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_invert::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_invert& push_team_hall_invert::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_invert.base);
  return *internal_default_instance();
}


void push_team_hall_invert::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_invert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_invert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 target_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_target_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .protocol.game.msg_team_player player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_invert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_invert)
  return false;
#undef DO_
}

void push_team_hall_invert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 target_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_guid(), output);
  }

  // required .protocol.game.msg_team_player player = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_invert)
}

::google::protobuf::uint8* push_team_hall_invert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 target_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_guid(), target);
  }

  // required .protocol.game.msg_team_player player = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_invert)
  return target;
}

size_t push_team_hall_invert::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_invert)
  size_t total_size = 0;

  if (has_player()) {
    // required .protocol.game.msg_team_player player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (has_target_guid()) {
    // required uint64 target_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());
  }

  return total_size;
}
size_t push_team_hall_invert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_invert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .protocol.game.msg_team_player player = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);

    // required uint64 target_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_invert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_invert)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_invert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_invert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_invert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_invert)
    MergeFrom(*source);
  }
}

void push_team_hall_invert::MergeFrom(const push_team_hall_invert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_invert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player()->::protocol::game::msg_team_player::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000002u) {
      target_guid_ = from.target_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_invert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_invert::CopyFrom(const push_team_hall_invert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_invert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void push_team_hall_invert::Swap(push_team_hall_invert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_invert::InternalSwap(push_team_hall_invert* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(target_guid_, other->target_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_invert::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_invert::InitAsDefaultInstance() {
  ::protocol::game::_smsg_team_invert_default_instance_._instance.get_mutable()->player_ = const_cast< ::protocol::game::msg_team_player*>(
      ::protocol::game::msg_team_player::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_invert::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_invert::smsg_team_invert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_invert.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_invert)
}
smsg_team_invert::smsg_team_invert(const smsg_team_invert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::protocol::game::msg_team_player(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_invert)
}

void smsg_team_invert::SharedCtor() {
  player_ = NULL;
}

smsg_team_invert::~smsg_team_invert() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_invert)
  SharedDtor();
}

void smsg_team_invert::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
}

void smsg_team_invert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_invert::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_invert& smsg_team_invert::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_invert.base);
  return *internal_default_instance();
}


void smsg_team_invert::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_invert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_invert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.game.msg_team_player player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_invert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_invert)
  return false;
#undef DO_
}

void smsg_team_invert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team_player player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_invert)
}

::google::protobuf::uint8* smsg_team_invert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_invert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protocol.game.msg_team_player player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_invert)
  return target;
}

size_t smsg_team_invert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_invert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .protocol.game.msg_team_player player = 1;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_invert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_invert)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_invert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_invert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_invert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_invert)
    MergeFrom(*source);
  }
}

void smsg_team_invert::MergeFrom(const smsg_team_invert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_invert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::protocol::game::msg_team_player::MergeFrom(from.player());
  }
}

void smsg_team_invert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_invert::CopyFrom(const smsg_team_invert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_invert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_invert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void smsg_team_invert::Swap(smsg_team_invert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_invert::InternalSwap(smsg_team_invert* other) {
  using std::swap;
  swap(player_, other->player_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_invert::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cmsg_team_chat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cmsg_team_chat::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cmsg_team_chat::cmsg_team_chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_chat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.cmsg_team_chat)
}
cmsg_team_chat::cmsg_team_chat(const cmsg_team_chat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.game.cmsg_team_chat)
}

void cmsg_team_chat::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

cmsg_team_chat::~cmsg_team_chat() {
  // @@protoc_insertion_point(destructor:protocol.game.cmsg_team_chat)
  SharedDtor();
}

void cmsg_team_chat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cmsg_team_chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cmsg_team_chat::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cmsg_team_chat& cmsg_team_chat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_cmsg_team_chat.base);
  return *internal_default_instance();
}


void cmsg_team_chat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.cmsg_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    text_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cmsg_team_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.cmsg_team_chat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.cmsg_team_chat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.cmsg_team_chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.cmsg_team_chat)
  return false;
#undef DO_
}

void cmsg_team_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.cmsg_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.cmsg_team_chat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.cmsg_team_chat)
}

::google::protobuf::uint8* cmsg_team_chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.cmsg_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.cmsg_team_chat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.cmsg_team_chat)
  return target;
}

size_t cmsg_team_chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.cmsg_team_chat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cmsg_team_chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.cmsg_team_chat)
  GOOGLE_DCHECK_NE(&from, this);
  const cmsg_team_chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cmsg_team_chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.cmsg_team_chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.cmsg_team_chat)
    MergeFrom(*source);
  }
}

void cmsg_team_chat::MergeFrom(const cmsg_team_chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.cmsg_team_chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void cmsg_team_chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.cmsg_team_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_team_chat::CopyFrom(const cmsg_team_chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.cmsg_team_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_team_chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void cmsg_team_chat::Swap(cmsg_team_chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cmsg_team_chat::InternalSwap(cmsg_team_chat* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cmsg_team_chat::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_chat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_chat::kPlayerGuidFieldNumber;
const int push_hall_team_chat::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_chat::push_hall_team_chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_chat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_chat)
}
push_hall_team_chat::push_hall_team_chat(const push_hall_team_chat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_chat)
}

void push_hall_team_chat::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_guid_ = GOOGLE_ULONGLONG(0);
}

push_hall_team_chat::~push_hall_team_chat() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_chat)
  SharedDtor();
}

void push_hall_team_chat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void push_hall_team_chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_chat::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_chat& push_hall_team_chat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_chat.base);
  return *internal_default_instance();
}


void push_hall_team_chat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    text_.ClearNonDefaultToEmptyNoArena();
  }
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_chat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_hall_team_chat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_chat)
  return false;
#undef DO_
}

void push_hall_team_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_hall_team_chat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_chat)
}

::google::protobuf::uint8* push_hall_team_chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_hall_team_chat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_chat)
  return target;
}

size_t push_hall_team_chat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_hall_team_chat)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t push_hall_team_chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_chat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_chat)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_chat)
    MergeFrom(*source);
  }
}

void push_hall_team_chat::MergeFrom(const push_hall_team_chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_hall_team_chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_chat::CopyFrom(const push_hall_team_chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void push_hall_team_chat::Swap(push_hall_team_chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_chat::InternalSwap(push_hall_team_chat* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_chat::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_chat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_chat::kGuidsFieldNumber;
const int push_team_hall_chat::kPlayerGuidFieldNumber;
const int push_team_hall_chat::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_chat::push_team_hall_chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_chat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_chat)
}
push_team_hall_chat::push_team_hall_chat(const push_team_hall_chat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guids_(from.guids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_chat)
}

void push_team_hall_chat::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_guid_ = GOOGLE_ULONGLONG(0);
}

push_team_hall_chat::~push_team_hall_chat() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_chat)
  SharedDtor();
}

void push_team_hall_chat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void push_team_hall_chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_chat::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_chat& push_team_hall_chat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_chat.base);
  return *internal_default_instance();
}


void push_team_hall_chat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    text_.ClearNonDefaultToEmptyNoArena();
  }
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_chat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 guids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_guids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 player_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_team_hall_chat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_chat)
  return false;
#undef DO_
}

void push_team_hall_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  for (int i = 0, n = this->guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_guid(), output);
  }

  // required string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_chat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_chat)
}

::google::protobuf::uint8* push_team_hall_chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->guids_, target);

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_guid(), target);
  }

  // required string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_chat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_chat)
  return target;
}

size_t push_team_hall_chat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_chat)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t push_team_hall_chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_chat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint64 player_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 guids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->guids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_chat)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_chat)
    MergeFrom(*source);
  }
}

void push_team_hall_chat::MergeFrom(const push_team_hall_chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guids_.MergeFrom(from.guids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_chat::CopyFrom(const push_team_hall_chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void push_team_hall_chat::Swap(push_team_hall_chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_chat::InternalSwap(push_team_hall_chat* other) {
  using std::swap;
  guids_.InternalSwap(&other->guids_);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_chat::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void smsg_team_chat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int smsg_team_chat::kPlayerGuidFieldNumber;
const int smsg_team_chat::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

smsg_team_chat::smsg_team_chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_smsg_team_chat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.smsg_team_chat)
}
smsg_team_chat::smsg_team_chat(const smsg_team_chat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.smsg_team_chat)
}

void smsg_team_chat::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_guid_ = GOOGLE_ULONGLONG(0);
}

smsg_team_chat::~smsg_team_chat() {
  // @@protoc_insertion_point(destructor:protocol.game.smsg_team_chat)
  SharedDtor();
}

void smsg_team_chat::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void smsg_team_chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* smsg_team_chat::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const smsg_team_chat& smsg_team_chat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_smsg_team_chat.base);
  return *internal_default_instance();
}


void smsg_team_chat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.smsg_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    set_changed();
    text_.ClearNonDefaultToEmptyNoArena();
  }
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool smsg_team_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.smsg_team_chat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.smsg_team_chat.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.smsg_team_chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.smsg_team_chat)
  return false;
#undef DO_
}

void smsg_team_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.smsg_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_team_chat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.smsg_team_chat)
}

::google::protobuf::uint8* smsg_team_chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.smsg_team_chat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.smsg_team_chat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.smsg_team_chat)
  return target;
}

size_t smsg_team_chat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.smsg_team_chat)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_player_guid()) {
    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }

  return total_size;
}
size_t smsg_team_chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.smsg_team_chat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string text = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint64 player_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void smsg_team_chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.smsg_team_chat)
  GOOGLE_DCHECK_NE(&from, this);
  const smsg_team_chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const smsg_team_chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.smsg_team_chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.smsg_team_chat)
    MergeFrom(*source);
  }
}

void smsg_team_chat::MergeFrom(const smsg_team_chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.smsg_team_chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_guid_ = from.player_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void smsg_team_chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.smsg_team_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_team_chat::CopyFrom(const smsg_team_chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.smsg_team_chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_team_chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void smsg_team_chat::Swap(smsg_team_chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void smsg_team_chat::InternalSwap(smsg_team_chat* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata smsg_team_chat::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_hall_team_multi_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_hall_team_multi_battle::kPlayerGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_hall_team_multi_battle::push_hall_team_multi_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_multi_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_hall_team_multi_battle)
}
push_hall_team_multi_battle::push_hall_team_multi_battle(const push_hall_team_multi_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_guid_ = from.player_guid_;
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_hall_team_multi_battle)
}

void push_hall_team_multi_battle::SharedCtor() {
  player_guid_ = GOOGLE_ULONGLONG(0);
}

push_hall_team_multi_battle::~push_hall_team_multi_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.push_hall_team_multi_battle)
  SharedDtor();
}

void push_hall_team_multi_battle::SharedDtor() {
}

void push_hall_team_multi_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_hall_team_multi_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_hall_team_multi_battle& push_hall_team_multi_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_hall_team_multi_battle.base);
  return *internal_default_instance();
}


void push_hall_team_multi_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_hall_team_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_hall_team_multi_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_hall_team_multi_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_guid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_hall_team_multi_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_hall_team_multi_battle)
  return false;
#undef DO_
}

void push_hall_team_multi_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_hall_team_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_hall_team_multi_battle)
}

::google::protobuf::uint8* push_hall_team_multi_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_hall_team_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_guid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_hall_team_multi_battle)
  return target;
}

size_t push_hall_team_multi_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_hall_team_multi_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 player_guid = 1;
  if (has_player_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_guid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_hall_team_multi_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_hall_team_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const push_hall_team_multi_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_hall_team_multi_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_hall_team_multi_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_hall_team_multi_battle)
    MergeFrom(*source);
  }
}

void push_hall_team_multi_battle::MergeFrom(const push_hall_team_multi_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_hall_team_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_guid()) {
    set_player_guid(from.player_guid());
  }
}

void push_hall_team_multi_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_hall_team_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_hall_team_multi_battle::CopyFrom(const push_hall_team_multi_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_hall_team_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_hall_team_multi_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void push_hall_team_multi_battle::Swap(push_hall_team_multi_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_hall_team_multi_battle::InternalSwap(push_hall_team_multi_battle* other) {
  using std::swap;
  swap(player_guid_, other->player_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_hall_team_multi_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void push_team_hall_multi_battle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int push_team_hall_multi_battle::kGuidsFieldNumber;
const int push_team_hall_multi_battle::kUdpIpFieldNumber;
const int push_team_hall_multi_battle::kUdpPortFieldNumber;
const int push_team_hall_multi_battle::kTcpIpFieldNumber;
const int push_team_hall_multi_battle::kTcpPortFieldNumber;
const int push_team_hall_multi_battle::kCodeFieldNumber;
const int push_team_hall_multi_battle::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

push_team_hall_multi_battle::push_team_hall_multi_battle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_multi_battle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.game.push_team_hall_multi_battle)
}
push_team_hall_multi_battle::push_team_hall_multi_battle(const push_team_hall_multi_battle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guids_(from.guids_),
      code_(from.code_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_udp_ip()) {
    udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
  }
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tcp_ip()) {
    tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
  }
  ::memcpy(&udp_port_, &from.udp_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&udp_port_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:protocol.game.push_team_hall_multi_battle)
}

void push_team_hall_multi_battle::SharedCtor() {
  udp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&udp_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&udp_port_)) + sizeof(num_));
}

push_team_hall_multi_battle::~push_team_hall_multi_battle() {
  // @@protoc_insertion_point(destructor:protocol.game.push_team_hall_multi_battle)
  SharedDtor();
}

void push_team_hall_multi_battle::SharedDtor() {
  udp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void push_team_hall_multi_battle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* push_team_hall_multi_battle::descriptor() {
  ::protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const push_team_hall_multi_battle& push_team_hall_multi_battle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_msg_5fteam_2eproto::scc_info_push_team_hall_multi_battle.base);
  return *internal_default_instance();
}


void push_team_hall_multi_battle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.game.push_team_hall_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_changed();
  guids_.Clear();
  set_changed();
  code_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_changed();
      udp_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      set_changed();
      tcp_ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&udp_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&udp_port_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool push_team_hall_multi_battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.game.push_team_hall_multi_battle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 guids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_guids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string udp_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_team_hall_multi_battle.udp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 udp_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_udp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string tcp_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_team_hall_multi_battle.tcp_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tcp_port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tcp_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code(this->code_size() - 1).data(),
            static_cast<int>(this->code(this->code_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.game.push_team_hall_multi_battle.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.game.push_team_hall_multi_battle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.game.push_team_hall_multi_battle)
  return false;
#undef DO_
}

void push_team_hall_multi_battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.game.push_team_hall_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  for (int i = 0, n = this->guids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_multi_battle.udp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->udp_ip(), output);
  }

  // required int32 udp_port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->udp_port(), output);
  }

  // required string tcp_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_multi_battle.tcp_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tcp_ip(), output);
  }

  // required int32 tcp_port = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tcp_port(), output);
  }

  // repeated string code = 6;
  for (int i = 0, n = this->code_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code(i).data(), static_cast<int>(this->code(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_multi_battle.code");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->code(i), output);
  }

  // required int32 num = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.game.push_team_hall_multi_battle)
}

::google::protobuf::uint8* push_team_hall_multi_battle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.game.push_team_hall_multi_battle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 guids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->guids_, target);

  cached_has_bits = _has_bits_[0];
  // required string udp_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->udp_ip().data(), static_cast<int>(this->udp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_multi_battle.udp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->udp_ip(), target);
  }

  // required int32 udp_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->udp_port(), target);
  }

  // required string tcp_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcp_ip().data(), static_cast<int>(this->tcp_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_multi_battle.tcp_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tcp_ip(), target);
  }

  // required int32 tcp_port = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tcp_port(), target);
  }

  // repeated string code = 6;
  for (int i = 0, n = this->code_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code(i).data(), static_cast<int>(this->code(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.game.push_team_hall_multi_battle.code");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->code(i), target);
  }

  // required int32 num = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.game.push_team_hall_multi_battle)
  return target;
}

size_t push_team_hall_multi_battle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.game.push_team_hall_multi_battle)
  size_t total_size = 0;

  if (has_udp_ip()) {
    // required string udp_ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());
  }

  if (has_tcp_ip()) {
    // required string tcp_ip = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());
  }

  if (has_udp_port()) {
    // required int32 udp_port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());
  }

  if (has_tcp_port()) {
    // required int32 tcp_port = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());
  }

  if (has_num()) {
    // required int32 num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }

  return total_size;
}
size_t push_team_hall_multi_battle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.game.push_team_hall_multi_battle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string udp_ip = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udp_ip());

    // required string tcp_ip = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tcp_ip());

    // required int32 udp_port = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->udp_port());

    // required int32 tcp_port = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcp_port());

    // required int32 num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 guids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->guids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guids_size());
    total_size += data_size;
  }

  // repeated string code = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->code_size());
  for (int i = 0, n = this->code_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->code(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void push_team_hall_multi_battle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.game.push_team_hall_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  const push_team_hall_multi_battle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const push_team_hall_multi_battle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.game.push_team_hall_multi_battle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.game.push_team_hall_multi_battle)
    MergeFrom(*source);
  }
}

void push_team_hall_multi_battle::MergeFrom(const push_team_hall_multi_battle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.game.push_team_hall_multi_battle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guids_.MergeFrom(from.guids_);
  code_.MergeFrom(from.code_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_udp_ip();
      udp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udp_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tcp_ip();
      tcp_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tcp_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      udp_port_ = from.udp_port_;
    }
    if (cached_has_bits & 0x00000008u) {
      tcp_port_ = from.tcp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void push_team_hall_multi_battle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.game.push_team_hall_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void push_team_hall_multi_battle::CopyFrom(const push_team_hall_multi_battle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.game.push_team_hall_multi_battle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_team_hall_multi_battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void push_team_hall_multi_battle::Swap(push_team_hall_multi_battle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void push_team_hall_multi_battle::InternalSwap(push_team_hall_multi_battle* other) {
  using std::swap;
  guids_.InternalSwap(&other->guids_);
  code_.InternalSwap(CastToBase(&other->code_));
  udp_ip_.Swap(&other->udp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tcp_ip_.Swap(&other->tcp_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(udp_port_, other->udp_port_);
  swap(tcp_port_, other->tcp_port_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata push_team_hall_multi_battle::GetMetadata() const {
  protobuf_msg_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_msg_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
}  // namespace protocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::req_hall_rc_single_battle* Arena::CreateMaybeMessage< ::protocol::game::req_hall_rc_single_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::req_hall_rc_single_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::rep_hall_rc_single_battle* Arena::CreateMaybeMessage< ::protocol::game::rep_hall_rc_single_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::rep_hall_rc_single_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_single_battle* Arena::CreateMaybeMessage< ::protocol::game::smsg_single_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_single_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::req_team_rc_multi_battle* Arena::CreateMaybeMessage< ::protocol::game::req_team_rc_multi_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::req_team_rc_multi_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::rep_team_rc_multi_battle* Arena::CreateMaybeMessage< ::protocol::game::rep_team_rc_multi_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::rep_team_rc_multi_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_multi_battle* Arena::CreateMaybeMessage< ::protocol::game::smsg_multi_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_multi_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_has_battle* Arena::CreateMaybeMessage< ::protocol::game::smsg_has_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_has_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::req_hall_rc_has_battle* Arena::CreateMaybeMessage< ::protocol::game::req_hall_rc_has_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::req_hall_rc_has_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::rep_hall_rc_has_battle* Arena::CreateMaybeMessage< ::protocol::game::rep_hall_rc_has_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::rep_hall_rc_has_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_team_player* Arena::CreateMaybeMessage< ::protocol::game::msg_team_player >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_team_player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_team_member* Arena::CreateMaybeMessage< ::protocol::game::msg_team_member >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_team_member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::msg_team* Arena::CreateMaybeMessage< ::protocol::game::msg_team >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::msg_team >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_error* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_error >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_error >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_create* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_create >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_create >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_create* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_create >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_create >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_create* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_create >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_create >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_tuijian* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_tuijian >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_tuijian >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_team_join* Arena::CreateMaybeMessage< ::protocol::game::cmsg_team_join >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_team_join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_join* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_join >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_join* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_join >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_join* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_join >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_other_join* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_other_join >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_other_join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_other_join* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_other_join >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_other_join >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_exit* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_exit >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_exit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_exit* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_exit >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_exit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_exit* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_exit >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_exit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_team_kick* Arena::CreateMaybeMessage< ::protocol::game::cmsg_team_kick >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_team_kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_kick* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_kick >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_kick* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_kick >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_kick* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_kick >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_team_invert* Arena::CreateMaybeMessage< ::protocol::game::cmsg_team_invert >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_team_invert >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_invert* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_invert >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_invert >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_invert* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_invert >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_invert >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_invert* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_invert >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_invert >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::cmsg_team_chat* Arena::CreateMaybeMessage< ::protocol::game::cmsg_team_chat >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::cmsg_team_chat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_chat* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_chat >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_chat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_chat* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_chat >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_chat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::smsg_team_chat* Arena::CreateMaybeMessage< ::protocol::game::smsg_team_chat >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::smsg_team_chat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_hall_team_multi_battle* Arena::CreateMaybeMessage< ::protocol::game::push_hall_team_multi_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_hall_team_multi_battle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::game::push_team_hall_multi_battle* Arena::CreateMaybeMessage< ::protocol::game::push_team_hall_multi_battle >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::game::push_team_hall_multi_battle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
