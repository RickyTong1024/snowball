// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_team.proto

#ifndef PROTOBUF_INCLUDED_msg_5fteam_2eproto
#define PROTOBUF_INCLUDED_msg_5fteam_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_battle.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_5fteam_2eproto 

namespace protobuf_msg_5fteam_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[40];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_5fteam_2eproto
namespace protocol {
namespace game {
class cmsg_team_chat;
class cmsg_team_chatDefaultTypeInternal;
extern cmsg_team_chatDefaultTypeInternal _cmsg_team_chat_default_instance_;
class cmsg_team_invert;
class cmsg_team_invertDefaultTypeInternal;
extern cmsg_team_invertDefaultTypeInternal _cmsg_team_invert_default_instance_;
class cmsg_team_join;
class cmsg_team_joinDefaultTypeInternal;
extern cmsg_team_joinDefaultTypeInternal _cmsg_team_join_default_instance_;
class cmsg_team_kick;
class cmsg_team_kickDefaultTypeInternal;
extern cmsg_team_kickDefaultTypeInternal _cmsg_team_kick_default_instance_;
class msg_team;
class msg_teamDefaultTypeInternal;
extern msg_teamDefaultTypeInternal _msg_team_default_instance_;
class msg_team_member;
class msg_team_memberDefaultTypeInternal;
extern msg_team_memberDefaultTypeInternal _msg_team_member_default_instance_;
class msg_team_player;
class msg_team_playerDefaultTypeInternal;
extern msg_team_playerDefaultTypeInternal _msg_team_player_default_instance_;
class push_hall_team_chat;
class push_hall_team_chatDefaultTypeInternal;
extern push_hall_team_chatDefaultTypeInternal _push_hall_team_chat_default_instance_;
class push_hall_team_create;
class push_hall_team_createDefaultTypeInternal;
extern push_hall_team_createDefaultTypeInternal _push_hall_team_create_default_instance_;
class push_hall_team_exit;
class push_hall_team_exitDefaultTypeInternal;
extern push_hall_team_exitDefaultTypeInternal _push_hall_team_exit_default_instance_;
class push_hall_team_invert;
class push_hall_team_invertDefaultTypeInternal;
extern push_hall_team_invertDefaultTypeInternal _push_hall_team_invert_default_instance_;
class push_hall_team_join;
class push_hall_team_joinDefaultTypeInternal;
extern push_hall_team_joinDefaultTypeInternal _push_hall_team_join_default_instance_;
class push_hall_team_kick;
class push_hall_team_kickDefaultTypeInternal;
extern push_hall_team_kickDefaultTypeInternal _push_hall_team_kick_default_instance_;
class push_hall_team_multi_battle;
class push_hall_team_multi_battleDefaultTypeInternal;
extern push_hall_team_multi_battleDefaultTypeInternal _push_hall_team_multi_battle_default_instance_;
class push_team_hall_chat;
class push_team_hall_chatDefaultTypeInternal;
extern push_team_hall_chatDefaultTypeInternal _push_team_hall_chat_default_instance_;
class push_team_hall_create;
class push_team_hall_createDefaultTypeInternal;
extern push_team_hall_createDefaultTypeInternal _push_team_hall_create_default_instance_;
class push_team_hall_error;
class push_team_hall_errorDefaultTypeInternal;
extern push_team_hall_errorDefaultTypeInternal _push_team_hall_error_default_instance_;
class push_team_hall_exit;
class push_team_hall_exitDefaultTypeInternal;
extern push_team_hall_exitDefaultTypeInternal _push_team_hall_exit_default_instance_;
class push_team_hall_invert;
class push_team_hall_invertDefaultTypeInternal;
extern push_team_hall_invertDefaultTypeInternal _push_team_hall_invert_default_instance_;
class push_team_hall_join;
class push_team_hall_joinDefaultTypeInternal;
extern push_team_hall_joinDefaultTypeInternal _push_team_hall_join_default_instance_;
class push_team_hall_kick;
class push_team_hall_kickDefaultTypeInternal;
extern push_team_hall_kickDefaultTypeInternal _push_team_hall_kick_default_instance_;
class push_team_hall_multi_battle;
class push_team_hall_multi_battleDefaultTypeInternal;
extern push_team_hall_multi_battleDefaultTypeInternal _push_team_hall_multi_battle_default_instance_;
class push_team_hall_other_join;
class push_team_hall_other_joinDefaultTypeInternal;
extern push_team_hall_other_joinDefaultTypeInternal _push_team_hall_other_join_default_instance_;
class rep_hall_rc_has_battle;
class rep_hall_rc_has_battleDefaultTypeInternal;
extern rep_hall_rc_has_battleDefaultTypeInternal _rep_hall_rc_has_battle_default_instance_;
class rep_hall_rc_single_battle;
class rep_hall_rc_single_battleDefaultTypeInternal;
extern rep_hall_rc_single_battleDefaultTypeInternal _rep_hall_rc_single_battle_default_instance_;
class rep_team_rc_multi_battle;
class rep_team_rc_multi_battleDefaultTypeInternal;
extern rep_team_rc_multi_battleDefaultTypeInternal _rep_team_rc_multi_battle_default_instance_;
class req_hall_rc_has_battle;
class req_hall_rc_has_battleDefaultTypeInternal;
extern req_hall_rc_has_battleDefaultTypeInternal _req_hall_rc_has_battle_default_instance_;
class req_hall_rc_single_battle;
class req_hall_rc_single_battleDefaultTypeInternal;
extern req_hall_rc_single_battleDefaultTypeInternal _req_hall_rc_single_battle_default_instance_;
class req_team_rc_multi_battle;
class req_team_rc_multi_battleDefaultTypeInternal;
extern req_team_rc_multi_battleDefaultTypeInternal _req_team_rc_multi_battle_default_instance_;
class smsg_has_battle;
class smsg_has_battleDefaultTypeInternal;
extern smsg_has_battleDefaultTypeInternal _smsg_has_battle_default_instance_;
class smsg_multi_battle;
class smsg_multi_battleDefaultTypeInternal;
extern smsg_multi_battleDefaultTypeInternal _smsg_multi_battle_default_instance_;
class smsg_single_battle;
class smsg_single_battleDefaultTypeInternal;
extern smsg_single_battleDefaultTypeInternal _smsg_single_battle_default_instance_;
class smsg_team_chat;
class smsg_team_chatDefaultTypeInternal;
extern smsg_team_chatDefaultTypeInternal _smsg_team_chat_default_instance_;
class smsg_team_create;
class smsg_team_createDefaultTypeInternal;
extern smsg_team_createDefaultTypeInternal _smsg_team_create_default_instance_;
class smsg_team_exit;
class smsg_team_exitDefaultTypeInternal;
extern smsg_team_exitDefaultTypeInternal _smsg_team_exit_default_instance_;
class smsg_team_invert;
class smsg_team_invertDefaultTypeInternal;
extern smsg_team_invertDefaultTypeInternal _smsg_team_invert_default_instance_;
class smsg_team_join;
class smsg_team_joinDefaultTypeInternal;
extern smsg_team_joinDefaultTypeInternal _smsg_team_join_default_instance_;
class smsg_team_kick;
class smsg_team_kickDefaultTypeInternal;
extern smsg_team_kickDefaultTypeInternal _smsg_team_kick_default_instance_;
class smsg_team_other_join;
class smsg_team_other_joinDefaultTypeInternal;
extern smsg_team_other_joinDefaultTypeInternal _smsg_team_other_join_default_instance_;
class smsg_team_tuijian;
class smsg_team_tuijianDefaultTypeInternal;
extern smsg_team_tuijianDefaultTypeInternal _smsg_team_tuijian_default_instance_;
}  // namespace game
}  // namespace protocol
namespace google {
namespace protobuf {
template<> ::protocol::game::cmsg_team_chat* Arena::CreateMaybeMessage<::protocol::game::cmsg_team_chat>(Arena*);
template<> ::protocol::game::cmsg_team_invert* Arena::CreateMaybeMessage<::protocol::game::cmsg_team_invert>(Arena*);
template<> ::protocol::game::cmsg_team_join* Arena::CreateMaybeMessage<::protocol::game::cmsg_team_join>(Arena*);
template<> ::protocol::game::cmsg_team_kick* Arena::CreateMaybeMessage<::protocol::game::cmsg_team_kick>(Arena*);
template<> ::protocol::game::msg_team* Arena::CreateMaybeMessage<::protocol::game::msg_team>(Arena*);
template<> ::protocol::game::msg_team_member* Arena::CreateMaybeMessage<::protocol::game::msg_team_member>(Arena*);
template<> ::protocol::game::msg_team_player* Arena::CreateMaybeMessage<::protocol::game::msg_team_player>(Arena*);
template<> ::protocol::game::push_hall_team_chat* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_chat>(Arena*);
template<> ::protocol::game::push_hall_team_create* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_create>(Arena*);
template<> ::protocol::game::push_hall_team_exit* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_exit>(Arena*);
template<> ::protocol::game::push_hall_team_invert* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_invert>(Arena*);
template<> ::protocol::game::push_hall_team_join* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_join>(Arena*);
template<> ::protocol::game::push_hall_team_kick* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_kick>(Arena*);
template<> ::protocol::game::push_hall_team_multi_battle* Arena::CreateMaybeMessage<::protocol::game::push_hall_team_multi_battle>(Arena*);
template<> ::protocol::game::push_team_hall_chat* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_chat>(Arena*);
template<> ::protocol::game::push_team_hall_create* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_create>(Arena*);
template<> ::protocol::game::push_team_hall_error* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_error>(Arena*);
template<> ::protocol::game::push_team_hall_exit* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_exit>(Arena*);
template<> ::protocol::game::push_team_hall_invert* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_invert>(Arena*);
template<> ::protocol::game::push_team_hall_join* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_join>(Arena*);
template<> ::protocol::game::push_team_hall_kick* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_kick>(Arena*);
template<> ::protocol::game::push_team_hall_multi_battle* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_multi_battle>(Arena*);
template<> ::protocol::game::push_team_hall_other_join* Arena::CreateMaybeMessage<::protocol::game::push_team_hall_other_join>(Arena*);
template<> ::protocol::game::rep_hall_rc_has_battle* Arena::CreateMaybeMessage<::protocol::game::rep_hall_rc_has_battle>(Arena*);
template<> ::protocol::game::rep_hall_rc_single_battle* Arena::CreateMaybeMessage<::protocol::game::rep_hall_rc_single_battle>(Arena*);
template<> ::protocol::game::rep_team_rc_multi_battle* Arena::CreateMaybeMessage<::protocol::game::rep_team_rc_multi_battle>(Arena*);
template<> ::protocol::game::req_hall_rc_has_battle* Arena::CreateMaybeMessage<::protocol::game::req_hall_rc_has_battle>(Arena*);
template<> ::protocol::game::req_hall_rc_single_battle* Arena::CreateMaybeMessage<::protocol::game::req_hall_rc_single_battle>(Arena*);
template<> ::protocol::game::req_team_rc_multi_battle* Arena::CreateMaybeMessage<::protocol::game::req_team_rc_multi_battle>(Arena*);
template<> ::protocol::game::smsg_has_battle* Arena::CreateMaybeMessage<::protocol::game::smsg_has_battle>(Arena*);
template<> ::protocol::game::smsg_multi_battle* Arena::CreateMaybeMessage<::protocol::game::smsg_multi_battle>(Arena*);
template<> ::protocol::game::smsg_single_battle* Arena::CreateMaybeMessage<::protocol::game::smsg_single_battle>(Arena*);
template<> ::protocol::game::smsg_team_chat* Arena::CreateMaybeMessage<::protocol::game::smsg_team_chat>(Arena*);
template<> ::protocol::game::smsg_team_create* Arena::CreateMaybeMessage<::protocol::game::smsg_team_create>(Arena*);
template<> ::protocol::game::smsg_team_exit* Arena::CreateMaybeMessage<::protocol::game::smsg_team_exit>(Arena*);
template<> ::protocol::game::smsg_team_invert* Arena::CreateMaybeMessage<::protocol::game::smsg_team_invert>(Arena*);
template<> ::protocol::game::smsg_team_join* Arena::CreateMaybeMessage<::protocol::game::smsg_team_join>(Arena*);
template<> ::protocol::game::smsg_team_kick* Arena::CreateMaybeMessage<::protocol::game::smsg_team_kick>(Arena*);
template<> ::protocol::game::smsg_team_other_join* Arena::CreateMaybeMessage<::protocol::game::smsg_team_other_join>(Arena*);
template<> ::protocol::game::smsg_team_tuijian* Arena::CreateMaybeMessage<::protocol::game::smsg_team_tuijian>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protocol {
namespace game {

// ===================================================================

class req_hall_rc_single_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.req_hall_rc_single_battle) */ {
 public:
  req_hall_rc_single_battle();
  virtual ~req_hall_rc_single_battle();

  req_hall_rc_single_battle(const req_hall_rc_single_battle& from);

  inline req_hall_rc_single_battle& operator=(const req_hall_rc_single_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_hall_rc_single_battle(req_hall_rc_single_battle&& from) noexcept
    : req_hall_rc_single_battle() {
    *this = ::std::move(from);
  }

  inline req_hall_rc_single_battle& operator=(req_hall_rc_single_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const req_hall_rc_single_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req_hall_rc_single_battle* internal_default_instance() {
    return reinterpret_cast<const req_hall_rc_single_battle*>(
               &_req_hall_rc_single_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(req_hall_rc_single_battle* other);
  friend void swap(req_hall_rc_single_battle& a, req_hall_rc_single_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_hall_rc_single_battle* New() const final {
    return CreateMaybeMessage<req_hall_rc_single_battle>(NULL);
  }

  req_hall_rc_single_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<req_hall_rc_single_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const req_hall_rc_single_battle& from);
  void MergeFrom(const req_hall_rc_single_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(req_hall_rc_single_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_battle_player_info player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  private:
  const ::protocol::game::msg_battle_player_info& _internal_player() const;
  public:
  const ::protocol::game::msg_battle_player_info& player() const;
  ::protocol::game::msg_battle_player_info* release_player();
  ::protocol::game::msg_battle_player_info* mutable_player();
  void set_allocated_player(::protocol::game::msg_battle_player_info* player);

  // @@protoc_insertion_point(class_scope:protocol.game.req_hall_rc_single_battle)
 private:
  void set_has_player();
  void clear_has_player();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_battle_player_info* player_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rep_hall_rc_single_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.rep_hall_rc_single_battle) */ {
 public:
  rep_hall_rc_single_battle();
  virtual ~rep_hall_rc_single_battle();

  rep_hall_rc_single_battle(const rep_hall_rc_single_battle& from);

  inline rep_hall_rc_single_battle& operator=(const rep_hall_rc_single_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rep_hall_rc_single_battle(rep_hall_rc_single_battle&& from) noexcept
    : rep_hall_rc_single_battle() {
    *this = ::std::move(from);
  }

  inline rep_hall_rc_single_battle& operator=(rep_hall_rc_single_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rep_hall_rc_single_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rep_hall_rc_single_battle* internal_default_instance() {
    return reinterpret_cast<const rep_hall_rc_single_battle*>(
               &_rep_hall_rc_single_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(rep_hall_rc_single_battle* other);
  friend void swap(rep_hall_rc_single_battle& a, rep_hall_rc_single_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rep_hall_rc_single_battle* New() const final {
    return CreateMaybeMessage<rep_hall_rc_single_battle>(NULL);
  }

  rep_hall_rc_single_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rep_hall_rc_single_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rep_hall_rc_single_battle& from);
  void MergeFrom(const rep_hall_rc_single_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rep_hall_rc_single_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string udp_ip = 1;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 1;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 3;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 3;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 udp_port = 2;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 4;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 4;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // required int32 is_new = 6;
  bool has_is_new() const;
  void clear_is_new();
  static const int kIsNewFieldNumber = 6;
  ::google::protobuf::int32 is_new() const;
  void set_is_new(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.rep_hall_rc_single_battle)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();
  void set_has_code();
  void clear_has_code();
  void set_has_is_new();
  void clear_has_is_new();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  ::google::protobuf::int32 is_new_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_single_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_single_battle) */ {
 public:
  smsg_single_battle();
  virtual ~smsg_single_battle();

  smsg_single_battle(const smsg_single_battle& from);

  inline smsg_single_battle& operator=(const smsg_single_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_single_battle(smsg_single_battle&& from) noexcept
    : smsg_single_battle() {
    *this = ::std::move(from);
  }

  inline smsg_single_battle& operator=(smsg_single_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_single_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_single_battle* internal_default_instance() {
    return reinterpret_cast<const smsg_single_battle*>(
               &_smsg_single_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(smsg_single_battle* other);
  friend void swap(smsg_single_battle& a, smsg_single_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_single_battle* New() const final {
    return CreateMaybeMessage<smsg_single_battle>(NULL);
  }

  smsg_single_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_single_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_single_battle& from);
  void MergeFrom(const smsg_single_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_single_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string udp_ip = 1;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 1;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 3;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 3;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 udp_port = 2;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 4;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 4;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // required int32 is_new = 6;
  bool has_is_new() const;
  void clear_is_new();
  static const int kIsNewFieldNumber = 6;
  ::google::protobuf::int32 is_new() const;
  void set_is_new(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_single_battle)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();
  void set_has_code();
  void clear_has_code();
  void set_has_is_new();
  void clear_has_is_new();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  ::google::protobuf::int32 is_new_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_team_rc_multi_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.req_team_rc_multi_battle) */ {
 public:
  req_team_rc_multi_battle();
  virtual ~req_team_rc_multi_battle();

  req_team_rc_multi_battle(const req_team_rc_multi_battle& from);

  inline req_team_rc_multi_battle& operator=(const req_team_rc_multi_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_team_rc_multi_battle(req_team_rc_multi_battle&& from) noexcept
    : req_team_rc_multi_battle() {
    *this = ::std::move(from);
  }

  inline req_team_rc_multi_battle& operator=(req_team_rc_multi_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const req_team_rc_multi_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req_team_rc_multi_battle* internal_default_instance() {
    return reinterpret_cast<const req_team_rc_multi_battle*>(
               &_req_team_rc_multi_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(req_team_rc_multi_battle* other);
  friend void swap(req_team_rc_multi_battle& a, req_team_rc_multi_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_team_rc_multi_battle* New() const final {
    return CreateMaybeMessage<req_team_rc_multi_battle>(NULL);
  }

  req_team_rc_multi_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<req_team_rc_multi_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const req_team_rc_multi_battle& from);
  void MergeFrom(const req_team_rc_multi_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(req_team_rc_multi_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.game.msg_battle_player_info player = 2;
  int player_size() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  ::protocol::game::msg_battle_player_info* mutable_player(int index);
  ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_battle_player_info >*
      mutable_player();
  const ::protocol::game::msg_battle_player_info& player(int index) const;
  ::protocol::game::msg_battle_player_info* add_player();
  const ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_battle_player_info >&
      player() const;

  // required int32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::int32 team_id() const;
  void set_team_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.req_team_rc_multi_battle)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_battle_player_info > player_;
  ::google::protobuf::int32 team_id_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rep_team_rc_multi_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.rep_team_rc_multi_battle) */ {
 public:
  rep_team_rc_multi_battle();
  virtual ~rep_team_rc_multi_battle();

  rep_team_rc_multi_battle(const rep_team_rc_multi_battle& from);

  inline rep_team_rc_multi_battle& operator=(const rep_team_rc_multi_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rep_team_rc_multi_battle(rep_team_rc_multi_battle&& from) noexcept
    : rep_team_rc_multi_battle() {
    *this = ::std::move(from);
  }

  inline rep_team_rc_multi_battle& operator=(rep_team_rc_multi_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rep_team_rc_multi_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rep_team_rc_multi_battle* internal_default_instance() {
    return reinterpret_cast<const rep_team_rc_multi_battle*>(
               &_rep_team_rc_multi_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(rep_team_rc_multi_battle* other);
  friend void swap(rep_team_rc_multi_battle& a, rep_team_rc_multi_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rep_team_rc_multi_battle* New() const final {
    return CreateMaybeMessage<rep_team_rc_multi_battle>(NULL);
  }

  rep_team_rc_multi_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rep_team_rc_multi_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rep_team_rc_multi_battle& from);
  void MergeFrom(const rep_team_rc_multi_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rep_team_rc_multi_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guid = 5;
  int guid_size() const;
  void clear_guid();
  static const int kGuidFieldNumber = 5;
  ::google::protobuf::uint64 guid(int index) const;
  void set_guid(int index, ::google::protobuf::uint64 value);
  void add_guid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guid();

  // repeated string code = 6;
  int code_size() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code(int index) const;
  ::std::string* mutable_code(int index);
  void set_code(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_code(int index, ::std::string&& value);
  #endif
  void set_code(int index, const char* value);
  void set_code(int index, const char* value, size_t size);
  ::std::string* add_code();
  void add_code(const ::std::string& value);
  #if LANG_CXX11
  void add_code(::std::string&& value);
  #endif
  void add_code(const char* value);
  void add_code(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& code() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_code();

  // required string udp_ip = 1;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 1;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 3;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 3;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required int32 udp_port = 2;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 4;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 4;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.rep_team_rc_multi_battle)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> code_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_multi_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_multi_battle) */ {
 public:
  smsg_multi_battle();
  virtual ~smsg_multi_battle();

  smsg_multi_battle(const smsg_multi_battle& from);

  inline smsg_multi_battle& operator=(const smsg_multi_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_multi_battle(smsg_multi_battle&& from) noexcept
    : smsg_multi_battle() {
    *this = ::std::move(from);
  }

  inline smsg_multi_battle& operator=(smsg_multi_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_multi_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_multi_battle* internal_default_instance() {
    return reinterpret_cast<const smsg_multi_battle*>(
               &_smsg_multi_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(smsg_multi_battle* other);
  friend void swap(smsg_multi_battle& a, smsg_multi_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_multi_battle* New() const final {
    return CreateMaybeMessage<smsg_multi_battle>(NULL);
  }

  smsg_multi_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_multi_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_multi_battle& from);
  void MergeFrom(const smsg_multi_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_multi_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string udp_ip = 1;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 1;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 3;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 3;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 udp_port = 2;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 4;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 4;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // required int32 num = 6;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 6;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_multi_battle)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();
  void set_has_code();
  void clear_has_code();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  ::google::protobuf::int32 num_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_has_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_has_battle) */ {
 public:
  smsg_has_battle();
  virtual ~smsg_has_battle();

  smsg_has_battle(const smsg_has_battle& from);

  inline smsg_has_battle& operator=(const smsg_has_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_has_battle(smsg_has_battle&& from) noexcept
    : smsg_has_battle() {
    *this = ::std::move(from);
  }

  inline smsg_has_battle& operator=(smsg_has_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_has_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_has_battle* internal_default_instance() {
    return reinterpret_cast<const smsg_has_battle*>(
               &_smsg_has_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(smsg_has_battle* other);
  friend void swap(smsg_has_battle& a, smsg_has_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_has_battle* New() const final {
    return CreateMaybeMessage<smsg_has_battle>(NULL);
  }

  smsg_has_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_has_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_has_battle& from);
  void MergeFrom(const smsg_has_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_has_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string udp_ip = 1;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 1;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 3;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 3;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 udp_port = 2;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 2;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 4;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 4;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_has_battle)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();
  void set_has_code();
  void clear_has_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class req_hall_rc_has_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.req_hall_rc_has_battle) */ {
 public:
  req_hall_rc_has_battle();
  virtual ~req_hall_rc_has_battle();

  req_hall_rc_has_battle(const req_hall_rc_has_battle& from);

  inline req_hall_rc_has_battle& operator=(const req_hall_rc_has_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_hall_rc_has_battle(req_hall_rc_has_battle&& from) noexcept
    : req_hall_rc_has_battle() {
    *this = ::std::move(from);
  }

  inline req_hall_rc_has_battle& operator=(req_hall_rc_has_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const req_hall_rc_has_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req_hall_rc_has_battle* internal_default_instance() {
    return reinterpret_cast<const req_hall_rc_has_battle*>(
               &_req_hall_rc_has_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(req_hall_rc_has_battle* other);
  friend void swap(req_hall_rc_has_battle& a, req_hall_rc_has_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_hall_rc_has_battle* New() const final {
    return CreateMaybeMessage<req_hall_rc_has_battle>(NULL);
  }

  req_hall_rc_has_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<req_hall_rc_has_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const req_hall_rc_has_battle& from);
  void MergeFrom(const req_hall_rc_has_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(req_hall_rc_has_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.req_hall_rc_has_battle)
 private:
  void set_has_guid();
  void clear_has_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rep_hall_rc_has_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.rep_hall_rc_has_battle) */ {
 public:
  rep_hall_rc_has_battle();
  virtual ~rep_hall_rc_has_battle();

  rep_hall_rc_has_battle(const rep_hall_rc_has_battle& from);

  inline rep_hall_rc_has_battle& operator=(const rep_hall_rc_has_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rep_hall_rc_has_battle(rep_hall_rc_has_battle&& from) noexcept
    : rep_hall_rc_has_battle() {
    *this = ::std::move(from);
  }

  inline rep_hall_rc_has_battle& operator=(rep_hall_rc_has_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rep_hall_rc_has_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rep_hall_rc_has_battle* internal_default_instance() {
    return reinterpret_cast<const rep_hall_rc_has_battle*>(
               &_rep_hall_rc_has_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(rep_hall_rc_has_battle* other);
  friend void swap(rep_hall_rc_has_battle& a, rep_hall_rc_has_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rep_hall_rc_has_battle* New() const final {
    return CreateMaybeMessage<rep_hall_rc_has_battle>(NULL);
  }

  rep_hall_rc_has_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rep_hall_rc_has_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rep_hall_rc_has_battle& from);
  void MergeFrom(const rep_hall_rc_has_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rep_hall_rc_has_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string udp_ip = 2;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 2;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 4;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 4;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 is_new = 1;
  bool has_is_new() const;
  void clear_is_new();
  static const int kIsNewFieldNumber = 1;
  ::google::protobuf::int32 is_new() const;
  void set_is_new(::google::protobuf::int32 value);

  // required int32 udp_port = 3;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 3;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 5;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 5;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.rep_hall_rc_has_battle)
 private:
  void set_has_is_new();
  void clear_has_is_new();
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();
  void set_has_code();
  void clear_has_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 is_new_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_team_player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.msg_team_player) */ {
 public:
  msg_team_player();
  virtual ~msg_team_player();

  msg_team_player(const msg_team_player& from);

  inline msg_team_player& operator=(const msg_team_player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_team_player(msg_team_player&& from) noexcept
    : msg_team_player() {
    *this = ::std::move(from);
  }

  inline msg_team_player& operator=(msg_team_player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_team_player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_team_player* internal_default_instance() {
    return reinterpret_cast<const msg_team_player*>(
               &_msg_team_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(msg_team_player* other);
  friend void swap(msg_team_player& a, msg_team_player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_team_player* New() const final {
    return CreateMaybeMessage<msg_team_player>(NULL);
  }

  msg_team_player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_team_player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_team_player& from);
  void MergeFrom(const msg_team_player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_team_player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // required int32 sex = 3;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // required int32 avatar = 4;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  ::google::protobuf::int32 avatar() const;
  void set_avatar(::google::protobuf::int32 value);

  // required int32 toukuang = 6;
  bool has_toukuang() const;
  void clear_toukuang();
  static const int kToukuangFieldNumber = 6;
  ::google::protobuf::int32 toukuang() const;
  void set_toukuang(::google::protobuf::int32 value);

  // required int32 cup = 7;
  bool has_cup() const;
  void clear_cup();
  static const int kCupFieldNumber = 7;
  ::google::protobuf::int32 cup() const;
  void set_cup(::google::protobuf::int32 value);

  // required int32 name_color = 8;
  bool has_name_color() const;
  void clear_name_color();
  static const int kNameColorFieldNumber = 8;
  ::google::protobuf::int32 name_color() const;
  void set_name_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.msg_team_player)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_name();
  void clear_has_name();
  void set_has_sex();
  void clear_has_sex();
  void set_has_avatar();
  void clear_has_avatar();
  void set_has_toukuang();
  void clear_has_toukuang();
  void set_has_cup();
  void clear_has_cup();
  void set_has_name_color();
  void clear_has_name_color();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 avatar_;
  ::google::protobuf::int32 toukuang_;
  ::google::protobuf::int32 cup_;
  ::google::protobuf::int32 name_color_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_team_member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.msg_team_member) */ {
 public:
  msg_team_member();
  virtual ~msg_team_member();

  msg_team_member(const msg_team_member& from);

  inline msg_team_member& operator=(const msg_team_member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_team_member(msg_team_member&& from) noexcept
    : msg_team_member() {
    *this = ::std::move(from);
  }

  inline msg_team_member& operator=(msg_team_member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_team_member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_team_member* internal_default_instance() {
    return reinterpret_cast<const msg_team_member*>(
               &_msg_team_member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(msg_team_member* other);
  friend void swap(msg_team_member& a, msg_team_member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_team_member* New() const final {
    return CreateMaybeMessage<msg_team_member>(NULL);
  }

  msg_team_member* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_team_member>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_team_member& from);
  void MergeFrom(const msg_team_member& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_team_member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_battle_player_info player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  private:
  const ::protocol::game::msg_battle_player_info& _internal_player() const;
  public:
  const ::protocol::game::msg_battle_player_info& player() const;
  ::protocol::game::msg_battle_player_info* release_player();
  ::protocol::game::msg_battle_player_info* mutable_player();
  void set_allocated_player(::protocol::game::msg_battle_player_info* player);

  // required int32 member_type = 1;
  bool has_member_type() const;
  void clear_member_type();
  static const int kMemberTypeFieldNumber = 1;
  ::google::protobuf::int32 member_type() const;
  void set_member_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.msg_team_member)
 private:
  void set_has_member_type();
  void clear_has_member_type();
  void set_has_player();
  void clear_has_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_battle_player_info* player_;
  ::google::protobuf::int32 member_type_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_team : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.msg_team) */ {
 public:
  msg_team();
  virtual ~msg_team();

  msg_team(const msg_team& from);

  inline msg_team& operator=(const msg_team& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_team(msg_team&& from) noexcept
    : msg_team() {
    *this = ::std::move(from);
  }

  inline msg_team& operator=(msg_team&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_team& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_team* internal_default_instance() {
    return reinterpret_cast<const msg_team*>(
               &_msg_team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(msg_team* other);
  friend void swap(msg_team& a, msg_team& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_team* New() const final {
    return CreateMaybeMessage<msg_team>(NULL);
  }

  msg_team* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_team>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_team& from);
  void MergeFrom(const msg_team& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_team* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.game.msg_team_member member = 2;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  ::protocol::game::msg_team_member* mutable_member(int index);
  ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_member >*
      mutable_member();
  const ::protocol::game::msg_team_member& member(int index) const;
  ::protocol::game::msg_team_member* add_member();
  const ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_member >&
      member() const;

  // required int32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::int32 team_id() const;
  void set_team_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.msg_team)
 private:
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_member > member_;
  ::google::protobuf::int32 team_id_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_error) */ {
 public:
  push_team_hall_error();
  virtual ~push_team_hall_error();

  push_team_hall_error(const push_team_hall_error& from);

  inline push_team_hall_error& operator=(const push_team_hall_error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_error(push_team_hall_error&& from) noexcept
    : push_team_hall_error() {
    *this = ::std::move(from);
  }

  inline push_team_hall_error& operator=(push_team_hall_error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_error* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_error*>(
               &_push_team_hall_error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(push_team_hall_error* other);
  friend void swap(push_team_hall_error& a, push_team_hall_error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_error* New() const final {
    return CreateMaybeMessage<push_team_hall_error>(NULL);
  }

  push_team_hall_error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_error& from);
  void MergeFrom(const push_team_hall_error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // required int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_error)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_code();
  void clear_has_code();
  void set_has_text();
  void clear_has_text();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_create : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_create) */ {
 public:
  push_hall_team_create();
  virtual ~push_hall_team_create();

  push_hall_team_create(const push_hall_team_create& from);

  inline push_hall_team_create& operator=(const push_hall_team_create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_create(push_hall_team_create&& from) noexcept
    : push_hall_team_create() {
    *this = ::std::move(from);
  }

  inline push_hall_team_create& operator=(push_hall_team_create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_create* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_create*>(
               &_push_hall_team_create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(push_hall_team_create* other);
  friend void swap(push_hall_team_create& a, push_hall_team_create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_create* New() const final {
    return CreateMaybeMessage<push_hall_team_create>(NULL);
  }

  push_hall_team_create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_create& from);
  void MergeFrom(const push_hall_team_create& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_battle_player_info player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  private:
  const ::protocol::game::msg_battle_player_info& _internal_player() const;
  public:
  const ::protocol::game::msg_battle_player_info& player() const;
  ::protocol::game::msg_battle_player_info* release_player();
  ::protocol::game::msg_battle_player_info* mutable_player();
  void set_allocated_player(::protocol::game::msg_battle_player_info* player);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_create)
 private:
  void set_has_player();
  void clear_has_player();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_battle_player_info* player_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_create : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_create) */ {
 public:
  push_team_hall_create();
  virtual ~push_team_hall_create();

  push_team_hall_create(const push_team_hall_create& from);

  inline push_team_hall_create& operator=(const push_team_hall_create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_create(push_team_hall_create&& from) noexcept
    : push_team_hall_create() {
    *this = ::std::move(from);
  }

  inline push_team_hall_create& operator=(push_team_hall_create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_create* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_create*>(
               &_push_team_hall_create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(push_team_hall_create* other);
  friend void swap(push_team_hall_create& a, push_team_hall_create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_create* New() const final {
    return CreateMaybeMessage<push_team_hall_create>(NULL);
  }

  push_team_hall_create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_create& from);
  void MergeFrom(const push_team_hall_create& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  private:
  const ::protocol::game::msg_team& _internal_team() const;
  public:
  const ::protocol::game::msg_team& team() const;
  ::protocol::game::msg_team* release_team();
  ::protocol::game::msg_team* mutable_team();
  void set_allocated_team(::protocol::game::msg_team* team);

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_create)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_team();
  void clear_has_team();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team* team_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_create : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_create) */ {
 public:
  smsg_team_create();
  virtual ~smsg_team_create();

  smsg_team_create(const smsg_team_create& from);

  inline smsg_team_create& operator=(const smsg_team_create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_create(smsg_team_create&& from) noexcept
    : smsg_team_create() {
    *this = ::std::move(from);
  }

  inline smsg_team_create& operator=(smsg_team_create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_create* internal_default_instance() {
    return reinterpret_cast<const smsg_team_create*>(
               &_smsg_team_create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(smsg_team_create* other);
  friend void swap(smsg_team_create& a, smsg_team_create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_create* New() const final {
    return CreateMaybeMessage<smsg_team_create>(NULL);
  }

  smsg_team_create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_create& from);
  void MergeFrom(const smsg_team_create& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  private:
  const ::protocol::game::msg_team& _internal_team() const;
  public:
  const ::protocol::game::msg_team& team() const;
  ::protocol::game::msg_team* release_team();
  ::protocol::game::msg_team* mutable_team();
  void set_allocated_team(::protocol::game::msg_team* team);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_create)
 private:
  void set_has_team();
  void clear_has_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team* team_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_tuijian : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_tuijian) */ {
 public:
  smsg_team_tuijian();
  virtual ~smsg_team_tuijian();

  smsg_team_tuijian(const smsg_team_tuijian& from);

  inline smsg_team_tuijian& operator=(const smsg_team_tuijian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_tuijian(smsg_team_tuijian&& from) noexcept
    : smsg_team_tuijian() {
    *this = ::std::move(from);
  }

  inline smsg_team_tuijian& operator=(smsg_team_tuijian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_tuijian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_tuijian* internal_default_instance() {
    return reinterpret_cast<const smsg_team_tuijian*>(
               &_smsg_team_tuijian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(smsg_team_tuijian* other);
  friend void swap(smsg_team_tuijian& a, smsg_team_tuijian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_tuijian* New() const final {
    return CreateMaybeMessage<smsg_team_tuijian>(NULL);
  }

  smsg_team_tuijian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_tuijian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_tuijian& from);
  void MergeFrom(const smsg_team_tuijian& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_tuijian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.game.msg_team_player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  ::protocol::game::msg_team_player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_player >*
      mutable_players();
  const ::protocol::game::msg_team_player& players(int index) const;
  ::protocol::game::msg_team_player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_player >&
      players() const;

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_tuijian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_player > players_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cmsg_team_join : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.cmsg_team_join) */ {
 public:
  cmsg_team_join();
  virtual ~cmsg_team_join();

  cmsg_team_join(const cmsg_team_join& from);

  inline cmsg_team_join& operator=(const cmsg_team_join& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmsg_team_join(cmsg_team_join&& from) noexcept
    : cmsg_team_join() {
    *this = ::std::move(from);
  }

  inline cmsg_team_join& operator=(cmsg_team_join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_team_join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmsg_team_join* internal_default_instance() {
    return reinterpret_cast<const cmsg_team_join*>(
               &_cmsg_team_join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(cmsg_team_join* other);
  friend void swap(cmsg_team_join& a, cmsg_team_join& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmsg_team_join* New() const final {
    return CreateMaybeMessage<cmsg_team_join>(NULL);
  }

  cmsg_team_join* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cmsg_team_join>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cmsg_team_join& from);
  void MergeFrom(const cmsg_team_join& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmsg_team_join* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.cmsg_team_join)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_join : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_join) */ {
 public:
  push_hall_team_join();
  virtual ~push_hall_team_join();

  push_hall_team_join(const push_hall_team_join& from);

  inline push_hall_team_join& operator=(const push_hall_team_join& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_join(push_hall_team_join&& from) noexcept
    : push_hall_team_join() {
    *this = ::std::move(from);
  }

  inline push_hall_team_join& operator=(push_hall_team_join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_join* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_join*>(
               &_push_hall_team_join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(push_hall_team_join* other);
  friend void swap(push_hall_team_join& a, push_hall_team_join& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_join* New() const final {
    return CreateMaybeMessage<push_hall_team_join>(NULL);
  }

  push_hall_team_join* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_join>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_join& from);
  void MergeFrom(const push_hall_team_join& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_join* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_battle_player_info player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  private:
  const ::protocol::game::msg_battle_player_info& _internal_player() const;
  public:
  const ::protocol::game::msg_battle_player_info& player() const;
  ::protocol::game::msg_battle_player_info* release_player();
  ::protocol::game::msg_battle_player_info* mutable_player();
  void set_allocated_player(::protocol::game::msg_battle_player_info* player);

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_join)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_player();
  void clear_has_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_battle_player_info* player_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_join : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_join) */ {
 public:
  push_team_hall_join();
  virtual ~push_team_hall_join();

  push_team_hall_join(const push_team_hall_join& from);

  inline push_team_hall_join& operator=(const push_team_hall_join& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_join(push_team_hall_join&& from) noexcept
    : push_team_hall_join() {
    *this = ::std::move(from);
  }

  inline push_team_hall_join& operator=(push_team_hall_join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_join* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_join*>(
               &_push_team_hall_join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(push_team_hall_join* other);
  friend void swap(push_team_hall_join& a, push_team_hall_join& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_join* New() const final {
    return CreateMaybeMessage<push_team_hall_join>(NULL);
  }

  push_team_hall_join* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_join>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_join& from);
  void MergeFrom(const push_team_hall_join& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_join* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  private:
  const ::protocol::game::msg_team& _internal_team() const;
  public:
  const ::protocol::game::msg_team& team() const;
  ::protocol::game::msg_team* release_team();
  ::protocol::game::msg_team* mutable_team();
  void set_allocated_team(::protocol::game::msg_team* team);

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_join)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_team();
  void clear_has_team();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team* team_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_join : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_join) */ {
 public:
  smsg_team_join();
  virtual ~smsg_team_join();

  smsg_team_join(const smsg_team_join& from);

  inline smsg_team_join& operator=(const smsg_team_join& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_join(smsg_team_join&& from) noexcept
    : smsg_team_join() {
    *this = ::std::move(from);
  }

  inline smsg_team_join& operator=(smsg_team_join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_join* internal_default_instance() {
    return reinterpret_cast<const smsg_team_join*>(
               &_smsg_team_join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(smsg_team_join* other);
  friend void swap(smsg_team_join& a, smsg_team_join& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_join* New() const final {
    return CreateMaybeMessage<smsg_team_join>(NULL);
  }

  smsg_team_join* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_join>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_join& from);
  void MergeFrom(const smsg_team_join& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_join* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  private:
  const ::protocol::game::msg_team& _internal_team() const;
  public:
  const ::protocol::game::msg_team& team() const;
  ::protocol::game::msg_team* release_team();
  ::protocol::game::msg_team* mutable_team();
  void set_allocated_team(::protocol::game::msg_team* team);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_join)
 private:
  void set_has_team();
  void clear_has_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team* team_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_other_join : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_other_join) */ {
 public:
  push_team_hall_other_join();
  virtual ~push_team_hall_other_join();

  push_team_hall_other_join(const push_team_hall_other_join& from);

  inline push_team_hall_other_join& operator=(const push_team_hall_other_join& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_other_join(push_team_hall_other_join&& from) noexcept
    : push_team_hall_other_join() {
    *this = ::std::move(from);
  }

  inline push_team_hall_other_join& operator=(push_team_hall_other_join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_other_join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_other_join* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_other_join*>(
               &_push_team_hall_other_join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(push_team_hall_other_join* other);
  friend void swap(push_team_hall_other_join& a, push_team_hall_other_join& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_other_join* New() const final {
    return CreateMaybeMessage<push_team_hall_other_join>(NULL);
  }

  push_team_hall_other_join* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_other_join>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_other_join& from);
  void MergeFrom(const push_team_hall_other_join& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_other_join* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guids = 1;
  int guids_size() const;
  void clear_guids();
  static const int kGuidsFieldNumber = 1;
  ::google::protobuf::uint64 guids(int index) const;
  void set_guids(int index, ::google::protobuf::uint64 value);
  void add_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // required .protocol.game.msg_team_member member = 2;
  bool has_member() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  private:
  const ::protocol::game::msg_team_member& _internal_member() const;
  public:
  const ::protocol::game::msg_team_member& member() const;
  ::protocol::game::msg_team_member* release_member();
  ::protocol::game::msg_team_member* mutable_member();
  void set_allocated_member(::protocol::game::msg_team_member* member);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_other_join)
 private:
  void set_has_member();
  void clear_has_member();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  ::protocol::game::msg_team_member* member_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_other_join : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_other_join) */ {
 public:
  smsg_team_other_join();
  virtual ~smsg_team_other_join();

  smsg_team_other_join(const smsg_team_other_join& from);

  inline smsg_team_other_join& operator=(const smsg_team_other_join& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_other_join(smsg_team_other_join&& from) noexcept
    : smsg_team_other_join() {
    *this = ::std::move(from);
  }

  inline smsg_team_other_join& operator=(smsg_team_other_join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_other_join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_other_join* internal_default_instance() {
    return reinterpret_cast<const smsg_team_other_join*>(
               &_smsg_team_other_join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(smsg_team_other_join* other);
  friend void swap(smsg_team_other_join& a, smsg_team_other_join& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_other_join* New() const final {
    return CreateMaybeMessage<smsg_team_other_join>(NULL);
  }

  smsg_team_other_join* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_other_join>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_other_join& from);
  void MergeFrom(const smsg_team_other_join& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_other_join* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team_member member = 1;
  bool has_member() const;
  void clear_member();
  static const int kMemberFieldNumber = 1;
  private:
  const ::protocol::game::msg_team_member& _internal_member() const;
  public:
  const ::protocol::game::msg_team_member& member() const;
  ::protocol::game::msg_team_member* release_member();
  ::protocol::game::msg_team_member* mutable_member();
  void set_allocated_member(::protocol::game::msg_team_member* member);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_other_join)
 private:
  void set_has_member();
  void clear_has_member();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team_member* member_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_exit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_exit) */ {
 public:
  push_hall_team_exit();
  virtual ~push_hall_team_exit();

  push_hall_team_exit(const push_hall_team_exit& from);

  inline push_hall_team_exit& operator=(const push_hall_team_exit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_exit(push_hall_team_exit&& from) noexcept
    : push_hall_team_exit() {
    *this = ::std::move(from);
  }

  inline push_hall_team_exit& operator=(push_hall_team_exit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_exit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_exit* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_exit*>(
               &_push_hall_team_exit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(push_hall_team_exit* other);
  friend void swap(push_hall_team_exit& a, push_hall_team_exit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_exit* New() const final {
    return CreateMaybeMessage<push_hall_team_exit>(NULL);
  }

  push_hall_team_exit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_exit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_exit& from);
  void MergeFrom(const push_hall_team_exit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_exit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // required int32 mauto = 2;
  bool has_mauto() const;
  void clear_mauto();
  static const int kMautoFieldNumber = 2;
  ::google::protobuf::int32 mauto() const;
  void set_mauto(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_exit)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_mauto();
  void clear_has_mauto();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::int32 mauto_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_exit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_exit) */ {
 public:
  push_team_hall_exit();
  virtual ~push_team_hall_exit();

  push_team_hall_exit(const push_team_hall_exit& from);

  inline push_team_hall_exit& operator=(const push_team_hall_exit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_exit(push_team_hall_exit&& from) noexcept
    : push_team_hall_exit() {
    *this = ::std::move(from);
  }

  inline push_team_hall_exit& operator=(push_team_hall_exit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_exit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_exit* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_exit*>(
               &_push_team_hall_exit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(push_team_hall_exit* other);
  friend void swap(push_team_hall_exit& a, push_team_hall_exit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_exit* New() const final {
    return CreateMaybeMessage<push_team_hall_exit>(NULL);
  }

  push_team_hall_exit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_exit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_exit& from);
  void MergeFrom(const push_team_hall_exit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_exit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guids = 1;
  int guids_size() const;
  void clear_guids();
  static const int kGuidsFieldNumber = 1;
  ::google::protobuf::uint64 guids(int index) const;
  void set_guids(int index, ::google::protobuf::uint64 value);
  void add_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // required uint64 leader_guid = 2;
  bool has_leader_guid() const;
  void clear_leader_guid();
  static const int kLeaderGuidFieldNumber = 2;
  ::google::protobuf::uint64 leader_guid() const;
  void set_leader_guid(::google::protobuf::uint64 value);

  // required uint64 player_guid = 3;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 3;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_exit)
 private:
  void set_has_leader_guid();
  void clear_has_leader_guid();
  void set_has_player_guid();
  void clear_has_player_guid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  ::google::protobuf::uint64 leader_guid_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_exit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_exit) */ {
 public:
  smsg_team_exit();
  virtual ~smsg_team_exit();

  smsg_team_exit(const smsg_team_exit& from);

  inline smsg_team_exit& operator=(const smsg_team_exit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_exit(smsg_team_exit&& from) noexcept
    : smsg_team_exit() {
    *this = ::std::move(from);
  }

  inline smsg_team_exit& operator=(smsg_team_exit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_exit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_exit* internal_default_instance() {
    return reinterpret_cast<const smsg_team_exit*>(
               &_smsg_team_exit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(smsg_team_exit* other);
  friend void swap(smsg_team_exit& a, smsg_team_exit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_exit* New() const final {
    return CreateMaybeMessage<smsg_team_exit>(NULL);
  }

  smsg_team_exit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_exit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_exit& from);
  void MergeFrom(const smsg_team_exit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_exit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 leader_guid = 1;
  bool has_leader_guid() const;
  void clear_leader_guid();
  static const int kLeaderGuidFieldNumber = 1;
  ::google::protobuf::uint64 leader_guid() const;
  void set_leader_guid(::google::protobuf::uint64 value);

  // required uint64 player_guid = 2;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_exit)
 private:
  void set_has_leader_guid();
  void clear_has_leader_guid();
  void set_has_player_guid();
  void clear_has_player_guid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 leader_guid_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cmsg_team_kick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.cmsg_team_kick) */ {
 public:
  cmsg_team_kick();
  virtual ~cmsg_team_kick();

  cmsg_team_kick(const cmsg_team_kick& from);

  inline cmsg_team_kick& operator=(const cmsg_team_kick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmsg_team_kick(cmsg_team_kick&& from) noexcept
    : cmsg_team_kick() {
    *this = ::std::move(from);
  }

  inline cmsg_team_kick& operator=(cmsg_team_kick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_team_kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmsg_team_kick* internal_default_instance() {
    return reinterpret_cast<const cmsg_team_kick*>(
               &_cmsg_team_kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(cmsg_team_kick* other);
  friend void swap(cmsg_team_kick& a, cmsg_team_kick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmsg_team_kick* New() const final {
    return CreateMaybeMessage<cmsg_team_kick>(NULL);
  }

  cmsg_team_kick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cmsg_team_kick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cmsg_team_kick& from);
  void MergeFrom(const cmsg_team_kick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmsg_team_kick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 target_guid = 1;
  bool has_target_guid() const;
  void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  ::google::protobuf::uint64 target_guid() const;
  void set_target_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.cmsg_team_kick)
 private:
  void set_has_target_guid();
  void clear_has_target_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 target_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_kick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_kick) */ {
 public:
  push_hall_team_kick();
  virtual ~push_hall_team_kick();

  push_hall_team_kick(const push_hall_team_kick& from);

  inline push_hall_team_kick& operator=(const push_hall_team_kick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_kick(push_hall_team_kick&& from) noexcept
    : push_hall_team_kick() {
    *this = ::std::move(from);
  }

  inline push_hall_team_kick& operator=(push_hall_team_kick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_kick* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_kick*>(
               &_push_hall_team_kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(push_hall_team_kick* other);
  friend void swap(push_hall_team_kick& a, push_hall_team_kick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_kick* New() const final {
    return CreateMaybeMessage<push_hall_team_kick>(NULL);
  }

  push_hall_team_kick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_kick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_kick& from);
  void MergeFrom(const push_hall_team_kick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_kick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // required uint64 target_guid = 2;
  bool has_target_guid() const;
  void clear_target_guid();
  static const int kTargetGuidFieldNumber = 2;
  ::google::protobuf::uint64 target_guid() const;
  void set_target_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_kick)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_target_guid();
  void clear_has_target_guid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 target_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_kick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_kick) */ {
 public:
  push_team_hall_kick();
  virtual ~push_team_hall_kick();

  push_team_hall_kick(const push_team_hall_kick& from);

  inline push_team_hall_kick& operator=(const push_team_hall_kick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_kick(push_team_hall_kick&& from) noexcept
    : push_team_hall_kick() {
    *this = ::std::move(from);
  }

  inline push_team_hall_kick& operator=(push_team_hall_kick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_kick* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_kick*>(
               &_push_team_hall_kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(push_team_hall_kick* other);
  friend void swap(push_team_hall_kick& a, push_team_hall_kick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_kick* New() const final {
    return CreateMaybeMessage<push_team_hall_kick>(NULL);
  }

  push_team_hall_kick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_kick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_kick& from);
  void MergeFrom(const push_team_hall_kick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_kick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guids = 1;
  int guids_size() const;
  void clear_guids();
  static const int kGuidsFieldNumber = 1;
  ::google::protobuf::uint64 guids(int index) const;
  void set_guids(int index, ::google::protobuf::uint64 value);
  void add_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // required uint64 player_guid = 2;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_kick)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_kick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_kick) */ {
 public:
  smsg_team_kick();
  virtual ~smsg_team_kick();

  smsg_team_kick(const smsg_team_kick& from);

  inline smsg_team_kick& operator=(const smsg_team_kick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_kick(smsg_team_kick&& from) noexcept
    : smsg_team_kick() {
    *this = ::std::move(from);
  }

  inline smsg_team_kick& operator=(smsg_team_kick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_kick* internal_default_instance() {
    return reinterpret_cast<const smsg_team_kick*>(
               &_smsg_team_kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(smsg_team_kick* other);
  friend void swap(smsg_team_kick& a, smsg_team_kick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_kick* New() const final {
    return CreateMaybeMessage<smsg_team_kick>(NULL);
  }

  smsg_team_kick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_kick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_kick& from);
  void MergeFrom(const smsg_team_kick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_kick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_kick)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cmsg_team_invert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.cmsg_team_invert) */ {
 public:
  cmsg_team_invert();
  virtual ~cmsg_team_invert();

  cmsg_team_invert(const cmsg_team_invert& from);

  inline cmsg_team_invert& operator=(const cmsg_team_invert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmsg_team_invert(cmsg_team_invert&& from) noexcept
    : cmsg_team_invert() {
    *this = ::std::move(from);
  }

  inline cmsg_team_invert& operator=(cmsg_team_invert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_team_invert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmsg_team_invert* internal_default_instance() {
    return reinterpret_cast<const cmsg_team_invert*>(
               &_cmsg_team_invert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(cmsg_team_invert* other);
  friend void swap(cmsg_team_invert& a, cmsg_team_invert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmsg_team_invert* New() const final {
    return CreateMaybeMessage<cmsg_team_invert>(NULL);
  }

  cmsg_team_invert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cmsg_team_invert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cmsg_team_invert& from);
  void MergeFrom(const cmsg_team_invert& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmsg_team_invert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 target_guid = 1;
  bool has_target_guid() const;
  void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  ::google::protobuf::uint64 target_guid() const;
  void set_target_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.cmsg_team_invert)
 private:
  void set_has_target_guid();
  void clear_has_target_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 target_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_invert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_invert) */ {
 public:
  push_hall_team_invert();
  virtual ~push_hall_team_invert();

  push_hall_team_invert(const push_hall_team_invert& from);

  inline push_hall_team_invert& operator=(const push_hall_team_invert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_invert(push_hall_team_invert&& from) noexcept
    : push_hall_team_invert() {
    *this = ::std::move(from);
  }

  inline push_hall_team_invert& operator=(push_hall_team_invert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_invert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_invert* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_invert*>(
               &_push_hall_team_invert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(push_hall_team_invert* other);
  friend void swap(push_hall_team_invert& a, push_hall_team_invert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_invert* New() const final {
    return CreateMaybeMessage<push_hall_team_invert>(NULL);
  }

  push_hall_team_invert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_invert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_invert& from);
  void MergeFrom(const push_hall_team_invert& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_invert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // required uint64 target_guid = 2;
  bool has_target_guid() const;
  void clear_target_guid();
  static const int kTargetGuidFieldNumber = 2;
  ::google::protobuf::uint64 target_guid() const;
  void set_target_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_invert)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_target_guid();
  void clear_has_target_guid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 target_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_invert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_invert) */ {
 public:
  push_team_hall_invert();
  virtual ~push_team_hall_invert();

  push_team_hall_invert(const push_team_hall_invert& from);

  inline push_team_hall_invert& operator=(const push_team_hall_invert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_invert(push_team_hall_invert&& from) noexcept
    : push_team_hall_invert() {
    *this = ::std::move(from);
  }

  inline push_team_hall_invert& operator=(push_team_hall_invert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_invert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_invert* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_invert*>(
               &_push_team_hall_invert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(push_team_hall_invert* other);
  friend void swap(push_team_hall_invert& a, push_team_hall_invert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_invert* New() const final {
    return CreateMaybeMessage<push_team_hall_invert>(NULL);
  }

  push_team_hall_invert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_invert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_invert& from);
  void MergeFrom(const push_team_hall_invert& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_invert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team_player player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  private:
  const ::protocol::game::msg_team_player& _internal_player() const;
  public:
  const ::protocol::game::msg_team_player& player() const;
  ::protocol::game::msg_team_player* release_player();
  ::protocol::game::msg_team_player* mutable_player();
  void set_allocated_player(::protocol::game::msg_team_player* player);

  // required uint64 target_guid = 1;
  bool has_target_guid() const;
  void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  ::google::protobuf::uint64 target_guid() const;
  void set_target_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_invert)
 private:
  void set_has_target_guid();
  void clear_has_target_guid();
  void set_has_player();
  void clear_has_player();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team_player* player_;
  ::google::protobuf::uint64 target_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_invert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_invert) */ {
 public:
  smsg_team_invert();
  virtual ~smsg_team_invert();

  smsg_team_invert(const smsg_team_invert& from);

  inline smsg_team_invert& operator=(const smsg_team_invert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_invert(smsg_team_invert&& from) noexcept
    : smsg_team_invert() {
    *this = ::std::move(from);
  }

  inline smsg_team_invert& operator=(smsg_team_invert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_invert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_invert* internal_default_instance() {
    return reinterpret_cast<const smsg_team_invert*>(
               &_smsg_team_invert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(smsg_team_invert* other);
  friend void swap(smsg_team_invert& a, smsg_team_invert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_invert* New() const final {
    return CreateMaybeMessage<smsg_team_invert>(NULL);
  }

  smsg_team_invert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_invert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_invert& from);
  void MergeFrom(const smsg_team_invert& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_invert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.game.msg_team_player player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  private:
  const ::protocol::game::msg_team_player& _internal_player() const;
  public:
  const ::protocol::game::msg_team_player& player() const;
  ::protocol::game::msg_team_player* release_player();
  ::protocol::game::msg_team_player* mutable_player();
  void set_allocated_player(::protocol::game::msg_team_player* player);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_invert)
 private:
  void set_has_player();
  void clear_has_player();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::game::msg_team_player* player_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cmsg_team_chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.cmsg_team_chat) */ {
 public:
  cmsg_team_chat();
  virtual ~cmsg_team_chat();

  cmsg_team_chat(const cmsg_team_chat& from);

  inline cmsg_team_chat& operator=(const cmsg_team_chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  cmsg_team_chat(cmsg_team_chat&& from) noexcept
    : cmsg_team_chat() {
    *this = ::std::move(from);
  }

  inline cmsg_team_chat& operator=(cmsg_team_chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_team_chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cmsg_team_chat* internal_default_instance() {
    return reinterpret_cast<const cmsg_team_chat*>(
               &_cmsg_team_chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(cmsg_team_chat* other);
  friend void swap(cmsg_team_chat& a, cmsg_team_chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline cmsg_team_chat* New() const final {
    return CreateMaybeMessage<cmsg_team_chat>(NULL);
  }

  cmsg_team_chat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<cmsg_team_chat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const cmsg_team_chat& from);
  void MergeFrom(const cmsg_team_chat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cmsg_team_chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:protocol.game.cmsg_team_chat)
 private:
  void set_has_text();
  void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_chat) */ {
 public:
  push_hall_team_chat();
  virtual ~push_hall_team_chat();

  push_hall_team_chat(const push_hall_team_chat& from);

  inline push_hall_team_chat& operator=(const push_hall_team_chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_chat(push_hall_team_chat&& from) noexcept
    : push_hall_team_chat() {
    *this = ::std::move(from);
  }

  inline push_hall_team_chat& operator=(push_hall_team_chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_chat* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_chat*>(
               &_push_hall_team_chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(push_hall_team_chat* other);
  friend void swap(push_hall_team_chat& a, push_hall_team_chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_chat* New() const final {
    return CreateMaybeMessage<push_hall_team_chat>(NULL);
  }

  push_hall_team_chat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_chat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_chat& from);
  void MergeFrom(const push_hall_team_chat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_chat)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_text();
  void clear_has_text();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_chat) */ {
 public:
  push_team_hall_chat();
  virtual ~push_team_hall_chat();

  push_team_hall_chat(const push_team_hall_chat& from);

  inline push_team_hall_chat& operator=(const push_team_hall_chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_chat(push_team_hall_chat&& from) noexcept
    : push_team_hall_chat() {
    *this = ::std::move(from);
  }

  inline push_team_hall_chat& operator=(push_team_hall_chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_chat* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_chat*>(
               &_push_team_hall_chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(push_team_hall_chat* other);
  friend void swap(push_team_hall_chat& a, push_team_hall_chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_chat* New() const final {
    return CreateMaybeMessage<push_team_hall_chat>(NULL);
  }

  push_team_hall_chat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_chat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_chat& from);
  void MergeFrom(const push_team_hall_chat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guids = 1;
  int guids_size() const;
  void clear_guids();
  static const int kGuidsFieldNumber = 1;
  ::google::protobuf::uint64 guids(int index) const;
  void set_guids(int index, ::google::protobuf::uint64 value);
  void add_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // required string text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required uint64 player_guid = 2;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_chat)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_text();
  void clear_has_text();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class smsg_team_chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.smsg_team_chat) */ {
 public:
  smsg_team_chat();
  virtual ~smsg_team_chat();

  smsg_team_chat(const smsg_team_chat& from);

  inline smsg_team_chat& operator=(const smsg_team_chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  smsg_team_chat(smsg_team_chat&& from) noexcept
    : smsg_team_chat() {
    *this = ::std::move(from);
  }

  inline smsg_team_chat& operator=(smsg_team_chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_team_chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const smsg_team_chat* internal_default_instance() {
    return reinterpret_cast<const smsg_team_chat*>(
               &_smsg_team_chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(smsg_team_chat* other);
  friend void swap(smsg_team_chat& a, smsg_team_chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline smsg_team_chat* New() const final {
    return CreateMaybeMessage<smsg_team_chat>(NULL);
  }

  smsg_team_chat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<smsg_team_chat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const smsg_team_chat& from);
  void MergeFrom(const smsg_team_chat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(smsg_team_chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.smsg_team_chat)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();
  void set_has_text();
  void clear_has_text();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_hall_team_multi_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_hall_team_multi_battle) */ {
 public:
  push_hall_team_multi_battle();
  virtual ~push_hall_team_multi_battle();

  push_hall_team_multi_battle(const push_hall_team_multi_battle& from);

  inline push_hall_team_multi_battle& operator=(const push_hall_team_multi_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_hall_team_multi_battle(push_hall_team_multi_battle&& from) noexcept
    : push_hall_team_multi_battle() {
    *this = ::std::move(from);
  }

  inline push_hall_team_multi_battle& operator=(push_hall_team_multi_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_hall_team_multi_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_hall_team_multi_battle* internal_default_instance() {
    return reinterpret_cast<const push_hall_team_multi_battle*>(
               &_push_hall_team_multi_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(push_hall_team_multi_battle* other);
  friend void swap(push_hall_team_multi_battle& a, push_hall_team_multi_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_hall_team_multi_battle* New() const final {
    return CreateMaybeMessage<push_hall_team_multi_battle>(NULL);
  }

  push_hall_team_multi_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_hall_team_multi_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_hall_team_multi_battle& from);
  void MergeFrom(const push_hall_team_multi_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_hall_team_multi_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 player_guid = 1;
  bool has_player_guid() const;
  void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  ::google::protobuf::uint64 player_guid() const;
  void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_hall_team_multi_battle)
 private:
  void set_has_player_guid();
  void clear_has_player_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 player_guid_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push_team_hall_multi_battle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.game.push_team_hall_multi_battle) */ {
 public:
  push_team_hall_multi_battle();
  virtual ~push_team_hall_multi_battle();

  push_team_hall_multi_battle(const push_team_hall_multi_battle& from);

  inline push_team_hall_multi_battle& operator=(const push_team_hall_multi_battle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push_team_hall_multi_battle(push_team_hall_multi_battle&& from) noexcept
    : push_team_hall_multi_battle() {
    *this = ::std::move(from);
  }

  inline push_team_hall_multi_battle& operator=(push_team_hall_multi_battle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push_team_hall_multi_battle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push_team_hall_multi_battle* internal_default_instance() {
    return reinterpret_cast<const push_team_hall_multi_battle*>(
               &_push_team_hall_multi_battle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(push_team_hall_multi_battle* other);
  friend void swap(push_team_hall_multi_battle& a, push_team_hall_multi_battle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push_team_hall_multi_battle* New() const final {
    return CreateMaybeMessage<push_team_hall_multi_battle>(NULL);
  }

  push_team_hall_multi_battle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push_team_hall_multi_battle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push_team_hall_multi_battle& from);
  void MergeFrom(const push_team_hall_multi_battle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_team_hall_multi_battle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 guids = 1;
  int guids_size() const;
  void clear_guids();
  static const int kGuidsFieldNumber = 1;
  ::google::protobuf::uint64 guids(int index) const;
  void set_guids(int index, ::google::protobuf::uint64 value);
  void add_guids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guids();

  // repeated string code = 6;
  int code_size() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code(int index) const;
  ::std::string* mutable_code(int index);
  void set_code(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_code(int index, ::std::string&& value);
  #endif
  void set_code(int index, const char* value);
  void set_code(int index, const char* value, size_t size);
  ::std::string* add_code();
  void add_code(const ::std::string& value);
  #if LANG_CXX11
  void add_code(::std::string&& value);
  #endif
  void add_code(const char* value);
  void add_code(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& code() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_code();

  // required string udp_ip = 2;
  bool has_udp_ip() const;
  void clear_udp_ip();
  static const int kUdpIpFieldNumber = 2;
  const ::std::string& udp_ip() const;
  void set_udp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_udp_ip(::std::string&& value);
  #endif
  void set_udp_ip(const char* value);
  void set_udp_ip(const char* value, size_t size);
  ::std::string* mutable_udp_ip();
  ::std::string* release_udp_ip();
  void set_allocated_udp_ip(::std::string* udp_ip);

  // required string tcp_ip = 4;
  bool has_tcp_ip() const;
  void clear_tcp_ip();
  static const int kTcpIpFieldNumber = 4;
  const ::std::string& tcp_ip() const;
  void set_tcp_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_ip(::std::string&& value);
  #endif
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  ::std::string* mutable_tcp_ip();
  ::std::string* release_tcp_ip();
  void set_allocated_tcp_ip(::std::string* tcp_ip);

  // required int32 udp_port = 3;
  bool has_udp_port() const;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 3;
  ::google::protobuf::int32 udp_port() const;
  void set_udp_port(::google::protobuf::int32 value);

  // required int32 tcp_port = 5;
  bool has_tcp_port() const;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 5;
  ::google::protobuf::int32 tcp_port() const;
  void set_tcp_port(::google::protobuf::int32 value);

  // required int32 num = 7;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 7;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.game.push_team_hall_multi_battle)
 private:
  void set_has_udp_ip();
  void clear_has_udp_ip();
  void set_has_udp_port();
  void clear_has_udp_port();
  void set_has_tcp_ip();
  void clear_has_tcp_ip();
  void set_has_tcp_port();
  void clear_has_tcp_port();
  void set_has_num();
  void clear_has_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> code_;
  ::google::protobuf::internal::ArenaStringPtr udp_ip_;
  ::google::protobuf::internal::ArenaStringPtr tcp_ip_;
  ::google::protobuf::int32 udp_port_;
  ::google::protobuf::int32 tcp_port_;
  ::google::protobuf::int32 num_;
  friend struct ::protobuf_msg_5fteam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// req_hall_rc_single_battle

// required .protocol.game.msg_battle_player_info player = 1;
inline bool req_hall_rc_single_battle::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req_hall_rc_single_battle::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void req_hall_rc_single_battle::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::game::msg_battle_player_info& req_hall_rc_single_battle::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_battle_player_info& req_hall_rc_single_battle::player() const {
  const ::protocol::game::msg_battle_player_info* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.req_hall_rc_single_battle.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_battle_player_info*>(
      &::protocol::game::_msg_battle_player_info_default_instance_);
}
inline ::protocol::game::msg_battle_player_info* req_hall_rc_single_battle::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.req_hall_rc_single_battle.player)
  clear_has_player();
  ::protocol::game::msg_battle_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_battle_player_info* req_hall_rc_single_battle::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_battle_player_info>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.req_hall_rc_single_battle.player)
  return player_;
}
inline void req_hall_rc_single_battle::set_allocated_player(::protocol::game::msg_battle_player_info* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.req_hall_rc_single_battle.player)
}

// -------------------------------------------------------------------

// rep_hall_rc_single_battle

// required string udp_ip = 1;
inline bool rep_hall_rc_single_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rep_hall_rc_single_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rep_hall_rc_single_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rep_hall_rc_single_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& rep_hall_rc_single_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_single_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void rep_hall_rc_single_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_single_battle.udp_ip)
}
#if LANG_CXX11
inline void rep_hall_rc_single_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_hall_rc_single_battle.udp_ip)
}
#endif
inline void rep_hall_rc_single_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_hall_rc_single_battle.udp_ip)
}
inline void rep_hall_rc_single_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_hall_rc_single_battle.udp_ip)
}
inline ::std::string* rep_hall_rc_single_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_hall_rc_single_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_hall_rc_single_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_hall_rc_single_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_hall_rc_single_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_hall_rc_single_battle.udp_ip)
}

// required int32 udp_port = 2;
inline bool rep_hall_rc_single_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rep_hall_rc_single_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rep_hall_rc_single_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rep_hall_rc_single_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 rep_hall_rc_single_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_single_battle.udp_port)
  return udp_port_;
}
inline void rep_hall_rc_single_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_single_battle.udp_port)
}

// required string tcp_ip = 3;
inline bool rep_hall_rc_single_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rep_hall_rc_single_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rep_hall_rc_single_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rep_hall_rc_single_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& rep_hall_rc_single_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_single_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void rep_hall_rc_single_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_single_battle.tcp_ip)
}
#if LANG_CXX11
inline void rep_hall_rc_single_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_hall_rc_single_battle.tcp_ip)
}
#endif
inline void rep_hall_rc_single_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_hall_rc_single_battle.tcp_ip)
}
inline void rep_hall_rc_single_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_hall_rc_single_battle.tcp_ip)
}
inline ::std::string* rep_hall_rc_single_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_hall_rc_single_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_hall_rc_single_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_hall_rc_single_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_hall_rc_single_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_hall_rc_single_battle.tcp_ip)
}

// required int32 tcp_port = 4;
inline bool rep_hall_rc_single_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rep_hall_rc_single_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rep_hall_rc_single_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rep_hall_rc_single_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 rep_hall_rc_single_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_single_battle.tcp_port)
  return tcp_port_;
}
inline void rep_hall_rc_single_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_single_battle.tcp_port)
}

// required string code = 5;
inline bool rep_hall_rc_single_battle::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rep_hall_rc_single_battle::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rep_hall_rc_single_battle::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rep_hall_rc_single_battle::clear_code() {
  set_changed();
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& rep_hall_rc_single_battle::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_single_battle.code)
  return code_.GetNoArena();
}
inline void rep_hall_rc_single_battle::set_code(const ::std::string& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_single_battle.code)
}
#if LANG_CXX11
inline void rep_hall_rc_single_battle::set_code(::std::string&& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_hall_rc_single_battle.code)
}
#endif
inline void rep_hall_rc_single_battle::set_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_hall_rc_single_battle.code)
}
inline void rep_hall_rc_single_battle::set_code(const char* value, size_t size) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_hall_rc_single_battle.code)
}
inline ::std::string* rep_hall_rc_single_battle::mutable_code() {
  set_changed();
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_hall_rc_single_battle.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_hall_rc_single_battle::release_code() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_hall_rc_single_battle.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_hall_rc_single_battle::set_allocated_code(::std::string* code) {
  set_changed();
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_hall_rc_single_battle.code)
}

// required int32 is_new = 6;
inline bool rep_hall_rc_single_battle::has_is_new() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rep_hall_rc_single_battle::set_has_is_new() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rep_hall_rc_single_battle::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rep_hall_rc_single_battle::clear_is_new() {
  set_changed();
  is_new_ = 0;
  clear_has_is_new();
}
inline ::google::protobuf::int32 rep_hall_rc_single_battle::is_new() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_single_battle.is_new)
  return is_new_;
}
inline void rep_hall_rc_single_battle::set_is_new(::google::protobuf::int32 value) {
  set_changed();
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_single_battle.is_new)
}

// -------------------------------------------------------------------

// smsg_single_battle

// required string udp_ip = 1;
inline bool smsg_single_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_single_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_single_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_single_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& smsg_single_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_single_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void smsg_single_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_single_battle.udp_ip)
}
#if LANG_CXX11
inline void smsg_single_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_single_battle.udp_ip)
}
#endif
inline void smsg_single_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_single_battle.udp_ip)
}
inline void smsg_single_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_single_battle.udp_ip)
}
inline ::std::string* smsg_single_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_single_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_single_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_single_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_single_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_single_battle.udp_ip)
}

// required int32 udp_port = 2;
inline bool smsg_single_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void smsg_single_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void smsg_single_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void smsg_single_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 smsg_single_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_single_battle.udp_port)
  return udp_port_;
}
inline void smsg_single_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_single_battle.udp_port)
}

// required string tcp_ip = 3;
inline bool smsg_single_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_single_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_single_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_single_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& smsg_single_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_single_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void smsg_single_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_single_battle.tcp_ip)
}
#if LANG_CXX11
inline void smsg_single_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_single_battle.tcp_ip)
}
#endif
inline void smsg_single_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_single_battle.tcp_ip)
}
inline void smsg_single_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_single_battle.tcp_ip)
}
inline ::std::string* smsg_single_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_single_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_single_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_single_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_single_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_single_battle.tcp_ip)
}

// required int32 tcp_port = 4;
inline bool smsg_single_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void smsg_single_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void smsg_single_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void smsg_single_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 smsg_single_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_single_battle.tcp_port)
  return tcp_port_;
}
inline void smsg_single_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_single_battle.tcp_port)
}

// required string code = 5;
inline bool smsg_single_battle::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void smsg_single_battle::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void smsg_single_battle::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void smsg_single_battle::clear_code() {
  set_changed();
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& smsg_single_battle::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_single_battle.code)
  return code_.GetNoArena();
}
inline void smsg_single_battle::set_code(const ::std::string& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_single_battle.code)
}
#if LANG_CXX11
inline void smsg_single_battle::set_code(::std::string&& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_single_battle.code)
}
#endif
inline void smsg_single_battle::set_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_single_battle.code)
}
inline void smsg_single_battle::set_code(const char* value, size_t size) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_single_battle.code)
}
inline ::std::string* smsg_single_battle::mutable_code() {
  set_changed();
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_single_battle.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_single_battle::release_code() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_single_battle.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_single_battle::set_allocated_code(::std::string* code) {
  set_changed();
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_single_battle.code)
}

// required int32 is_new = 6;
inline bool smsg_single_battle::has_is_new() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void smsg_single_battle::set_has_is_new() {
  _has_bits_[0] |= 0x00000020u;
}
inline void smsg_single_battle::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void smsg_single_battle::clear_is_new() {
  set_changed();
  is_new_ = 0;
  clear_has_is_new();
}
inline ::google::protobuf::int32 smsg_single_battle::is_new() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_single_battle.is_new)
  return is_new_;
}
inline void smsg_single_battle::set_is_new(::google::protobuf::int32 value) {
  set_changed();
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_single_battle.is_new)
}

// -------------------------------------------------------------------

// req_team_rc_multi_battle

// required int32 team_id = 1;
inline bool req_team_rc_multi_battle::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req_team_rc_multi_battle::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void req_team_rc_multi_battle::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void req_team_rc_multi_battle::clear_team_id() {
  set_changed();
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 req_team_rc_multi_battle::team_id() const {
  // @@protoc_insertion_point(field_get:protocol.game.req_team_rc_multi_battle.team_id)
  return team_id_;
}
inline void req_team_rc_multi_battle::set_team_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.req_team_rc_multi_battle.team_id)
}

// repeated .protocol.game.msg_battle_player_info player = 2;
inline int req_team_rc_multi_battle::player_size() const {
  return player_.size();
}
inline ::protocol::game::msg_battle_player_info* req_team_rc_multi_battle::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.game.req_team_rc_multi_battle.player)
  return player_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_battle_player_info >*
req_team_rc_multi_battle::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:protocol.game.req_team_rc_multi_battle.player)
  return &player_;
}
inline const ::protocol::game::msg_battle_player_info& req_team_rc_multi_battle::player(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.req_team_rc_multi_battle.player)
  return player_.Get(index);
}
inline ::protocol::game::msg_battle_player_info* req_team_rc_multi_battle::add_player() {
  // @@protoc_insertion_point(field_add:protocol.game.req_team_rc_multi_battle.player)
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_battle_player_info >&
req_team_rc_multi_battle::player() const {
  // @@protoc_insertion_point(field_list:protocol.game.req_team_rc_multi_battle.player)
  return player_;
}

// -------------------------------------------------------------------

// rep_team_rc_multi_battle

// required string udp_ip = 1;
inline bool rep_team_rc_multi_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rep_team_rc_multi_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rep_team_rc_multi_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rep_team_rc_multi_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& rep_team_rc_multi_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_team_rc_multi_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void rep_team_rc_multi_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.udp_ip)
}
#if LANG_CXX11
inline void rep_team_rc_multi_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_team_rc_multi_battle.udp_ip)
}
#endif
inline void rep_team_rc_multi_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_team_rc_multi_battle.udp_ip)
}
inline void rep_team_rc_multi_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_team_rc_multi_battle.udp_ip)
}
inline ::std::string* rep_team_rc_multi_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_team_rc_multi_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_team_rc_multi_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_team_rc_multi_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_team_rc_multi_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_team_rc_multi_battle.udp_ip)
}

// required int32 udp_port = 2;
inline bool rep_team_rc_multi_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rep_team_rc_multi_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rep_team_rc_multi_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rep_team_rc_multi_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 rep_team_rc_multi_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_team_rc_multi_battle.udp_port)
  return udp_port_;
}
inline void rep_team_rc_multi_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.udp_port)
}

// required string tcp_ip = 3;
inline bool rep_team_rc_multi_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rep_team_rc_multi_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rep_team_rc_multi_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rep_team_rc_multi_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& rep_team_rc_multi_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_team_rc_multi_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void rep_team_rc_multi_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.tcp_ip)
}
#if LANG_CXX11
inline void rep_team_rc_multi_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_team_rc_multi_battle.tcp_ip)
}
#endif
inline void rep_team_rc_multi_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_team_rc_multi_battle.tcp_ip)
}
inline void rep_team_rc_multi_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_team_rc_multi_battle.tcp_ip)
}
inline ::std::string* rep_team_rc_multi_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_team_rc_multi_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_team_rc_multi_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_team_rc_multi_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_team_rc_multi_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_team_rc_multi_battle.tcp_ip)
}

// required int32 tcp_port = 4;
inline bool rep_team_rc_multi_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rep_team_rc_multi_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rep_team_rc_multi_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rep_team_rc_multi_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 rep_team_rc_multi_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_team_rc_multi_battle.tcp_port)
  return tcp_port_;
}
inline void rep_team_rc_multi_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.tcp_port)
}

// repeated uint64 guid = 5;
inline int rep_team_rc_multi_battle::guid_size() const {
  return guid_.size();
}
inline void rep_team_rc_multi_battle::clear_guid() {
  set_changed();
  guid_.Clear();
}
inline ::google::protobuf::uint64 rep_team_rc_multi_battle::guid(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_team_rc_multi_battle.guid)
  return guid_.Get(index);
}
inline void rep_team_rc_multi_battle::set_guid(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guid_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.guid)
}
inline void rep_team_rc_multi_battle::add_guid(::google::protobuf::uint64 value) {
  set_changed();
  guid_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.rep_team_rc_multi_battle.guid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
rep_team_rc_multi_battle::guid() const {
  // @@protoc_insertion_point(field_list:protocol.game.rep_team_rc_multi_battle.guid)
  return guid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
rep_team_rc_multi_battle::mutable_guid() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.rep_team_rc_multi_battle.guid)
  return &guid_;
}

// repeated string code = 6;
inline int rep_team_rc_multi_battle::code_size() const {
  return code_.size();
}
inline void rep_team_rc_multi_battle::clear_code() {
  set_changed();
  code_.Clear();
}
inline const ::std::string& rep_team_rc_multi_battle::code(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_team_rc_multi_battle.code)
  return code_.Get(index);
}
inline ::std::string* rep_team_rc_multi_battle::mutable_code(int index) {
  set_changed();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_team_rc_multi_battle.code)
  return code_.Mutable(index);
}
inline void rep_team_rc_multi_battle::set_code(int index, const ::std::string& value) {
  set_changed();
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.code)
  code_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void rep_team_rc_multi_battle::set_code(int index, ::std::string&& value) {
  set_changed();
  // @@protoc_insertion_point(field_set:protocol.game.rep_team_rc_multi_battle.code)
  code_.Mutable(index)->assign(std::move(value));
}
#endif
inline void rep_team_rc_multi_battle::set_code(int index, const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  code_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_team_rc_multi_battle.code)
}
inline void rep_team_rc_multi_battle::set_code(int index, const char* value, size_t size) {
  set_changed();
  code_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_team_rc_multi_battle.code)
}
inline ::std::string* rep_team_rc_multi_battle::add_code() {
  set_changed();
  // @@protoc_insertion_point(field_add_mutable:protocol.game.rep_team_rc_multi_battle.code)
  return code_.Add();
}
inline void rep_team_rc_multi_battle::add_code(const ::std::string& value) {
  set_changed();
  code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.game.rep_team_rc_multi_battle.code)
}
#if LANG_CXX11
inline void rep_team_rc_multi_battle::add_code(::std::string&& value) {
  set_changed();
  code_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.game.rep_team_rc_multi_battle.code)
}
#endif
inline void rep_team_rc_multi_battle::add_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.game.rep_team_rc_multi_battle.code)
}
inline void rep_team_rc_multi_battle::add_code(const char* value, size_t size) {
  set_changed();
  code_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.game.rep_team_rc_multi_battle.code)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
rep_team_rc_multi_battle::code() const {
  // @@protoc_insertion_point(field_list:protocol.game.rep_team_rc_multi_battle.code)
  return code_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
rep_team_rc_multi_battle::mutable_code() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.rep_team_rc_multi_battle.code)
  return &code_;
}

// -------------------------------------------------------------------

// smsg_multi_battle

// required string udp_ip = 1;
inline bool smsg_multi_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_multi_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_multi_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_multi_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& smsg_multi_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_multi_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void smsg_multi_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_multi_battle.udp_ip)
}
#if LANG_CXX11
inline void smsg_multi_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_multi_battle.udp_ip)
}
#endif
inline void smsg_multi_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_multi_battle.udp_ip)
}
inline void smsg_multi_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_multi_battle.udp_ip)
}
inline ::std::string* smsg_multi_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_multi_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_multi_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_multi_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_multi_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_multi_battle.udp_ip)
}

// required int32 udp_port = 2;
inline bool smsg_multi_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void smsg_multi_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void smsg_multi_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void smsg_multi_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 smsg_multi_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_multi_battle.udp_port)
  return udp_port_;
}
inline void smsg_multi_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_multi_battle.udp_port)
}

// required string tcp_ip = 3;
inline bool smsg_multi_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_multi_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_multi_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_multi_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& smsg_multi_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_multi_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void smsg_multi_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_multi_battle.tcp_ip)
}
#if LANG_CXX11
inline void smsg_multi_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_multi_battle.tcp_ip)
}
#endif
inline void smsg_multi_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_multi_battle.tcp_ip)
}
inline void smsg_multi_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_multi_battle.tcp_ip)
}
inline ::std::string* smsg_multi_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_multi_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_multi_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_multi_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_multi_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_multi_battle.tcp_ip)
}

// required int32 tcp_port = 4;
inline bool smsg_multi_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void smsg_multi_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void smsg_multi_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void smsg_multi_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 smsg_multi_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_multi_battle.tcp_port)
  return tcp_port_;
}
inline void smsg_multi_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_multi_battle.tcp_port)
}

// required string code = 5;
inline bool smsg_multi_battle::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void smsg_multi_battle::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void smsg_multi_battle::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void smsg_multi_battle::clear_code() {
  set_changed();
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& smsg_multi_battle::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_multi_battle.code)
  return code_.GetNoArena();
}
inline void smsg_multi_battle::set_code(const ::std::string& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_multi_battle.code)
}
#if LANG_CXX11
inline void smsg_multi_battle::set_code(::std::string&& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_multi_battle.code)
}
#endif
inline void smsg_multi_battle::set_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_multi_battle.code)
}
inline void smsg_multi_battle::set_code(const char* value, size_t size) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_multi_battle.code)
}
inline ::std::string* smsg_multi_battle::mutable_code() {
  set_changed();
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_multi_battle.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_multi_battle::release_code() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_multi_battle.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_multi_battle::set_allocated_code(::std::string* code) {
  set_changed();
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_multi_battle.code)
}

// required int32 num = 6;
inline bool smsg_multi_battle::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void smsg_multi_battle::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void smsg_multi_battle::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void smsg_multi_battle::clear_num() {
  set_changed();
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 smsg_multi_battle::num() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_multi_battle.num)
  return num_;
}
inline void smsg_multi_battle::set_num(::google::protobuf::int32 value) {
  set_changed();
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_multi_battle.num)
}

// -------------------------------------------------------------------

// smsg_has_battle

// required string udp_ip = 1;
inline bool smsg_has_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_has_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_has_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_has_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& smsg_has_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_has_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void smsg_has_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_has_battle.udp_ip)
}
#if LANG_CXX11
inline void smsg_has_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_has_battle.udp_ip)
}
#endif
inline void smsg_has_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_has_battle.udp_ip)
}
inline void smsg_has_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_has_battle.udp_ip)
}
inline ::std::string* smsg_has_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_has_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_has_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_has_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_has_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_has_battle.udp_ip)
}

// required int32 udp_port = 2;
inline bool smsg_has_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void smsg_has_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void smsg_has_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void smsg_has_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 smsg_has_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_has_battle.udp_port)
  return udp_port_;
}
inline void smsg_has_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_has_battle.udp_port)
}

// required string tcp_ip = 3;
inline bool smsg_has_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_has_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_has_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_has_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& smsg_has_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_has_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void smsg_has_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_has_battle.tcp_ip)
}
#if LANG_CXX11
inline void smsg_has_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_has_battle.tcp_ip)
}
#endif
inline void smsg_has_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_has_battle.tcp_ip)
}
inline void smsg_has_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_has_battle.tcp_ip)
}
inline ::std::string* smsg_has_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_has_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_has_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_has_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_has_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_has_battle.tcp_ip)
}

// required int32 tcp_port = 4;
inline bool smsg_has_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void smsg_has_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void smsg_has_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void smsg_has_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 smsg_has_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_has_battle.tcp_port)
  return tcp_port_;
}
inline void smsg_has_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_has_battle.tcp_port)
}

// required string code = 5;
inline bool smsg_has_battle::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void smsg_has_battle::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void smsg_has_battle::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void smsg_has_battle::clear_code() {
  set_changed();
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& smsg_has_battle::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_has_battle.code)
  return code_.GetNoArena();
}
inline void smsg_has_battle::set_code(const ::std::string& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_has_battle.code)
}
#if LANG_CXX11
inline void smsg_has_battle::set_code(::std::string&& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_has_battle.code)
}
#endif
inline void smsg_has_battle::set_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_has_battle.code)
}
inline void smsg_has_battle::set_code(const char* value, size_t size) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_has_battle.code)
}
inline ::std::string* smsg_has_battle::mutable_code() {
  set_changed();
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_has_battle.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_has_battle::release_code() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_has_battle.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_has_battle::set_allocated_code(::std::string* code) {
  set_changed();
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_has_battle.code)
}

// -------------------------------------------------------------------

// req_hall_rc_has_battle

// required uint64 guid = 1;
inline bool req_hall_rc_has_battle::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req_hall_rc_has_battle::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void req_hall_rc_has_battle::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void req_hall_rc_has_battle::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 req_hall_rc_has_battle::guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.req_hall_rc_has_battle.guid)
  return guid_;
}
inline void req_hall_rc_has_battle::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.req_hall_rc_has_battle.guid)
}

// -------------------------------------------------------------------

// rep_hall_rc_has_battle

// required int32 is_new = 1;
inline bool rep_hall_rc_has_battle::has_is_new() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rep_hall_rc_has_battle::set_has_is_new() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rep_hall_rc_has_battle::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rep_hall_rc_has_battle::clear_is_new() {
  set_changed();
  is_new_ = 0;
  clear_has_is_new();
}
inline ::google::protobuf::int32 rep_hall_rc_has_battle::is_new() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_has_battle.is_new)
  return is_new_;
}
inline void rep_hall_rc_has_battle::set_is_new(::google::protobuf::int32 value) {
  set_changed();
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_has_battle.is_new)
}

// required string udp_ip = 2;
inline bool rep_hall_rc_has_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rep_hall_rc_has_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rep_hall_rc_has_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rep_hall_rc_has_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& rep_hall_rc_has_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_has_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void rep_hall_rc_has_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_has_battle.udp_ip)
}
#if LANG_CXX11
inline void rep_hall_rc_has_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_hall_rc_has_battle.udp_ip)
}
#endif
inline void rep_hall_rc_has_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_hall_rc_has_battle.udp_ip)
}
inline void rep_hall_rc_has_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_hall_rc_has_battle.udp_ip)
}
inline ::std::string* rep_hall_rc_has_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_hall_rc_has_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_hall_rc_has_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_hall_rc_has_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_hall_rc_has_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_hall_rc_has_battle.udp_ip)
}

// required int32 udp_port = 3;
inline bool rep_hall_rc_has_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rep_hall_rc_has_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rep_hall_rc_has_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rep_hall_rc_has_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 rep_hall_rc_has_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_has_battle.udp_port)
  return udp_port_;
}
inline void rep_hall_rc_has_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_has_battle.udp_port)
}

// required string tcp_ip = 4;
inline bool rep_hall_rc_has_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rep_hall_rc_has_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rep_hall_rc_has_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rep_hall_rc_has_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& rep_hall_rc_has_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_has_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void rep_hall_rc_has_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_has_battle.tcp_ip)
}
#if LANG_CXX11
inline void rep_hall_rc_has_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_hall_rc_has_battle.tcp_ip)
}
#endif
inline void rep_hall_rc_has_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_hall_rc_has_battle.tcp_ip)
}
inline void rep_hall_rc_has_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_hall_rc_has_battle.tcp_ip)
}
inline ::std::string* rep_hall_rc_has_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_hall_rc_has_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_hall_rc_has_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_hall_rc_has_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_hall_rc_has_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_hall_rc_has_battle.tcp_ip)
}

// required int32 tcp_port = 5;
inline bool rep_hall_rc_has_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rep_hall_rc_has_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rep_hall_rc_has_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rep_hall_rc_has_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 rep_hall_rc_has_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_has_battle.tcp_port)
  return tcp_port_;
}
inline void rep_hall_rc_has_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_has_battle.tcp_port)
}

// required string code = 6;
inline bool rep_hall_rc_has_battle::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rep_hall_rc_has_battle::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rep_hall_rc_has_battle::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rep_hall_rc_has_battle::clear_code() {
  set_changed();
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& rep_hall_rc_has_battle::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.rep_hall_rc_has_battle.code)
  return code_.GetNoArena();
}
inline void rep_hall_rc_has_battle::set_code(const ::std::string& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.rep_hall_rc_has_battle.code)
}
#if LANG_CXX11
inline void rep_hall_rc_has_battle::set_code(::std::string&& value) {
  set_changed();
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.rep_hall_rc_has_battle.code)
}
#endif
inline void rep_hall_rc_has_battle::set_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.rep_hall_rc_has_battle.code)
}
inline void rep_hall_rc_has_battle::set_code(const char* value, size_t size) {
  set_changed();
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.rep_hall_rc_has_battle.code)
}
inline ::std::string* rep_hall_rc_has_battle::mutable_code() {
  set_changed();
  set_has_code();
  // @@protoc_insertion_point(field_mutable:protocol.game.rep_hall_rc_has_battle.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rep_hall_rc_has_battle::release_code() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.rep_hall_rc_has_battle.code)
  if (!has_code()) {
    return NULL;
  }
  clear_has_code();
  return code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rep_hall_rc_has_battle::set_allocated_code(::std::string* code) {
  set_changed();
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.rep_hall_rc_has_battle.code)
}

// -------------------------------------------------------------------

// msg_team_player

// required uint64 guid = 1;
inline bool msg_team_player::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_team_player::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_team_player::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_team_player::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 msg_team_player::guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.guid)
  return guid_;
}
inline void msg_team_player::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.guid)
}

// required string name = 2;
inline bool msg_team_player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_team_player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_team_player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_team_player::clear_name() {
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& msg_team_player::name() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.name)
  return name_.GetNoArena();
}
inline void msg_team_player::set_name(const ::std::string& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.name)
}
#if LANG_CXX11
inline void msg_team_player::set_name(::std::string&& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.msg_team_player.name)
}
#endif
inline void msg_team_player::set_name(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.msg_team_player.name)
}
inline void msg_team_player::set_name(const char* value, size_t size) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.msg_team_player.name)
}
inline ::std::string* msg_team_player::mutable_name() {
  set_changed();
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.game.msg_team_player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg_team_player::release_name() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.msg_team_player.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg_team_player::set_allocated_name(::std::string* name) {
  set_changed();
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.msg_team_player.name)
}

// required int32 sex = 3;
inline bool msg_team_player::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_team_player::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_team_player::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_team_player::clear_sex() {
  set_changed();
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 msg_team_player::sex() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.sex)
  return sex_;
}
inline void msg_team_player::set_sex(::google::protobuf::int32 value) {
  set_changed();
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.sex)
}

// required int32 avatar = 4;
inline bool msg_team_player::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_team_player::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_team_player::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_team_player::clear_avatar() {
  set_changed();
  avatar_ = 0;
  clear_has_avatar();
}
inline ::google::protobuf::int32 msg_team_player::avatar() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.avatar)
  return avatar_;
}
inline void msg_team_player::set_avatar(::google::protobuf::int32 value) {
  set_changed();
  set_has_avatar();
  avatar_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.avatar)
}

// required int32 toukuang = 6;
inline bool msg_team_player::has_toukuang() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_team_player::set_has_toukuang() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_team_player::clear_has_toukuang() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_team_player::clear_toukuang() {
  set_changed();
  toukuang_ = 0;
  clear_has_toukuang();
}
inline ::google::protobuf::int32 msg_team_player::toukuang() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.toukuang)
  return toukuang_;
}
inline void msg_team_player::set_toukuang(::google::protobuf::int32 value) {
  set_changed();
  set_has_toukuang();
  toukuang_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.toukuang)
}

// required int32 cup = 7;
inline bool msg_team_player::has_cup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_team_player::set_has_cup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_team_player::clear_has_cup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_team_player::clear_cup() {
  set_changed();
  cup_ = 0;
  clear_has_cup();
}
inline ::google::protobuf::int32 msg_team_player::cup() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.cup)
  return cup_;
}
inline void msg_team_player::set_cup(::google::protobuf::int32 value) {
  set_changed();
  set_has_cup();
  cup_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.cup)
}

// required int32 name_color = 8;
inline bool msg_team_player::has_name_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_team_player::set_has_name_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_team_player::clear_has_name_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_team_player::clear_name_color() {
  set_changed();
  name_color_ = 0;
  clear_has_name_color();
}
inline ::google::protobuf::int32 msg_team_player::name_color() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_player.name_color)
  return name_color_;
}
inline void msg_team_player::set_name_color(::google::protobuf::int32 value) {
  set_changed();
  set_has_name_color();
  name_color_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_player.name_color)
}

// -------------------------------------------------------------------

// msg_team_member

// required int32 member_type = 1;
inline bool msg_team_member::has_member_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_team_member::set_has_member_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_team_member::clear_has_member_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_team_member::clear_member_type() {
  set_changed();
  member_type_ = 0;
  clear_has_member_type();
}
inline ::google::protobuf::int32 msg_team_member::member_type() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_member.member_type)
  return member_type_;
}
inline void msg_team_member::set_member_type(::google::protobuf::int32 value) {
  set_changed();
  set_has_member_type();
  member_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team_member.member_type)
}

// required .protocol.game.msg_battle_player_info player = 2;
inline bool msg_team_member::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_team_member::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_team_member::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::game::msg_battle_player_info& msg_team_member::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_battle_player_info& msg_team_member::player() const {
  const ::protocol::game::msg_battle_player_info* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.msg_team_member.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_battle_player_info*>(
      &::protocol::game::_msg_battle_player_info_default_instance_);
}
inline ::protocol::game::msg_battle_player_info* msg_team_member::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.msg_team_member.player)
  clear_has_player();
  ::protocol::game::msg_battle_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_battle_player_info* msg_team_member::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_battle_player_info>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.msg_team_member.player)
  return player_;
}
inline void msg_team_member::set_allocated_player(::protocol::game::msg_battle_player_info* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.msg_team_member.player)
}

// -------------------------------------------------------------------

// msg_team

// required int32 team_id = 1;
inline bool msg_team::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_team::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_team::clear_team_id() {
  set_changed();
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 msg_team::team_id() const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team.team_id)
  return team_id_;
}
inline void msg_team::set_team_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.msg_team.team_id)
}

// repeated .protocol.game.msg_team_member member = 2;
inline int msg_team::member_size() const {
  return member_.size();
}
inline void msg_team::clear_member() {
  member_.Clear();
}
inline ::protocol::game::msg_team_member* msg_team::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.game.msg_team.member)
  return member_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_member >*
msg_team::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:protocol.game.msg_team.member)
  return &member_;
}
inline const ::protocol::game::msg_team_member& msg_team::member(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.msg_team.member)
  return member_.Get(index);
}
inline ::protocol::game::msg_team_member* msg_team::add_member() {
  // @@protoc_insertion_point(field_add:protocol.game.msg_team.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_member >&
msg_team::member() const {
  // @@protoc_insertion_point(field_list:protocol.game.msg_team.member)
  return member_;
}

// -------------------------------------------------------------------

// push_team_hall_error

// required uint64 player_guid = 1;
inline bool push_team_hall_error::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_error::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_error::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_error::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_team_hall_error::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_error.player_guid)
  return player_guid_;
}
inline void push_team_hall_error::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_error.player_guid)
}

// required int32 code = 2;
inline bool push_team_hall_error::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void push_team_hall_error::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void push_team_hall_error::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void push_team_hall_error::clear_code() {
  set_changed();
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 push_team_hall_error::code() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_error.code)
  return code_;
}
inline void push_team_hall_error::set_code(::google::protobuf::int32 value) {
  set_changed();
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_error.code)
}

// optional string text = 3;
inline bool push_team_hall_error::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_error::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_error::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_error::clear_text() {
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& push_team_hall_error::text() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_error.text)
  return text_.GetNoArena();
}
inline void push_team_hall_error::set_text(const ::std::string& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_error.text)
}
#if LANG_CXX11
inline void push_team_hall_error::set_text(::std::string&& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_team_hall_error.text)
}
#endif
inline void push_team_hall_error::set_text(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_team_hall_error.text)
}
inline void push_team_hall_error::set_text(const char* value, size_t size) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_team_hall_error.text)
}
inline ::std::string* push_team_hall_error::mutable_text() {
  set_changed();
  set_has_text();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_error.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_team_hall_error::release_text() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_error.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_team_hall_error::set_allocated_text(::std::string* text) {
  set_changed();
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_error.text)
}

// -------------------------------------------------------------------

// push_hall_team_create

// required .protocol.game.msg_battle_player_info player = 1;
inline bool push_hall_team_create::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_create::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_create::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::game::msg_battle_player_info& push_hall_team_create::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_battle_player_info& push_hall_team_create::player() const {
  const ::protocol::game::msg_battle_player_info* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_create.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_battle_player_info*>(
      &::protocol::game::_msg_battle_player_info_default_instance_);
}
inline ::protocol::game::msg_battle_player_info* push_hall_team_create::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.push_hall_team_create.player)
  clear_has_player();
  ::protocol::game::msg_battle_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_battle_player_info* push_hall_team_create::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_battle_player_info>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_hall_team_create.player)
  return player_;
}
inline void push_hall_team_create::set_allocated_player(::protocol::game::msg_battle_player_info* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_hall_team_create.player)
}

// -------------------------------------------------------------------

// push_team_hall_create

// required uint64 player_guid = 1;
inline bool push_team_hall_create::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_create::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_create::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_create::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_team_hall_create::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_create.player_guid)
  return player_guid_;
}
inline void push_team_hall_create::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_create.player_guid)
}

// required .protocol.game.msg_team team = 2;
inline bool push_team_hall_create::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_create::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_create::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_create::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::protocol::game::msg_team& push_team_hall_create::_internal_team() const {
  return *team_;
}
inline const ::protocol::game::msg_team& push_team_hall_create::team() const {
  const ::protocol::game::msg_team* p = team_;
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_create.team)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team*>(
      &::protocol::game::_msg_team_default_instance_);
}
inline ::protocol::game::msg_team* push_team_hall_create::release_team() {
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_create.team)
  clear_has_team();
  ::protocol::game::msg_team* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team* push_team_hall_create::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_create.team)
  return team_;
}
inline void push_team_hall_create::set_allocated_team(::protocol::game::msg_team* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_create.team)
}

// -------------------------------------------------------------------

// smsg_team_create

// required .protocol.game.msg_team team = 1;
inline bool smsg_team_create::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_create::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_create::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_create::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::protocol::game::msg_team& smsg_team_create::_internal_team() const {
  return *team_;
}
inline const ::protocol::game::msg_team& smsg_team_create::team() const {
  const ::protocol::game::msg_team* p = team_;
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_create.team)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team*>(
      &::protocol::game::_msg_team_default_instance_);
}
inline ::protocol::game::msg_team* smsg_team_create::release_team() {
  // @@protoc_insertion_point(field_release:protocol.game.smsg_team_create.team)
  clear_has_team();
  ::protocol::game::msg_team* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team* smsg_team_create::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_team_create.team)
  return team_;
}
inline void smsg_team_create::set_allocated_team(::protocol::game::msg_team* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_team_create.team)
}

// -------------------------------------------------------------------

// smsg_team_tuijian

// repeated .protocol.game.msg_team_player players = 1;
inline int smsg_team_tuijian::players_size() const {
  return players_.size();
}
inline void smsg_team_tuijian::clear_players() {
  players_.Clear();
}
inline ::protocol::game::msg_team_player* smsg_team_tuijian::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_team_tuijian.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_player >*
smsg_team_tuijian::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:protocol.game.smsg_team_tuijian.players)
  return &players_;
}
inline const ::protocol::game::msg_team_player& smsg_team_tuijian::players(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_tuijian.players)
  return players_.Get(index);
}
inline ::protocol::game::msg_team_player* smsg_team_tuijian::add_players() {
  // @@protoc_insertion_point(field_add:protocol.game.smsg_team_tuijian.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::game::msg_team_player >&
smsg_team_tuijian::players() const {
  // @@protoc_insertion_point(field_list:protocol.game.smsg_team_tuijian.players)
  return players_;
}

// -------------------------------------------------------------------

// cmsg_team_join

// required uint64 player_guid = 1;
inline bool cmsg_team_join::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmsg_team_join::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmsg_team_join::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmsg_team_join::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 cmsg_team_join::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.cmsg_team_join.player_guid)
  return player_guid_;
}
inline void cmsg_team_join::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.cmsg_team_join.player_guid)
}

// -------------------------------------------------------------------

// push_hall_team_join

// required uint64 player_guid = 1;
inline bool push_hall_team_join::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_hall_team_join::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_hall_team_join::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_hall_team_join::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_hall_team_join::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_join.player_guid)
  return player_guid_;
}
inline void push_hall_team_join::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_join.player_guid)
}

// required .protocol.game.msg_battle_player_info player = 2;
inline bool push_hall_team_join::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_join::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_join::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::game::msg_battle_player_info& push_hall_team_join::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_battle_player_info& push_hall_team_join::player() const {
  const ::protocol::game::msg_battle_player_info* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_join.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_battle_player_info*>(
      &::protocol::game::_msg_battle_player_info_default_instance_);
}
inline ::protocol::game::msg_battle_player_info* push_hall_team_join::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.push_hall_team_join.player)
  clear_has_player();
  ::protocol::game::msg_battle_player_info* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_battle_player_info* push_hall_team_join::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_battle_player_info>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_hall_team_join.player)
  return player_;
}
inline void push_hall_team_join::set_allocated_player(::protocol::game::msg_battle_player_info* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_);
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_hall_team_join.player)
}

// -------------------------------------------------------------------

// push_team_hall_join

// required uint64 player_guid = 1;
inline bool push_team_hall_join::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_join::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_join::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_join::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_team_hall_join::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_join.player_guid)
  return player_guid_;
}
inline void push_team_hall_join::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_join.player_guid)
}

// required .protocol.game.msg_team team = 2;
inline bool push_team_hall_join::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_join::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_join::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_join::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::protocol::game::msg_team& push_team_hall_join::_internal_team() const {
  return *team_;
}
inline const ::protocol::game::msg_team& push_team_hall_join::team() const {
  const ::protocol::game::msg_team* p = team_;
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_join.team)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team*>(
      &::protocol::game::_msg_team_default_instance_);
}
inline ::protocol::game::msg_team* push_team_hall_join::release_team() {
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_join.team)
  clear_has_team();
  ::protocol::game::msg_team* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team* push_team_hall_join::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_join.team)
  return team_;
}
inline void push_team_hall_join::set_allocated_team(::protocol::game::msg_team* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_join.team)
}

// -------------------------------------------------------------------

// smsg_team_join

// required .protocol.game.msg_team team = 1;
inline bool smsg_team_join::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_join::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_join::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_join::clear_team() {
  if (team_ != NULL) team_->Clear();
  clear_has_team();
}
inline const ::protocol::game::msg_team& smsg_team_join::_internal_team() const {
  return *team_;
}
inline const ::protocol::game::msg_team& smsg_team_join::team() const {
  const ::protocol::game::msg_team* p = team_;
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_join.team)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team*>(
      &::protocol::game::_msg_team_default_instance_);
}
inline ::protocol::game::msg_team* smsg_team_join::release_team() {
  // @@protoc_insertion_point(field_release:protocol.game.smsg_team_join.team)
  clear_has_team();
  ::protocol::game::msg_team* temp = team_;
  team_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team* smsg_team_join::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team>(GetArenaNoVirtual());
    team_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_team_join.team)
  return team_;
}
inline void smsg_team_join::set_allocated_team(::protocol::game::msg_team* team) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete team_;
  }
  if (team) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    set_has_team();
  } else {
    clear_has_team();
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_team_join.team)
}

// -------------------------------------------------------------------

// push_team_hall_other_join

// repeated uint64 guids = 1;
inline int push_team_hall_other_join::guids_size() const {
  return guids_.size();
}
inline void push_team_hall_other_join::clear_guids() {
  set_changed();
  guids_.Clear();
}
inline ::google::protobuf::uint64 push_team_hall_other_join::guids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_other_join.guids)
  return guids_.Get(index);
}
inline void push_team_hall_other_join::set_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_other_join.guids)
}
inline void push_team_hall_other_join::add_guids(::google::protobuf::uint64 value) {
  set_changed();
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_other_join.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
push_team_hall_other_join::guids() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_team_hall_other_join.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
push_team_hall_other_join::mutable_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_team_hall_other_join.guids)
  return &guids_;
}

// required .protocol.game.msg_team_member member = 2;
inline bool push_team_hall_other_join::has_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_other_join::set_has_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_other_join::clear_has_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_other_join::clear_member() {
  if (member_ != NULL) member_->Clear();
  clear_has_member();
}
inline const ::protocol::game::msg_team_member& push_team_hall_other_join::_internal_member() const {
  return *member_;
}
inline const ::protocol::game::msg_team_member& push_team_hall_other_join::member() const {
  const ::protocol::game::msg_team_member* p = member_;
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_other_join.member)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team_member*>(
      &::protocol::game::_msg_team_member_default_instance_);
}
inline ::protocol::game::msg_team_member* push_team_hall_other_join::release_member() {
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_other_join.member)
  clear_has_member();
  ::protocol::game::msg_team_member* temp = member_;
  member_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team_member* push_team_hall_other_join::mutable_member() {
  set_has_member();
  if (member_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team_member>(GetArenaNoVirtual());
    member_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_other_join.member)
  return member_;
}
inline void push_team_hall_other_join::set_allocated_member(::protocol::game::msg_team_member* member) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete member_;
  }
  if (member) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    set_has_member();
  } else {
    clear_has_member();
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_other_join.member)
}

// -------------------------------------------------------------------

// smsg_team_other_join

// required .protocol.game.msg_team_member member = 1;
inline bool smsg_team_other_join::has_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_other_join::set_has_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_other_join::clear_has_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_other_join::clear_member() {
  if (member_ != NULL) member_->Clear();
  clear_has_member();
}
inline const ::protocol::game::msg_team_member& smsg_team_other_join::_internal_member() const {
  return *member_;
}
inline const ::protocol::game::msg_team_member& smsg_team_other_join::member() const {
  const ::protocol::game::msg_team_member* p = member_;
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_other_join.member)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team_member*>(
      &::protocol::game::_msg_team_member_default_instance_);
}
inline ::protocol::game::msg_team_member* smsg_team_other_join::release_member() {
  // @@protoc_insertion_point(field_release:protocol.game.smsg_team_other_join.member)
  clear_has_member();
  ::protocol::game::msg_team_member* temp = member_;
  member_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team_member* smsg_team_other_join::mutable_member() {
  set_has_member();
  if (member_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team_member>(GetArenaNoVirtual());
    member_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_team_other_join.member)
  return member_;
}
inline void smsg_team_other_join::set_allocated_member(::protocol::game::msg_team_member* member) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete member_;
  }
  if (member) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    set_has_member();
  } else {
    clear_has_member();
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_team_other_join.member)
}

// -------------------------------------------------------------------

// push_hall_team_exit

// required uint64 player_guid = 1;
inline bool push_hall_team_exit::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_exit::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_exit::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_hall_team_exit::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_hall_team_exit::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_exit.player_guid)
  return player_guid_;
}
inline void push_hall_team_exit::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_exit.player_guid)
}

// required int32 mauto = 2;
inline bool push_hall_team_exit::has_mauto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_hall_team_exit::set_has_mauto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_hall_team_exit::clear_has_mauto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_hall_team_exit::clear_mauto() {
  set_changed();
  mauto_ = 0;
  clear_has_mauto();
}
inline ::google::protobuf::int32 push_hall_team_exit::mauto() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_exit.mauto)
  return mauto_;
}
inline void push_hall_team_exit::set_mauto(::google::protobuf::int32 value) {
  set_changed();
  set_has_mauto();
  mauto_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_exit.mauto)
}

// -------------------------------------------------------------------

// push_team_hall_exit

// repeated uint64 guids = 1;
inline int push_team_hall_exit::guids_size() const {
  return guids_.size();
}
inline void push_team_hall_exit::clear_guids() {
  set_changed();
  guids_.Clear();
}
inline ::google::protobuf::uint64 push_team_hall_exit::guids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_exit.guids)
  return guids_.Get(index);
}
inline void push_team_hall_exit::set_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_exit.guids)
}
inline void push_team_hall_exit::add_guids(::google::protobuf::uint64 value) {
  set_changed();
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_exit.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
push_team_hall_exit::guids() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_team_hall_exit.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
push_team_hall_exit::mutable_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_team_hall_exit.guids)
  return &guids_;
}

// required uint64 leader_guid = 2;
inline bool push_team_hall_exit::has_leader_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_exit::set_has_leader_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_exit::clear_has_leader_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_exit::clear_leader_guid() {
  set_changed();
  leader_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_guid();
}
inline ::google::protobuf::uint64 push_team_hall_exit::leader_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_exit.leader_guid)
  return leader_guid_;
}
inline void push_team_hall_exit::set_leader_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_leader_guid();
  leader_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_exit.leader_guid)
}

// required uint64 player_guid = 3;
inline bool push_team_hall_exit::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_exit::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_exit::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_exit::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_team_hall_exit::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_exit.player_guid)
  return player_guid_;
}
inline void push_team_hall_exit::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_exit.player_guid)
}

// -------------------------------------------------------------------

// smsg_team_exit

// required uint64 leader_guid = 1;
inline bool smsg_team_exit::has_leader_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_exit::set_has_leader_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_exit::clear_has_leader_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_exit::clear_leader_guid() {
  set_changed();
  leader_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_guid();
}
inline ::google::protobuf::uint64 smsg_team_exit::leader_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_exit.leader_guid)
  return leader_guid_;
}
inline void smsg_team_exit::set_leader_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_leader_guid();
  leader_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_team_exit.leader_guid)
}

// required uint64 player_guid = 2;
inline bool smsg_team_exit::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_team_exit::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_team_exit::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_team_exit::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 smsg_team_exit::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_exit.player_guid)
  return player_guid_;
}
inline void smsg_team_exit::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_team_exit.player_guid)
}

// -------------------------------------------------------------------

// cmsg_team_kick

// required uint64 target_guid = 1;
inline bool cmsg_team_kick::has_target_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmsg_team_kick::set_has_target_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmsg_team_kick::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmsg_team_kick::clear_target_guid() {
  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 cmsg_team_kick::target_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.cmsg_team_kick.target_guid)
  return target_guid_;
}
inline void cmsg_team_kick::set_target_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_target_guid();
  target_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.cmsg_team_kick.target_guid)
}

// -------------------------------------------------------------------

// push_hall_team_kick

// required uint64 player_guid = 1;
inline bool push_hall_team_kick::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_kick::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_kick::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_hall_team_kick::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_hall_team_kick::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_kick.player_guid)
  return player_guid_;
}
inline void push_hall_team_kick::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_kick.player_guid)
}

// required uint64 target_guid = 2;
inline bool push_hall_team_kick::has_target_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_hall_team_kick::set_has_target_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_hall_team_kick::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_hall_team_kick::clear_target_guid() {
  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 push_hall_team_kick::target_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_kick.target_guid)
  return target_guid_;
}
inline void push_hall_team_kick::set_target_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_target_guid();
  target_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_kick.target_guid)
}

// -------------------------------------------------------------------

// push_team_hall_kick

// repeated uint64 guids = 1;
inline int push_team_hall_kick::guids_size() const {
  return guids_.size();
}
inline void push_team_hall_kick::clear_guids() {
  set_changed();
  guids_.Clear();
}
inline ::google::protobuf::uint64 push_team_hall_kick::guids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_kick.guids)
  return guids_.Get(index);
}
inline void push_team_hall_kick::set_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_kick.guids)
}
inline void push_team_hall_kick::add_guids(::google::protobuf::uint64 value) {
  set_changed();
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_kick.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
push_team_hall_kick::guids() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_team_hall_kick.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
push_team_hall_kick::mutable_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_team_hall_kick.guids)
  return &guids_;
}

// required uint64 player_guid = 2;
inline bool push_team_hall_kick::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_kick::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_kick::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_kick::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_team_hall_kick::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_kick.player_guid)
  return player_guid_;
}
inline void push_team_hall_kick::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_kick.player_guid)
}

// -------------------------------------------------------------------

// smsg_team_kick

// required uint64 player_guid = 1;
inline bool smsg_team_kick::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_kick::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_kick::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_kick::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 smsg_team_kick::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_kick.player_guid)
  return player_guid_;
}
inline void smsg_team_kick::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_team_kick.player_guid)
}

// -------------------------------------------------------------------

// cmsg_team_invert

// required uint64 target_guid = 1;
inline bool cmsg_team_invert::has_target_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmsg_team_invert::set_has_target_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmsg_team_invert::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmsg_team_invert::clear_target_guid() {
  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 cmsg_team_invert::target_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.cmsg_team_invert.target_guid)
  return target_guid_;
}
inline void cmsg_team_invert::set_target_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_target_guid();
  target_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.cmsg_team_invert.target_guid)
}

// -------------------------------------------------------------------

// push_hall_team_invert

// required uint64 player_guid = 1;
inline bool push_hall_team_invert::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_invert::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_invert::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_hall_team_invert::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_hall_team_invert::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_invert.player_guid)
  return player_guid_;
}
inline void push_hall_team_invert::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_invert.player_guid)
}

// required uint64 target_guid = 2;
inline bool push_hall_team_invert::has_target_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_hall_team_invert::set_has_target_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_hall_team_invert::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_hall_team_invert::clear_target_guid() {
  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 push_hall_team_invert::target_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_invert.target_guid)
  return target_guid_;
}
inline void push_hall_team_invert::set_target_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_target_guid();
  target_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_invert.target_guid)
}

// -------------------------------------------------------------------

// push_team_hall_invert

// required uint64 target_guid = 1;
inline bool push_team_hall_invert::has_target_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_invert::set_has_target_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_invert::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_invert::clear_target_guid() {
  set_changed();
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
}
inline ::google::protobuf::uint64 push_team_hall_invert::target_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_invert.target_guid)
  return target_guid_;
}
inline void push_team_hall_invert::set_target_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_target_guid();
  target_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_invert.target_guid)
}

// required .protocol.game.msg_team_player player = 2;
inline bool push_team_hall_invert::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_invert::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_invert::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_invert::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
inline const ::protocol::game::msg_team_player& push_team_hall_invert::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_team_player& push_team_hall_invert::player() const {
  const ::protocol::game::msg_team_player* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_invert.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team_player*>(
      &::protocol::game::_msg_team_player_default_instance_);
}
inline ::protocol::game::msg_team_player* push_team_hall_invert::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_invert.player)
  clear_has_player();
  ::protocol::game::msg_team_player* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team_player* push_team_hall_invert::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team_player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_invert.player)
  return player_;
}
inline void push_team_hall_invert::set_allocated_player(::protocol::game::msg_team_player* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_;
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_invert.player)
}

// -------------------------------------------------------------------

// smsg_team_invert

// required .protocol.game.msg_team_player player = 1;
inline bool smsg_team_invert::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_invert::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_invert::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_invert::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
inline const ::protocol::game::msg_team_player& smsg_team_invert::_internal_player() const {
  return *player_;
}
inline const ::protocol::game::msg_team_player& smsg_team_invert::player() const {
  const ::protocol::game::msg_team_player* p = player_;
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_invert.player)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::game::msg_team_player*>(
      &::protocol::game::_msg_team_player_default_instance_);
}
inline ::protocol::game::msg_team_player* smsg_team_invert::release_player() {
  // @@protoc_insertion_point(field_release:protocol.game.smsg_team_invert.player)
  clear_has_player();
  ::protocol::game::msg_team_player* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::protocol::game::msg_team_player* smsg_team_invert::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::game::msg_team_player>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_team_invert.player)
  return player_;
}
inline void smsg_team_invert::set_allocated_player(::protocol::game::msg_team_player* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_;
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_team_invert.player)
}

// -------------------------------------------------------------------

// cmsg_team_chat

// required string text = 1;
inline bool cmsg_team_chat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cmsg_team_chat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cmsg_team_chat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cmsg_team_chat::clear_text() {
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& cmsg_team_chat::text() const {
  // @@protoc_insertion_point(field_get:protocol.game.cmsg_team_chat.text)
  return text_.GetNoArena();
}
inline void cmsg_team_chat::set_text(const ::std::string& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.cmsg_team_chat.text)
}
#if LANG_CXX11
inline void cmsg_team_chat::set_text(::std::string&& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.cmsg_team_chat.text)
}
#endif
inline void cmsg_team_chat::set_text(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.cmsg_team_chat.text)
}
inline void cmsg_team_chat::set_text(const char* value, size_t size) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.cmsg_team_chat.text)
}
inline ::std::string* cmsg_team_chat::mutable_text() {
  set_changed();
  set_has_text();
  // @@protoc_insertion_point(field_mutable:protocol.game.cmsg_team_chat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* cmsg_team_chat::release_text() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.cmsg_team_chat.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void cmsg_team_chat::set_allocated_text(::std::string* text) {
  set_changed();
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.cmsg_team_chat.text)
}

// -------------------------------------------------------------------

// push_hall_team_chat

// required uint64 player_guid = 1;
inline bool push_hall_team_chat::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_hall_team_chat::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_hall_team_chat::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_hall_team_chat::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_hall_team_chat::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_chat.player_guid)
  return player_guid_;
}
inline void push_hall_team_chat::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_chat.player_guid)
}

// required string text = 2;
inline bool push_hall_team_chat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_chat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_chat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_hall_team_chat::clear_text() {
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& push_hall_team_chat::text() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_chat.text)
  return text_.GetNoArena();
}
inline void push_hall_team_chat::set_text(const ::std::string& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_chat.text)
}
#if LANG_CXX11
inline void push_hall_team_chat::set_text(::std::string&& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_hall_team_chat.text)
}
#endif
inline void push_hall_team_chat::set_text(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_hall_team_chat.text)
}
inline void push_hall_team_chat::set_text(const char* value, size_t size) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_hall_team_chat.text)
}
inline ::std::string* push_hall_team_chat::mutable_text() {
  set_changed();
  set_has_text();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_hall_team_chat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_hall_team_chat::release_text() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_hall_team_chat.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_hall_team_chat::set_allocated_text(::std::string* text) {
  set_changed();
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_hall_team_chat.text)
}

// -------------------------------------------------------------------

// push_team_hall_chat

// repeated uint64 guids = 1;
inline int push_team_hall_chat::guids_size() const {
  return guids_.size();
}
inline void push_team_hall_chat::clear_guids() {
  set_changed();
  guids_.Clear();
}
inline ::google::protobuf::uint64 push_team_hall_chat::guids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_chat.guids)
  return guids_.Get(index);
}
inline void push_team_hall_chat::set_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_chat.guids)
}
inline void push_team_hall_chat::add_guids(::google::protobuf::uint64 value) {
  set_changed();
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_chat.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
push_team_hall_chat::guids() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_team_hall_chat.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
push_team_hall_chat::mutable_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_team_hall_chat.guids)
  return &guids_;
}

// required uint64 player_guid = 2;
inline bool push_team_hall_chat::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_chat::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_chat::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_chat::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_team_hall_chat::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_chat.player_guid)
  return player_guid_;
}
inline void push_team_hall_chat::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_chat.player_guid)
}

// required string text = 3;
inline bool push_team_hall_chat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_chat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_chat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_chat::clear_text() {
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& push_team_hall_chat::text() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_chat.text)
  return text_.GetNoArena();
}
inline void push_team_hall_chat::set_text(const ::std::string& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_chat.text)
}
#if LANG_CXX11
inline void push_team_hall_chat::set_text(::std::string&& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_team_hall_chat.text)
}
#endif
inline void push_team_hall_chat::set_text(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_team_hall_chat.text)
}
inline void push_team_hall_chat::set_text(const char* value, size_t size) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_team_hall_chat.text)
}
inline ::std::string* push_team_hall_chat::mutable_text() {
  set_changed();
  set_has_text();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_chat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_team_hall_chat::release_text() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_chat.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_team_hall_chat::set_allocated_text(::std::string* text) {
  set_changed();
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_chat.text)
}

// -------------------------------------------------------------------

// smsg_team_chat

// required uint64 player_guid = 1;
inline bool smsg_team_chat::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void smsg_team_chat::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void smsg_team_chat::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void smsg_team_chat::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 smsg_team_chat::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_chat.player_guid)
  return player_guid_;
}
inline void smsg_team_chat::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.smsg_team_chat.player_guid)
}

// required string text = 2;
inline bool smsg_team_chat::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void smsg_team_chat::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void smsg_team_chat::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void smsg_team_chat::clear_text() {
  set_changed();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& smsg_team_chat::text() const {
  // @@protoc_insertion_point(field_get:protocol.game.smsg_team_chat.text)
  return text_.GetNoArena();
}
inline void smsg_team_chat::set_text(const ::std::string& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.smsg_team_chat.text)
}
#if LANG_CXX11
inline void smsg_team_chat::set_text(::std::string&& value) {
  set_changed();
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.smsg_team_chat.text)
}
#endif
inline void smsg_team_chat::set_text(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.smsg_team_chat.text)
}
inline void smsg_team_chat::set_text(const char* value, size_t size) {
  set_changed();
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.smsg_team_chat.text)
}
inline ::std::string* smsg_team_chat::mutable_text() {
  set_changed();
  set_has_text();
  // @@protoc_insertion_point(field_mutable:protocol.game.smsg_team_chat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* smsg_team_chat::release_text() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.smsg_team_chat.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void smsg_team_chat::set_allocated_text(::std::string* text) {
  set_changed();
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.smsg_team_chat.text)
}

// -------------------------------------------------------------------

// push_hall_team_multi_battle

// required uint64 player_guid = 1;
inline bool push_hall_team_multi_battle::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_hall_team_multi_battle::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_hall_team_multi_battle::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_hall_team_multi_battle::clear_player_guid() {
  set_changed();
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
}
inline ::google::protobuf::uint64 push_hall_team_multi_battle::player_guid() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_hall_team_multi_battle.player_guid)
  return player_guid_;
}
inline void push_hall_team_multi_battle::set_player_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_player_guid();
  player_guid_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_hall_team_multi_battle.player_guid)
}

// -------------------------------------------------------------------

// push_team_hall_multi_battle

// repeated uint64 guids = 1;
inline int push_team_hall_multi_battle::guids_size() const {
  return guids_.size();
}
inline void push_team_hall_multi_battle::clear_guids() {
  set_changed();
  guids_.Clear();
}
inline ::google::protobuf::uint64 push_team_hall_multi_battle::guids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.guids)
  return guids_.Get(index);
}
inline void push_team_hall_multi_battle::set_guids(int index, ::google::protobuf::uint64 value) {
  set_changed();
  guids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.guids)
}
inline void push_team_hall_multi_battle::add_guids(::google::protobuf::uint64 value) {
  set_changed();
  guids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_multi_battle.guids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
push_team_hall_multi_battle::guids() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_team_hall_multi_battle.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
push_team_hall_multi_battle::mutable_guids() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_team_hall_multi_battle.guids)
  return &guids_;
}

// required string udp_ip = 2;
inline bool push_team_hall_multi_battle::has_udp_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push_team_hall_multi_battle::set_has_udp_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push_team_hall_multi_battle::clear_has_udp_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push_team_hall_multi_battle::clear_udp_ip() {
  set_changed();
  udp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_udp_ip();
}
inline const ::std::string& push_team_hall_multi_battle::udp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.udp_ip)
  return udp_ip_.GetNoArena();
}
inline void push_team_hall_multi_battle::set_udp_ip(const ::std::string& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.udp_ip)
}
#if LANG_CXX11
inline void push_team_hall_multi_battle::set_udp_ip(::std::string&& value) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_team_hall_multi_battle.udp_ip)
}
#endif
inline void push_team_hall_multi_battle::set_udp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_team_hall_multi_battle.udp_ip)
}
inline void push_team_hall_multi_battle::set_udp_ip(const char* value, size_t size) {
  set_changed();
  set_has_udp_ip();
  udp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_team_hall_multi_battle.udp_ip)
}
inline ::std::string* push_team_hall_multi_battle::mutable_udp_ip() {
  set_changed();
  set_has_udp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_multi_battle.udp_ip)
  return udp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_team_hall_multi_battle::release_udp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_multi_battle.udp_ip)
  if (!has_udp_ip()) {
    return NULL;
  }
  clear_has_udp_ip();
  return udp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_team_hall_multi_battle::set_allocated_udp_ip(::std::string* udp_ip) {
  set_changed();
  if (udp_ip != NULL) {
    set_has_udp_ip();
  } else {
    clear_has_udp_ip();
  }
  udp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_multi_battle.udp_ip)
}

// required int32 udp_port = 3;
inline bool push_team_hall_multi_battle::has_udp_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void push_team_hall_multi_battle::set_has_udp_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void push_team_hall_multi_battle::clear_has_udp_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void push_team_hall_multi_battle::clear_udp_port() {
  set_changed();
  udp_port_ = 0;
  clear_has_udp_port();
}
inline ::google::protobuf::int32 push_team_hall_multi_battle::udp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.udp_port)
  return udp_port_;
}
inline void push_team_hall_multi_battle::set_udp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_udp_port();
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.udp_port)
}

// required string tcp_ip = 4;
inline bool push_team_hall_multi_battle::has_tcp_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push_team_hall_multi_battle::set_has_tcp_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push_team_hall_multi_battle::clear_has_tcp_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push_team_hall_multi_battle::clear_tcp_ip() {
  set_changed();
  tcp_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tcp_ip();
}
inline const ::std::string& push_team_hall_multi_battle::tcp_ip() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.tcp_ip)
  return tcp_ip_.GetNoArena();
}
inline void push_team_hall_multi_battle::set_tcp_ip(const ::std::string& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.tcp_ip)
}
#if LANG_CXX11
inline void push_team_hall_multi_battle::set_tcp_ip(::std::string&& value) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.game.push_team_hall_multi_battle.tcp_ip)
}
#endif
inline void push_team_hall_multi_battle::set_tcp_ip(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.game.push_team_hall_multi_battle.tcp_ip)
}
inline void push_team_hall_multi_battle::set_tcp_ip(const char* value, size_t size) {
  set_changed();
  set_has_tcp_ip();
  tcp_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_team_hall_multi_battle.tcp_ip)
}
inline ::std::string* push_team_hall_multi_battle::mutable_tcp_ip() {
  set_changed();
  set_has_tcp_ip();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_multi_battle.tcp_ip)
  return tcp_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push_team_hall_multi_battle::release_tcp_ip() {
  set_changed();
  // @@protoc_insertion_point(field_release:protocol.game.push_team_hall_multi_battle.tcp_ip)
  if (!has_tcp_ip()) {
    return NULL;
  }
  clear_has_tcp_ip();
  return tcp_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push_team_hall_multi_battle::set_allocated_tcp_ip(::std::string* tcp_ip) {
  set_changed();
  if (tcp_ip != NULL) {
    set_has_tcp_ip();
  } else {
    clear_has_tcp_ip();
  }
  tcp_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.game.push_team_hall_multi_battle.tcp_ip)
}

// required int32 tcp_port = 5;
inline bool push_team_hall_multi_battle::has_tcp_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void push_team_hall_multi_battle::set_has_tcp_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void push_team_hall_multi_battle::clear_has_tcp_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void push_team_hall_multi_battle::clear_tcp_port() {
  set_changed();
  tcp_port_ = 0;
  clear_has_tcp_port();
}
inline ::google::protobuf::int32 push_team_hall_multi_battle::tcp_port() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.tcp_port)
  return tcp_port_;
}
inline void push_team_hall_multi_battle::set_tcp_port(::google::protobuf::int32 value) {
  set_changed();
  set_has_tcp_port();
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.tcp_port)
}

// repeated string code = 6;
inline int push_team_hall_multi_battle::code_size() const {
  return code_.size();
}
inline void push_team_hall_multi_battle::clear_code() {
  set_changed();
  code_.Clear();
}
inline const ::std::string& push_team_hall_multi_battle::code(int index) const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.code)
  return code_.Get(index);
}
inline ::std::string* push_team_hall_multi_battle::mutable_code(int index) {
  set_changed();
  // @@protoc_insertion_point(field_mutable:protocol.game.push_team_hall_multi_battle.code)
  return code_.Mutable(index);
}
inline void push_team_hall_multi_battle::set_code(int index, const ::std::string& value) {
  set_changed();
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.code)
  code_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void push_team_hall_multi_battle::set_code(int index, ::std::string&& value) {
  set_changed();
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.code)
  code_.Mutable(index)->assign(std::move(value));
}
#endif
inline void push_team_hall_multi_battle::set_code(int index, const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  code_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.game.push_team_hall_multi_battle.code)
}
inline void push_team_hall_multi_battle::set_code(int index, const char* value, size_t size) {
  set_changed();
  code_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.game.push_team_hall_multi_battle.code)
}
inline ::std::string* push_team_hall_multi_battle::add_code() {
  set_changed();
  // @@protoc_insertion_point(field_add_mutable:protocol.game.push_team_hall_multi_battle.code)
  return code_.Add();
}
inline void push_team_hall_multi_battle::add_code(const ::std::string& value) {
  set_changed();
  code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_multi_battle.code)
}
#if LANG_CXX11
inline void push_team_hall_multi_battle::add_code(::std::string&& value) {
  set_changed();
  code_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.game.push_team_hall_multi_battle.code)
}
#endif
inline void push_team_hall_multi_battle::add_code(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  code_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.game.push_team_hall_multi_battle.code)
}
inline void push_team_hall_multi_battle::add_code(const char* value, size_t size) {
  set_changed();
  code_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.game.push_team_hall_multi_battle.code)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
push_team_hall_multi_battle::code() const {
  // @@protoc_insertion_point(field_list:protocol.game.push_team_hall_multi_battle.code)
  return code_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
push_team_hall_multi_battle::mutable_code() {
  set_changed();
  // @@protoc_insertion_point(field_mutable_list:protocol.game.push_team_hall_multi_battle.code)
  return &code_;
}

// required int32 num = 7;
inline bool push_team_hall_multi_battle::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void push_team_hall_multi_battle::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void push_team_hall_multi_battle::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void push_team_hall_multi_battle::clear_num() {
  set_changed();
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 push_team_hall_multi_battle::num() const {
  // @@protoc_insertion_point(field_get:protocol.game.push_team_hall_multi_battle.num)
  return num_;
}
inline void push_team_hall_multi_battle::set_num(::google::protobuf::int32 value) {
  set_changed();
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:protocol.game.push_team_hall_multi_battle.num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_5fteam_2eproto
