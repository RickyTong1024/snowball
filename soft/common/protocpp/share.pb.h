// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share.proto

#ifndef PROTOBUF_INCLUDED_share_2eproto
#define PROTOBUF_INCLUDED_share_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_share_2eproto 

namespace protobuf_share_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_share_2eproto
namespace dhc {
class share_t;
class share_tDefaultTypeInternal;
extern share_tDefaultTypeInternal _share_t_default_instance_;
}  // namespace dhc
namespace google {
namespace protobuf {
template<> ::dhc::share_t* Arena::CreateMaybeMessage<::dhc::share_t>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dhc {

// ===================================================================

class share_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dhc.share_t) */ {
 public:
  share_t();
  virtual ~share_t();

  share_t(const share_t& from);

  inline share_t& operator=(const share_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  share_t(share_t&& from) noexcept
    : share_t() {
    *this = ::std::move(from);
  }

  inline share_t& operator=(share_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const share_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const share_t* internal_default_instance() {
    return reinterpret_cast<const share_t*>(
               &_share_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(share_t* other);
  friend void swap(share_t& a, share_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline share_t* New() const final {
    return CreateMaybeMessage<share_t>(NULL);
  }

  share_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<share_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const share_t& from);
  void MergeFrom(const share_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(share_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // optional uint64 ctime = 3;
  bool has_ctime() const;
  void clear_ctime();
  static const int kCtimeFieldNumber = 3;
  ::google::protobuf::uint64 ctime() const;
  void set_ctime(::google::protobuf::uint64 value);

  // optional int32 num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dhc.share_t)
 private:
  void set_has_guid();
  void clear_has_guid();
  void set_has_num();
  void clear_has_num();
  void set_has_ctime();
  void clear_has_ctime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 ctime_;
  ::google::protobuf::int32 num_;
  friend struct ::protobuf_share_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// share_t

// optional uint64 guid = 1;
inline bool share_t::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void share_t::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void share_t::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void share_t::clear_guid() {
  set_changed();
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 share_t::guid() const {
  // @@protoc_insertion_point(field_get:dhc.share_t.guid)
  return guid_;
}
inline void share_t::set_guid(::google::protobuf::uint64 value) {
  set_changed();
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:dhc.share_t.guid)
}

// optional int32 num = 2;
inline bool share_t::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void share_t::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void share_t::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void share_t::clear_num() {
  set_changed();
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 share_t::num() const {
  // @@protoc_insertion_point(field_get:dhc.share_t.num)
  return num_;
}
inline void share_t::set_num(::google::protobuf::int32 value) {
  set_changed();
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:dhc.share_t.num)
}

// optional uint64 ctime = 3;
inline bool share_t::has_ctime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void share_t::set_has_ctime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void share_t::clear_has_ctime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void share_t::clear_ctime() {
  set_changed();
  ctime_ = GOOGLE_ULONGLONG(0);
  clear_has_ctime();
}
inline ::google::protobuf::uint64 share_t::ctime() const {
  // @@protoc_insertion_point(field_get:dhc.share_t.ctime)
  return ctime_;
}
inline void share_t::set_ctime(::google::protobuf::uint64 value) {
  set_changed();
  set_has_ctime();
  ctime_ = value;
  // @@protoc_insertion_point(field_set:dhc.share_t.ctime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dhc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_share_2eproto
