// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_INCLUDED_rpc_2eproto
#define PROTOBUF_INCLUDED_rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_2eproto 

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_2eproto
namespace rpcproto {
class push;
class pushDefaultTypeInternal;
extern pushDefaultTypeInternal _push_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
class responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
class rpc;
class rpcDefaultTypeInternal;
extern rpcDefaultTypeInternal _rpc_default_instance_;
}  // namespace rpcproto
namespace google {
namespace protobuf {
template<> ::rpcproto::push* Arena::CreateMaybeMessage<::rpcproto::push>(Arena*);
template<> ::rpcproto::request* Arena::CreateMaybeMessage<::rpcproto::request>(Arena*);
template<> ::rpcproto::response* Arena::CreateMaybeMessage<::rpcproto::response>(Arena*);
template<> ::rpcproto::rpc* Arena::CreateMaybeMessage<::rpcproto::rpc>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rpcproto {

enum erpc {
  REQUESST = 0,
  PUSH = 1,
  RESPONSE = 2
};
bool erpc_IsValid(int value);
const erpc erpc_MIN = REQUESST;
const erpc erpc_MAX = RESPONSE;
const int erpc_ARRAYSIZE = erpc_MAX + 1;

const ::google::protobuf::EnumDescriptor* erpc_descriptor();
inline const ::std::string& erpc_Name(erpc value) {
  return ::google::protobuf::internal::NameOfEnum(
    erpc_descriptor(), value);
}
inline bool erpc_Parse(
    const ::std::string& name, erpc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<erpc>(
    erpc_descriptor(), name, value);
}
// ===================================================================

class rpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcproto.rpc) */ {
 public:
  rpc();
  virtual ~rpc();

  rpc(const rpc& from);

  inline rpc& operator=(const rpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rpc(rpc&& from) noexcept
    : rpc() {
    *this = ::std::move(from);
  }

  inline rpc& operator=(rpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpc* internal_default_instance() {
    return reinterpret_cast<const rpc*>(
               &_rpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(rpc* other);
  friend void swap(rpc& a, rpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rpc* New() const final {
    return CreateMaybeMessage<rpc>(NULL);
  }

  rpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rpc& from);
  void MergeFrom(const rpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpcproto.request req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  private:
  const ::rpcproto::request& _internal_req() const;
  public:
  const ::rpcproto::request& req() const;
  ::rpcproto::request* release_req();
  ::rpcproto::request* mutable_req();
  void set_allocated_req(::rpcproto::request* req);

  // optional .rpcproto.response rep = 3;
  bool has_rep() const;
  void clear_rep();
  static const int kRepFieldNumber = 3;
  private:
  const ::rpcproto::response& _internal_rep() const;
  public:
  const ::rpcproto::response& rep() const;
  ::rpcproto::response* release_rep();
  ::rpcproto::response* mutable_rep();
  void set_allocated_rep(::rpcproto::response* rep);

  // optional .rpcproto.push ph = 4;
  bool has_ph() const;
  void clear_ph();
  static const int kPhFieldNumber = 4;
  private:
  const ::rpcproto::push& _internal_ph() const;
  public:
  const ::rpcproto::push& ph() const;
  ::rpcproto::push* release_ph();
  ::rpcproto::push* mutable_ph();
  void set_allocated_ph(::rpcproto::push* ph);

  // required .rpcproto.erpc type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::rpcproto::erpc type() const;
  void set_type(::rpcproto::erpc value);

  // @@protoc_insertion_point(class_scope:rpcproto.rpc)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_req();
  void clear_has_req();
  void set_has_rep();
  void clear_has_rep();
  void set_has_ph();
  void clear_has_ph();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::rpcproto::request* req_;
  ::rpcproto::response* rep_;
  ::rpcproto::push* ph_;
  int type_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcproto.request) */ {
 public:
  request();
  virtual ~request();

  request(const request& from);

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(request* other);
  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline request* New() const final {
    return CreateMaybeMessage<request>(NULL);
  }

  request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpcproto.request)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcproto.response) */ {
 public:
  response();
  virtual ~response();

  response(const response& from);

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(response* other);
  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline response* New() const final {
    return CreateMaybeMessage<response>(NULL);
  }

  response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 error_code = 4;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpcproto.response)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_msg();
  void clear_has_msg();
  void set_has_error_code();
  void clear_has_error_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 error_code_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class push : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpcproto.push) */ {
 public:
  push();
  virtual ~push();

  push(const push& from);

  inline push& operator=(const push& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  push(push&& from) noexcept
    : push() {
    *this = ::std::move(from);
  }

  inline push& operator=(push&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const push& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const push* internal_default_instance() {
    return reinterpret_cast<const push*>(
               &_push_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(push* other);
  friend void swap(push& a, push& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline push* New() const final {
    return CreateMaybeMessage<push>(NULL);
  }

  push* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<push>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const push& from);
  void MergeFrom(const push& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:rpcproto.push)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rpc

// required .rpcproto.erpc type = 1;
inline bool rpc::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rpc::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rpc::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rpc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rpcproto::erpc rpc::type() const {
  // @@protoc_insertion_point(field_get:rpcproto.rpc.type)
  return static_cast< ::rpcproto::erpc >(type_);
}
inline void rpc::set_type(::rpcproto::erpc value) {
  assert(::rpcproto::erpc_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:rpcproto.rpc.type)
}

// optional .rpcproto.request req = 2;
inline bool rpc::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rpc::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rpc::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rpc::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::rpcproto::request& rpc::_internal_req() const {
  return *req_;
}
inline const ::rpcproto::request& rpc::req() const {
  const ::rpcproto::request* p = req_;
  // @@protoc_insertion_point(field_get:rpcproto.rpc.req)
  return p != NULL ? *p : *reinterpret_cast<const ::rpcproto::request*>(
      &::rpcproto::_request_default_instance_);
}
inline ::rpcproto::request* rpc::release_req() {
  // @@protoc_insertion_point(field_release:rpcproto.rpc.req)
  clear_has_req();
  ::rpcproto::request* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::rpcproto::request* rpc::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::rpcproto::request>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rpcproto.rpc.req)
  return req_;
}
inline void rpc::set_allocated_req(::rpcproto::request* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:rpcproto.rpc.req)
}

// optional .rpcproto.response rep = 3;
inline bool rpc::has_rep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rpc::set_has_rep() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rpc::clear_has_rep() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rpc::clear_rep() {
  if (rep_ != NULL) rep_->Clear();
  clear_has_rep();
}
inline const ::rpcproto::response& rpc::_internal_rep() const {
  return *rep_;
}
inline const ::rpcproto::response& rpc::rep() const {
  const ::rpcproto::response* p = rep_;
  // @@protoc_insertion_point(field_get:rpcproto.rpc.rep)
  return p != NULL ? *p : *reinterpret_cast<const ::rpcproto::response*>(
      &::rpcproto::_response_default_instance_);
}
inline ::rpcproto::response* rpc::release_rep() {
  // @@protoc_insertion_point(field_release:rpcproto.rpc.rep)
  clear_has_rep();
  ::rpcproto::response* temp = rep_;
  rep_ = NULL;
  return temp;
}
inline ::rpcproto::response* rpc::mutable_rep() {
  set_has_rep();
  if (rep_ == NULL) {
    auto* p = CreateMaybeMessage<::rpcproto::response>(GetArenaNoVirtual());
    rep_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rpcproto.rpc.rep)
  return rep_;
}
inline void rpc::set_allocated_rep(::rpcproto::response* rep) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rep_;
  }
  if (rep) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rep = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rep, submessage_arena);
    }
    set_has_rep();
  } else {
    clear_has_rep();
  }
  rep_ = rep;
  // @@protoc_insertion_point(field_set_allocated:rpcproto.rpc.rep)
}

// optional .rpcproto.push ph = 4;
inline bool rpc::has_ph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rpc::set_has_ph() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rpc::clear_has_ph() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rpc::clear_ph() {
  if (ph_ != NULL) ph_->Clear();
  clear_has_ph();
}
inline const ::rpcproto::push& rpc::_internal_ph() const {
  return *ph_;
}
inline const ::rpcproto::push& rpc::ph() const {
  const ::rpcproto::push* p = ph_;
  // @@protoc_insertion_point(field_get:rpcproto.rpc.ph)
  return p != NULL ? *p : *reinterpret_cast<const ::rpcproto::push*>(
      &::rpcproto::_push_default_instance_);
}
inline ::rpcproto::push* rpc::release_ph() {
  // @@protoc_insertion_point(field_release:rpcproto.rpc.ph)
  clear_has_ph();
  ::rpcproto::push* temp = ph_;
  ph_ = NULL;
  return temp;
}
inline ::rpcproto::push* rpc::mutable_ph() {
  set_has_ph();
  if (ph_ == NULL) {
    auto* p = CreateMaybeMessage<::rpcproto::push>(GetArenaNoVirtual());
    ph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rpcproto.rpc.ph)
  return ph_;
}
inline void rpc::set_allocated_ph(::rpcproto::push* ph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ph_;
  }
  if (ph) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ph, submessage_arena);
    }
    set_has_ph();
  } else {
    clear_has_ph();
  }
  ph_ = ph;
  // @@protoc_insertion_point(field_set_allocated:rpcproto.rpc.ph)
}

// -------------------------------------------------------------------

// request

// required string name = 1;
inline bool request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request::clear_name() {
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& request::name() const {
  // @@protoc_insertion_point(field_get:rpcproto.request.name)
  return name_.GetNoArena();
}
inline void request::set_name(const ::std::string& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcproto.request.name)
}
#if LANG_CXX11
inline void request::set_name(::std::string&& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcproto.request.name)
}
#endif
inline void request::set_name(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcproto.request.name)
}
inline void request::set_name(const char* value, size_t size) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcproto.request.name)
}
inline ::std::string* request::mutable_name() {
  set_changed();
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rpcproto.request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* request::release_name() {
  set_changed();
  // @@protoc_insertion_point(field_release:rpcproto.request.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_name(::std::string* name) {
  set_changed();
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpcproto.request.name)
}

// required int32 id = 2;
inline bool request::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void request::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void request::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void request::clear_id() {
  set_changed();
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 request::id() const {
  // @@protoc_insertion_point(field_get:rpcproto.request.id)
  return id_;
}
inline void request::set_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rpcproto.request.id)
}

// optional bytes msg = 3;
inline bool request::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void request::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void request::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void request::clear_msg() {
  set_changed();
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& request::msg() const {
  // @@protoc_insertion_point(field_get:rpcproto.request.msg)
  return msg_.GetNoArena();
}
inline void request::set_msg(const ::std::string& value) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcproto.request.msg)
}
#if LANG_CXX11
inline void request::set_msg(::std::string&& value) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcproto.request.msg)
}
#endif
inline void request::set_msg(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcproto.request.msg)
}
inline void request::set_msg(const void* value, size_t size) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcproto.request.msg)
}
inline ::std::string* request::mutable_msg() {
  set_changed();
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:rpcproto.request.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* request::release_msg() {
  set_changed();
  // @@protoc_insertion_point(field_release:rpcproto.request.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void request::set_allocated_msg(::std::string* msg) {
  set_changed();
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rpcproto.request.msg)
}

// -------------------------------------------------------------------

// response

// required string name = 1;
inline bool response::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void response::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void response::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void response::clear_name() {
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& response::name() const {
  // @@protoc_insertion_point(field_get:rpcproto.response.name)
  return name_.GetNoArena();
}
inline void response::set_name(const ::std::string& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcproto.response.name)
}
#if LANG_CXX11
inline void response::set_name(::std::string&& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcproto.response.name)
}
#endif
inline void response::set_name(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcproto.response.name)
}
inline void response::set_name(const char* value, size_t size) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcproto.response.name)
}
inline ::std::string* response::mutable_name() {
  set_changed();
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rpcproto.response.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* response::release_name() {
  set_changed();
  // @@protoc_insertion_point(field_release:rpcproto.response.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void response::set_allocated_name(::std::string* name) {
  set_changed();
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpcproto.response.name)
}

// required int32 id = 2;
inline bool response::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void response::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void response::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void response::clear_id() {
  set_changed();
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 response::id() const {
  // @@protoc_insertion_point(field_get:rpcproto.response.id)
  return id_;
}
inline void response::set_id(::google::protobuf::int32 value) {
  set_changed();
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:rpcproto.response.id)
}

// optional bytes msg = 3;
inline bool response::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void response::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void response::clear_msg() {
  set_changed();
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& response::msg() const {
  // @@protoc_insertion_point(field_get:rpcproto.response.msg)
  return msg_.GetNoArena();
}
inline void response::set_msg(const ::std::string& value) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcproto.response.msg)
}
#if LANG_CXX11
inline void response::set_msg(::std::string&& value) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcproto.response.msg)
}
#endif
inline void response::set_msg(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcproto.response.msg)
}
inline void response::set_msg(const void* value, size_t size) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcproto.response.msg)
}
inline ::std::string* response::mutable_msg() {
  set_changed();
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:rpcproto.response.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* response::release_msg() {
  set_changed();
  // @@protoc_insertion_point(field_release:rpcproto.response.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void response::set_allocated_msg(::std::string* msg) {
  set_changed();
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rpcproto.response.msg)
}

// optional int32 error_code = 4;
inline bool response::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void response::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void response::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void response::clear_error_code() {
  set_changed();
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 response::error_code() const {
  // @@protoc_insertion_point(field_get:rpcproto.response.error_code)
  return error_code_;
}
inline void response::set_error_code(::google::protobuf::int32 value) {
  set_changed();
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:rpcproto.response.error_code)
}

// -------------------------------------------------------------------

// push

// required string name = 1;
inline bool push::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void push::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void push::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void push::clear_name() {
  set_changed();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& push::name() const {
  // @@protoc_insertion_point(field_get:rpcproto.push.name)
  return name_.GetNoArena();
}
inline void push::set_name(const ::std::string& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcproto.push.name)
}
#if LANG_CXX11
inline void push::set_name(::std::string&& value) {
  set_changed();
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcproto.push.name)
}
#endif
inline void push::set_name(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcproto.push.name)
}
inline void push::set_name(const char* value, size_t size) {
  set_changed();
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcproto.push.name)
}
inline ::std::string* push::mutable_name() {
  set_changed();
  set_has_name();
  // @@protoc_insertion_point(field_mutable:rpcproto.push.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push::release_name() {
  set_changed();
  // @@protoc_insertion_point(field_release:rpcproto.push.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push::set_allocated_name(::std::string* name) {
  set_changed();
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rpcproto.push.name)
}

// optional bytes msg = 2;
inline bool push::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void push::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void push::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void push::clear_msg() {
  set_changed();
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& push::msg() const {
  // @@protoc_insertion_point(field_get:rpcproto.push.msg)
  return msg_.GetNoArena();
}
inline void push::set_msg(const ::std::string& value) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpcproto.push.msg)
}
#if LANG_CXX11
inline void push::set_msg(::std::string&& value) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpcproto.push.msg)
}
#endif
inline void push::set_msg(const char* value) {
  set_changed();
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpcproto.push.msg)
}
inline void push::set_msg(const void* value, size_t size) {
  set_changed();
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpcproto.push.msg)
}
inline ::std::string* push::mutable_msg() {
  set_changed();
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:rpcproto.push.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* push::release_msg() {
  set_changed();
  // @@protoc_insertion_point(field_release:rpcproto.push.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void push::set_allocated_msg(::std::string* msg) {
  set_changed();
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:rpcproto.push.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpcproto::erpc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpcproto::erpc>() {
  return ::rpcproto::erpc_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_2eproto
